message DefinedTerm {
  // from DefinedTerm
  oneof in_defined_term_set {
    string url = 1; // Data type: URL.
    DefinedTermSet defined_term_set = 2; // A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
  }
  string term_code = 3; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message DefinedTermSet {
  // from DefinedTermSet
  DefinedTerm has_defined_term = 1; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  // inherited from CreativeWork
  oneof object_object {
    string text = 2; // Data type: Text.
    QuantitativeValue quantitative_value = 3; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 4; // The most generic type of item.
  string abstract = 5; // Data type: Text.
  string access_mode = 6; // Data type: Text.
  ItemList access_mode_sufficient = 7; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 8; // Data type: Text.
  string accessibility_control = 9; // Data type: Text.
  string accessibility_feature = 10; // Data type: Text.
  string accessibility_hazard = 11; // Data type: Text.
  string accessibility_summary = 12; // Data type: Text.
  Person accountable_person = 13; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 15; // Data type: URL.
  }
  AggregateRating aggregate_rating = 16; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 17; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 18; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 19; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 20; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 21; // Data type: Text.
  }
  MediaObject associated_media = 22; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 23; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 24; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 25; // An audio file.
    MusicRecording music_recording = 26; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 27; // A person (alive, dead, undead, or fictional).
    Organization organization = 28; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 29; // Data type: Text.
  string awards = 30; // Data type: Text.
  Person character = 31; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 32; // Data type: Text.
    CreativeWork creative_work = 33; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 34; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 35; // Data type: Integer.
  string conditions_of_access = 36; // Data type: Text.
  Place content_location = 37; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 38; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 39; // Data type: Text.
  }
  string content_reference_time = 40; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 41; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 42; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 45; // Data type: Text.
  float32 copyright_year = 46; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 47; // A [[comment]] that corrects [[CreativeWork]].
    string text = 48; // Data type: Text.
    string url = 49; // Data type: URL.
  }
  Country country_of_origin = 50; // A country.
  oneof creative_work_status {
    string text = 51; // Data type: Text.
    DefinedTerm defined_term = 52; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 53; // A person (alive, dead, undead, or fictional).
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 55; // Data type: Text.
  string date_created = 56; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 58; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 59; // Data type: URL.
  string edit_eidr = 60; // Data type: Text.
  Person editor = 61; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 62; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 63; // Data type: URL.
    string text = 64; // Data type: Text.
    DefinedTerm defined_term = 65; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 67; // Data type: Text.
  }
  MediaObject encoding = 68; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 69; // Data type: Text.
  MediaObject encodings = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 71; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 72; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 73; // Data type: URL.
  oneof funder {
    Organization organization = 74; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 75; // A person (alive, dead, undead, or fictional).
  }
  string genre = 76; // Data type: URL.
  CreativeWork has_part = 77; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 78; // Data type: Text.
  oneof in_language {
    string text = 79; // Data type: Text.
    Language language = 80; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 81; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 82; // Data type: Text.
  Claim interpreted_as_claim = 83; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 84; // Boolean: True or False.
  oneof is_based_on {
    string url = 85; // Data type: URL.
    Product product = 86; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 89; // Data type: URL.
    Product product = 90; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 91; // Boolean: True or False.
  oneof is_part_of {
    string url = 92; // Data type: URL.
    CreativeWork creative_work = 93; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 94; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 95; // Data type: URL.
    string text = 96; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 97; // Data type: Text.
    DefinedTerm defined_term = 98; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 99; // Data type: URL.
    CreativeWork creative_work = 100; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 101; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 102; // The most generic type of item.
  oneof maintainer {
    Person person = 103; // A person (alive, dead, undead, or fictional).
    Organization organization = 104; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 105; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  Thing mentions = 108; // The most generic type of item.
  oneof offers {
    Demand demand = 109; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 110; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 111; // Data type: Text.
    DefinedTerm defined_term = 112; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 113; // Data type: Text.
    float32 integer = 114; // Data type: Integer.
  }
  oneof producer {
    Person person = 115; // A person (alive, dead, undead, or fictional).
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 117; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 118; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 119; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 120; // A person (alive, dead, undead, or fictional).
    Organization organization = 121; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 122; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 123; // Data type: URL.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 125; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 126; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 127; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 128; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 129; // Data type: Text.
  string sd_date_published = 130; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 131; // Data type: URL.
    CreativeWork creative_work = 132; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 134; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 135; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 136; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 137; // Data type: Text.
    QuantitativeValue quantitative_value = 138; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 139; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 140; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 141; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 142; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 143; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 144; // Data type: Text.
    DefinedTerm defined_term = 145; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 146; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 147; // Data type: Text.
  string text = 148; // Data type: Text.
  string thumbnail_url = 149; // Data type: URL.
  Duration time_required = 150; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 151; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 152; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 153; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 154; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 155; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 156; // Data type: URL.
  }
  oneof version {
    string text = 157; // Data type: Text.
    float32 number = 158; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 159; // A video file.
    Clip clip = 160; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 163; // Data type: URL.
  string alternate_name = 164; // Data type: Text.
  string description = 165; // Data type: Text.
  string disambiguating_description = 166; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 167; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 168; // Data type: Text.
    string url = 169; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 170; // An image file.
    string url = 171; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 172; // Data type: URL.
    CreativeWork creative_work = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 174; // Data type: Text.
  Action potential_action = 175; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 176; // Data type: URL.
  oneof subject_of {
    Event event = 177; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 178; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 179; // Data type: URL.
}
message QuantitativeValue {
  // from QuantitativeValue
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  float32 max_value = 2; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 min_value = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  string unit_code = 4; // Data type: Text.
  string unit_text = 5; // Data type: Text.
  oneof value {
    string text = 6; // Data type: Text.
    float32 number = 7; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    bool boolean = 8; // Boolean: True or False.
    StructuredValue structured_value = 9; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
  }
  oneof value_reference {
    PropertyValue property_value = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    StructuredValue structured_value = 11; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
    QualitativeValue qualitative_value = 12; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
    MeasurementTypeEnumeration measurement_type_enumeration = 13; // Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
    QuantitativeValue quantitative_value = 14; //  A point value or interval for product characteristics and other purposes.
    string text = 15; // Data type: Text.
    DefinedTerm defined_term = 16; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    Enumeration enumeration = 17; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
  }
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 18; // Data type: URL.
  string alternate_name = 19; // Data type: Text.
  string description = 20; // Data type: Text.
  string disambiguating_description = 21; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 22; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 23; // Data type: Text.
    string url = 24; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 25; // An image file.
    string url = 26; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 27; // Data type: URL.
    CreativeWork creative_work = 28; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 29; // Data type: Text.
  Action potential_action = 30; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 31; // Data type: URL.
  oneof subject_of {
    Event event = 32; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 33; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 34; // Data type: URL.
}
message StructuredValue {
  // from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message PropertyValue {
  // from PropertyValue
  float32 max_value = 1; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  string measurement_technique = 2; // Data type: Text.
  float32 min_value = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  string property_id = 4; // Data type: URL.
  string unit_code = 5; // Data type: Text.
  string unit_text = 6; // Data type: Text.
  oneof value {
    string text = 7; // Data type: Text.
    float32 number = 8; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    bool boolean = 9; // Boolean: True or False.
    StructuredValue structured_value = 10; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
  }
  oneof value_reference {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    StructuredValue structured_value = 12; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
    QualitativeValue qualitative_value = 13; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
    MeasurementTypeEnumeration measurement_type_enumeration = 14; // Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
    QuantitativeValue quantitative_value = 15; //  A point value or interval for product characteristics and other purposes.
    string text = 16; // Data type: Text.
    DefinedTerm defined_term = 17; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    Enumeration enumeration = 18; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
  }
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 19; // Data type: URL.
  string alternate_name = 20; // Data type: Text.
  string description = 21; // Data type: Text.
  string disambiguating_description = 22; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 23; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 24; // Data type: Text.
    string url = 25; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 26; // An image file.
    string url = 27; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 28; // Data type: URL.
    CreativeWork creative_work = 29; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 30; // Data type: Text.
  Action potential_action = 31; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 32; // Data type: URL.
  oneof subject_of {
    Event event = 33; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 34; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 35; // Data type: URL.
}
message QualitativeValue {
  // from QualitativeValue
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  QualitativeValue equal = 2; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue greater = 3; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue greater_or_equal = 4; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue lesser = 5; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue lesser_or_equal = 6; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue non_equal = 7; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  oneof value_reference {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    StructuredValue structured_value = 9; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
    QualitativeValue qualitative_value = 10; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
    MeasurementTypeEnumeration measurement_type_enumeration = 11; // Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
    QuantitativeValue quantitative_value = 12; //  A point value or interval for product characteristics and other purposes.
    string text = 13; // Data type: Text.
    DefinedTerm defined_term = 14; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    Enumeration enumeration = 15; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
  }
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 16; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 17; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 18; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 19; // Data type: URL.
  string alternate_name = 20; // Data type: Text.
  string description = 21; // Data type: Text.
  string disambiguating_description = 22; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 23; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 24; // Data type: Text.
    string url = 25; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 26; // An image file.
    string url = 27; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 28; // Data type: URL.
    CreativeWork creative_work = 29; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 30; // Data type: Text.
  Action potential_action = 31; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 32; // Data type: URL.
  oneof subject_of {
    Event event = 33; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 34; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 35; // Data type: URL.
}
message MeasurementTypeEnumeration {
  // from MeasurementTypeEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Enumeration {
  // from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Class {
  // from Class
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Property {
  // from Property
  Class domain_includes = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
  Property inverse_of = 2; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  Class range_includes = 3; // A class, also often called a 'Type'; equivalent to rdfs:Class.
  oneof superseded_by {
    Class class = 4; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 5; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 6; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message Demand {
  // from Demand
  oneof accepted_payment_method {
    LoanOrCredit loan_or_credit = 1; // A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
    PaymentMethod payment_method = 2; // A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm         
  }
  QuantitativeValue advance_booking_requirement = 3; //  A point value or interval for product characteristics and other purposes.
  oneof area_served {
    string text = 4; // Data type: Text.
    GeoShape geo_shape = 5; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 6; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 7; // A geographical region, typically under the jurisdiction of a particular government.
  }
  ItemAvailability availability = 8; // A list of possible product availability options.
  string availability_ends = 9; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string availability_starts = 10; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  Place available_at_or_from = 11; // Entities that have a somewhat fixed, physical extension.
  DeliveryMethod available_delivery_method = 12; // A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS         
  BusinessFunction business_function = 13; // The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy         
  QuantitativeValue delivery_lead_time = 14; //  A point value or interval for product characteristics and other purposes.
  BusinessEntityType eligible_customer_type = 15; // A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller 	  
  QuantitativeValue eligible_duration = 16; //  A point value or interval for product characteristics and other purposes.
  QuantitativeValue eligible_quantity = 17; //  A point value or interval for product characteristics and other purposes.
  oneof eligible_region {
    GeoShape geo_shape = 18; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 19; // Entities that have a somewhat fixed, physical extension.
    string text = 20; // Data type: Text.
  }
  PriceSpecification eligible_transaction_volume = 21; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  string gtin = 22; // Data type: Text.
  string gtin_12 = 23; // Data type: Text.
  string gtin_13 = 24; // Data type: Text.
  string gtin_14 = 25; // Data type: Text.
  string gtin_8 = 26; // Data type: Text.
  TypeAndQuantityNode includes_object = 27; // A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
  oneof ineligible_region {
    Place place = 28; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 29; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 30; // Data type: Text.
  }
  QuantitativeValue inventory_level = 31; //  A point value or interval for product characteristics and other purposes.
  OfferItemCondition item_condition = 32; // A list of possible conditions for the item.
  oneof item_offered {
    Trip trip = 33; // A trip or journey. An itinerary of visits to one or more places.
    Event event = 34; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    AggregateOffer aggregate_offer = 35; // When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
    CreativeWork creative_work = 36; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    Service service = 37; // A service provided by an organization, e.g. delivery service, print services, etc.
    Product product = 38; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    MenuItem menu_item = 39; // A food or drink item listed in a menu or menu section.
  }
  string mpn = 40; // Data type: Text.
  PriceSpecification price_specification = 41; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  oneof seller {
    Person person = 42; // A person (alive, dead, undead, or fictional).
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
  }
  string serial_number = 44; // Data type: Text.
  string sku = 45; // Data type: Text.
  string valid_from = 46; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 47; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  WarrantyPromise warranty = 48; // A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 49; // Data type: URL.
  string alternate_name = 50; // Data type: Text.
  string description = 51; // Data type: Text.
  string disambiguating_description = 52; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 53; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 54; // Data type: Text.
    string url = 55; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 56; // An image file.
    string url = 57; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 58; // Data type: URL.
    CreativeWork creative_work = 59; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 60; // Data type: Text.
  Action potential_action = 61; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 62; // Data type: URL.
  oneof subject_of {
    Event event = 63; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 64; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 65; // Data type: URL.
}
message TypeAndQuantityNode {
  // from TypeAndQuantityNode
  float32 amount_of_this_good = 1; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  BusinessFunction business_function = 2; // The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy         
  oneof type_of_good {
    Service service = 3; // A service provided by an organization, e.g. delivery service, print services, etc.
    Product product = 4; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  string unit_code = 5; // Data type: Text.
  string unit_text = 6; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message BusinessFunction {
  // from BusinessFunction
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Service {
  // from Service
  AggregateRating aggregate_rating = 1; // The average rating based on multiple ratings or reviews.
  oneof area_served {
    string text = 2; // Data type: Text.
    GeoShape geo_shape = 3; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 4; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 5; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience audience = 6; // Intended audience for an item, i.e. the group for whom the item was created.
  ServiceChannel available_channel = 7; // A means for accessing a service, e.g. a government office location, web site, or phone number.
  string award = 8; // Data type: Text.
  oneof brand {
    Organization organization = 9; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 10; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof broker {
    Organization organization = 11; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 12; // A person (alive, dead, undead, or fictional).
  }
  oneof category {
    string text = 13; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 14; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 15; // The most generic type of item.
    string url = 16; // Data type: URL.
  }
  OfferCatalog has_offer_catalog = 17; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  OpeningHoursSpecification hours_available = 18; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof is_related_to {
    Product product = 19; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 20; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 21; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 22; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof logo {
    string url = 23; // Data type: URL.
    ImageObject image_object = 24; // An image file.
  }
  oneof offers {
    Demand demand = 25; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 26; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  Thing produces = 27; // The most generic type of item.
  oneof provider {
    Organization organization = 28; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 29; // A person (alive, dead, undead, or fictional).
  }
  string provider_mobility = 30; // Data type: Text.
  Review review = 31; // A review of an item - for example, of a restaurant, movie, or store.
  oneof service_area {
    GeoShape geo_shape = 32; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 33; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 34; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience service_audience = 35; // Intended audience for an item, i.e. the group for whom the item was created.
  Thing service_output = 36; // The most generic type of item.
  oneof service_type {
    string text = 37; // Data type: Text.
    GovernmentBenefitsType government_benefits_type = 38; // GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
  }
  string slogan = 39; // Data type: Text.
  string terms_of_service = 40; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 41; // Data type: URL.
  string alternate_name = 42; // Data type: Text.
  string description = 43; // Data type: Text.
  string disambiguating_description = 44; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 45; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 46; // Data type: Text.
    string url = 47; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 48; // An image file.
    string url = 49; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 50; // Data type: URL.
    CreativeWork creative_work = 51; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 52; // Data type: Text.
  Action potential_action = 53; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 54; // Data type: URL.
  oneof subject_of {
    Event event = 55; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 56; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 57; // Data type: URL.
}
message Offer {
  // from Offer
  oneof accepted_payment_method {
    LoanOrCredit loan_or_credit = 1; // A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
    PaymentMethod payment_method = 2; // A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm         
  }
  Offer add_on = 3; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  QuantitativeValue advance_booking_requirement = 4; //  A point value or interval for product characteristics and other purposes.
  AggregateRating aggregate_rating = 5; // The average rating based on multiple ratings or reviews.
  oneof area_served {
    string text = 6; // Data type: Text.
    GeoShape geo_shape = 7; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 8; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 9; // A geographical region, typically under the jurisdiction of a particular government.
  }
  ItemAvailability availability = 10; // A list of possible product availability options.
  string availability_ends = 11; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string availability_starts = 12; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  Place available_at_or_from = 13; // Entities that have a somewhat fixed, physical extension.
  DeliveryMethod available_delivery_method = 14; // A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS         
  BusinessFunction business_function = 15; // The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy         
  oneof category {
    string text = 16; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 17; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 18; // The most generic type of item.
    string url = 19; // Data type: URL.
  }
  QuantitativeValue delivery_lead_time = 20; //  A point value or interval for product characteristics and other purposes.
  BusinessEntityType eligible_customer_type = 21; // A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller 	  
  QuantitativeValue eligible_duration = 22; //  A point value or interval for product characteristics and other purposes.
  QuantitativeValue eligible_quantity = 23; //  A point value or interval for product characteristics and other purposes.
  oneof eligible_region {
    GeoShape geo_shape = 24; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 25; // Entities that have a somewhat fixed, physical extension.
    string text = 26; // Data type: Text.
  }
  PriceSpecification eligible_transaction_volume = 27; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  string gtin = 28; // Data type: Text.
  string gtin_12 = 29; // Data type: Text.
  string gtin_13 = 30; // Data type: Text.
  string gtin_14 = 31; // Data type: Text.
  string gtin_8 = 32; // Data type: Text.
  QuantitativeValue has_measurement = 33; //  A point value or interval for product characteristics and other purposes.
  MerchantReturnPolicy has_merchant_return_policy = 34; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  TypeAndQuantityNode includes_object = 35; // A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
  oneof ineligible_region {
    Place place = 36; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 37; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 38; // Data type: Text.
  }
  QuantitativeValue inventory_level = 39; //  A point value or interval for product characteristics and other purposes.
  OfferItemCondition item_condition = 40; // A list of possible conditions for the item.
  oneof item_offered {
    Trip trip = 41; // A trip or journey. An itinerary of visits to one or more places.
    Event event = 42; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    AggregateOffer aggregate_offer = 43; // When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
    CreativeWork creative_work = 44; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    Service service = 45; // A service provided by an organization, e.g. delivery service, print services, etc.
    Product product = 46; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    MenuItem menu_item = 47; // A food or drink item listed in a menu or menu section.
  }
  oneof lease_length {
    QuantitativeValue quantitative_value = 48; //  A point value or interval for product characteristics and other purposes.
    Duration duration = 49; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  }
  string mpn = 50; // Data type: Text.
  oneof offered_by {
    Organization organization = 51; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 52; // A person (alive, dead, undead, or fictional).
  }
  oneof price {
    float32 number = 53; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 54; // Data type: Text.
  }
  string price_currency = 55; // Data type: Text.
  PriceSpecification price_specification = 56; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  string price_valid_until = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Review review = 58; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 59; // A review of an item - for example, of a restaurant, movie, or store.
  oneof seller {
    Person person = 60; // A person (alive, dead, undead, or fictional).
    Organization organization = 61; // An organization such as a school, NGO, corporation, club, etc.
  }
  string serial_number = 62; // Data type: Text.
  OfferShippingDetails shipping_details = 63; // OfferShippingDetails represents information about shipping destinations.  Multiple of these entities can be used to represent different shipping rates for different destinations:  One entity for Alaska/Hawaii. A different one for continental US.A different one for all France.  Multiple of these entities can be used to represent different shipping costs and delivery times.  Two entities that are identical but differ in rate and time:  e.g. Cheaper and slower: $5 in 5-7days or Fast and expensive: $15 in 1-2 days.
  string sku = 64; // Data type: Text.
  string valid_from = 65; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 66; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  WarrantyPromise warranty = 67; // A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 68; // Data type: URL.
  string alternate_name = 69; // Data type: Text.
  string description = 70; // Data type: Text.
  string disambiguating_description = 71; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 72; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 73; // Data type: Text.
    string url = 74; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 75; // An image file.
    string url = 76; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 77; // Data type: URL.
    CreativeWork creative_work = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 79; // Data type: Text.
  Action potential_action = 80; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 81; // Data type: URL.
  oneof subject_of {
    Event event = 82; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 83; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 84; // Data type: URL.
}
message GeoShape {
  // from GeoShape
  oneof address {
    PostalAddress postal_address = 1; // The mailing address.
    string text = 2; // Data type: Text.
  }
  oneof address_country {
    string text = 3; // Data type: Text.
    Country country = 4; // A country.
  }
  string box = 5; // Data type: Text.
  string circle = 6; // Data type: Text.
  oneof elevation {
    string text = 7; // Data type: Text.
    float32 number = 8; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  string line = 9; // Data type: Text.
  string polygon = 10; // Data type: Text.
  string postal_code = 11; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 12; // Data type: URL.
  string alternate_name = 13; // Data type: Text.
  string description = 14; // Data type: Text.
  string disambiguating_description = 15; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 16; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 17; // Data type: Text.
    string url = 18; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 19; // An image file.
    string url = 20; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 21; // Data type: URL.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 23; // Data type: Text.
  Action potential_action = 24; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 25; // Data type: URL.
  oneof subject_of {
    Event event = 26; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 27; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 28; // Data type: URL.
}
message PostalAddress {
  // from PostalAddress
  oneof address_country {
    string text = 1; // Data type: Text.
    Country country = 2; // A country.
  }
  string address_locality = 3; // Data type: Text.
  string address_region = 4; // Data type: Text.
  string post_office_box_number = 5; // Data type: Text.
  string postal_code = 6; // Data type: Text.
  string street_address = 7; // Data type: Text.
  // inherited from ContactPoint
  oneof area_served {
    string text = 8; // Data type: Text.
    GeoShape geo_shape = 9; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 10; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 11; // A geographical region, typically under the jurisdiction of a particular government.
  }
  oneof available_language {
    string text = 12; // Data type: Text.
    Language language = 13; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  ContactPointOption contact_option = 14; // Enumerated options related to a ContactPoint.
  string contact_type = 15; // Data type: Text.
  string email = 16; // Data type: Text.
  string fax_number = 17; // Data type: Text.
  OpeningHoursSpecification hours_available = 18; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof product_supported {
    string text = 19; // Data type: Text.
    Product product = 20; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  oneof service_area {
    GeoShape geo_shape = 21; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 22; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 23; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string telephone = 24; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 25; // Data type: URL.
  string alternate_name = 26; // Data type: Text.
  string description = 27; // Data type: Text.
  string disambiguating_description = 28; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 29; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 30; // Data type: Text.
    string url = 31; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 32; // An image file.
    string url = 33; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 34; // Data type: URL.
    CreativeWork creative_work = 35; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 36; // Data type: Text.
  Action potential_action = 37; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 38; // Data type: URL.
  oneof subject_of {
    Event event = 39; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 40; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 41; // Data type: URL.
}
message Country {
  // from Country
  // inherited from AdministrativeArea
  // inherited from Place
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  oneof address {
    PostalAddress postal_address = 2; // The mailing address.
    string text = 3; // Data type: Text.
  }
  AggregateRating aggregate_rating = 4; // The average rating based on multiple ratings or reviews.
  LocationFeatureSpecification amenity_feature = 5; // Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
  string branch_code = 6; // Data type: Text.
  Place contained_in = 7; // Entities that have a somewhat fixed, physical extension.
  Place contained_in_place = 8; // Entities that have a somewhat fixed, physical extension.
  Place contains_place = 9; // Entities that have a somewhat fixed, physical extension.
  Event event = 10; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 11; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 12; // Data type: Text.
  oneof geo {
    GeoCoordinates geo_coordinates = 13; // The geographic coordinates of a place or event.
    GeoShape geo_shape = 14; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
  }
  oneof geo_contains {
    Place place = 15; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 16; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_covered_by {
    GeospatialGeometry geospatial_geometry = 17; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 18; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_covers {
    Place place = 19; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 20; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_crosses {
    Place place = 21; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 22; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_disjoint {
    Place place = 23; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 24; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_equals {
    Place place = 25; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 26; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_intersects {
    GeospatialGeometry geospatial_geometry = 27; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 28; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_overlaps {
    Place place = 29; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 30; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_touches {
    Place place = 31; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 32; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_within {
    GeospatialGeometry geospatial_geometry = 33; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 34; // Entities that have a somewhat fixed, physical extension.
  }
  string global_location_number = 35; // Data type: Text.
  bool has_drive_through_service = 36; // Boolean: True or False.
  oneof has_map {
    Map map = 37; // A map.
    string url = 38; // Data type: URL.
  }
  bool is_accessible_for_free = 39; // Boolean: True or False.
  string isic_v_4 = 40; // Data type: Text.
  oneof latitude {
    string text = 41; // Data type: Text.
    float32 number = 42; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof logo {
    string url = 43; // Data type: URL.
    ImageObject image_object = 44; // An image file.
  }
  oneof longitude {
    float32 number = 45; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 46; // Data type: Text.
  }
  string map = 47; // Data type: URL.
  string maps = 48; // Data type: URL.
  float32 maximum_attendee_capacity = 49; // Data type: Integer.
  OpeningHoursSpecification opening_hours_specification = 50; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof photo {
    Photograph photograph = 51; // A photograph.
    ImageObject image_object = 52; // An image file.
  }
  oneof photos {
    ImageObject image_object = 53; // An image file.
    Photograph photograph = 54; // A photograph.
  }
  bool public_access = 55; // Boolean: True or False.
  Review review = 56; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 57; // A review of an item - for example, of a restaurant, movie, or store.
  string slogan = 58; // Data type: Text.
  bool smoking_allowed = 59; // Boolean: True or False.
  OpeningHoursSpecification special_opening_hours_specification = 60; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  string telephone = 61; // Data type: Text.
  string tour_booking_page = 62; // Data type: URL.
  // inherited from Thing
  string additional_type = 63; // Data type: URL.
  string alternate_name = 64; // Data type: Text.
  string description = 65; // Data type: Text.
  string disambiguating_description = 66; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 67; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 68; // Data type: Text.
    string url = 69; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 70; // An image file.
    string url = 71; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 72; // Data type: URL.
    CreativeWork creative_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 74; // Data type: Text.
  Action potential_action = 75; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 76; // Data type: URL.
  oneof subject_of {
    Event event = 77; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 79; // Data type: URL.
}
message Place {
  // from Place
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  oneof address {
    PostalAddress postal_address = 2; // The mailing address.
    string text = 3; // Data type: Text.
  }
  AggregateRating aggregate_rating = 4; // The average rating based on multiple ratings or reviews.
  LocationFeatureSpecification amenity_feature = 5; // Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
  string branch_code = 6; // Data type: Text.
  Place contained_in = 7; // Entities that have a somewhat fixed, physical extension.
  Place contained_in_place = 8; // Entities that have a somewhat fixed, physical extension.
  Place contains_place = 9; // Entities that have a somewhat fixed, physical extension.
  Event event = 10; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 11; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 12; // Data type: Text.
  oneof geo {
    GeoCoordinates geo_coordinates = 13; // The geographic coordinates of a place or event.
    GeoShape geo_shape = 14; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
  }
  oneof geo_contains {
    Place place = 15; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 16; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_covered_by {
    GeospatialGeometry geospatial_geometry = 17; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 18; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_covers {
    Place place = 19; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 20; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_crosses {
    Place place = 21; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 22; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_disjoint {
    Place place = 23; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 24; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_equals {
    Place place = 25; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 26; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_intersects {
    GeospatialGeometry geospatial_geometry = 27; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 28; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_overlaps {
    Place place = 29; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 30; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_touches {
    Place place = 31; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 32; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_within {
    GeospatialGeometry geospatial_geometry = 33; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 34; // Entities that have a somewhat fixed, physical extension.
  }
  string global_location_number = 35; // Data type: Text.
  bool has_drive_through_service = 36; // Boolean: True or False.
  oneof has_map {
    Map map = 37; // A map.
    string url = 38; // Data type: URL.
  }
  bool is_accessible_for_free = 39; // Boolean: True or False.
  string isic_v_4 = 40; // Data type: Text.
  oneof latitude {
    string text = 41; // Data type: Text.
    float32 number = 42; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof logo {
    string url = 43; // Data type: URL.
    ImageObject image_object = 44; // An image file.
  }
  oneof longitude {
    float32 number = 45; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 46; // Data type: Text.
  }
  string map = 47; // Data type: URL.
  string maps = 48; // Data type: URL.
  float32 maximum_attendee_capacity = 49; // Data type: Integer.
  OpeningHoursSpecification opening_hours_specification = 50; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof photo {
    Photograph photograph = 51; // A photograph.
    ImageObject image_object = 52; // An image file.
  }
  oneof photos {
    ImageObject image_object = 53; // An image file.
    Photograph photograph = 54; // A photograph.
  }
  bool public_access = 55; // Boolean: True or False.
  Review review = 56; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 57; // A review of an item - for example, of a restaurant, movie, or store.
  string slogan = 58; // Data type: Text.
  bool smoking_allowed = 59; // Boolean: True or False.
  OpeningHoursSpecification special_opening_hours_specification = 60; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  string telephone = 61; // Data type: Text.
  string tour_booking_page = 62; // Data type: URL.
  // inherited from Thing
  string additional_type = 63; // Data type: URL.
  string alternate_name = 64; // Data type: Text.
  string description = 65; // Data type: Text.
  string disambiguating_description = 66; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 67; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 68; // Data type: Text.
    string url = 69; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 70; // An image file.
    string url = 71; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 72; // Data type: URL.
    CreativeWork creative_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 74; // Data type: Text.
  Action potential_action = 75; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 76; // Data type: URL.
  oneof subject_of {
    Event event = 77; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 79; // Data type: URL.
}
message GeoCoordinates {
  // from GeoCoordinates
  oneof address {
    PostalAddress postal_address = 1; // The mailing address.
    string text = 2; // Data type: Text.
  }
  oneof address_country {
    string text = 3; // Data type: Text.
    Country country = 4; // A country.
  }
  oneof elevation {
    string text = 5; // Data type: Text.
    float32 number = 6; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof latitude {
    string text = 7; // Data type: Text.
    float32 number = 8; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof longitude {
    float32 number = 9; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 10; // Data type: Text.
  }
  string postal_code = 11; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 12; // Data type: URL.
  string alternate_name = 13; // Data type: Text.
  string description = 14; // Data type: Text.
  string disambiguating_description = 15; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 16; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 17; // Data type: Text.
    string url = 18; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 19; // An image file.
    string url = 20; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 21; // Data type: URL.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 23; // Data type: Text.
  Action potential_action = 24; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 25; // Data type: URL.
  oneof subject_of {
    Event event = 26; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 27; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 28; // Data type: URL.
}
message GeospatialGeometry {
  // from GeospatialGeometry
  oneof geo_contains {
    Place place = 1; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 2; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_covered_by {
    GeospatialGeometry geospatial_geometry = 3; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 4; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_covers {
    Place place = 5; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 6; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_crosses {
    Place place = 7; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 8; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_disjoint {
    Place place = 9; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 10; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_equals {
    Place place = 11; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 12; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_intersects {
    GeospatialGeometry geospatial_geometry = 13; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 14; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_overlaps {
    Place place = 15; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 16; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_touches {
    Place place = 17; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 18; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_within {
    GeospatialGeometry geospatial_geometry = 19; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 20; // Entities that have a somewhat fixed, physical extension.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 21; // Data type: URL.
  string alternate_name = 22; // Data type: Text.
  string description = 23; // Data type: Text.
  string disambiguating_description = 24; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 25; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 26; // Data type: Text.
    string url = 27; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 28; // An image file.
    string url = 29; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 30; // Data type: URL.
    CreativeWork creative_work = 31; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 32; // Data type: Text.
  Action potential_action = 33; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 34; // Data type: URL.
  oneof subject_of {
    Event event = 35; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 36; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 37; // Data type: URL.
}
message OpeningHoursSpecification {
  // from OpeningHoursSpecification
  string closes = 1; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  DayOfWeek day_of_week = 2; // The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.  Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.       
  string opens = 3; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string valid_from = 4; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 5; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 6; // Data type: URL.
  string alternate_name = 7; // Data type: Text.
  string description = 8; // Data type: Text.
  string disambiguating_description = 9; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 11; // Data type: Text.
    string url = 12; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 13; // An image file.
    string url = 14; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 15; // Data type: URL.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 17; // Data type: Text.
  Action potential_action = 18; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 19; // Data type: URL.
  oneof subject_of {
    Event event = 20; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 22; // Data type: URL.
}
message DayOfWeek {
  // from DayOfWeek
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Photograph {
  // from Photograph
  // inherited from CreativeWork
  oneof object_object {
    string text = 1; // Data type: Text.
    QuantitativeValue quantitative_value = 2; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 3; // The most generic type of item.
  string abstract = 4; // Data type: Text.
  string access_mode = 5; // Data type: Text.
  ItemList access_mode_sufficient = 6; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 7; // Data type: Text.
  string accessibility_control = 8; // Data type: Text.
  string accessibility_feature = 9; // Data type: Text.
  string accessibility_hazard = 10; // Data type: Text.
  string accessibility_summary = 11; // Data type: Text.
  Person accountable_person = 12; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 14; // Data type: URL.
  }
  AggregateRating aggregate_rating = 15; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 16; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 17; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 18; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 19; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 20; // Data type: Text.
  }
  MediaObject associated_media = 21; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 22; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 23; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 24; // An audio file.
    MusicRecording music_recording = 25; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 26; // A person (alive, dead, undead, or fictional).
    Organization organization = 27; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 28; // Data type: Text.
  string awards = 29; // Data type: Text.
  Person character = 30; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 31; // Data type: Text.
    CreativeWork creative_work = 32; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 33; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 34; // Data type: Integer.
  string conditions_of_access = 35; // Data type: Text.
  Place content_location = 36; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 37; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 38; // Data type: Text.
  }
  string content_reference_time = 39; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 40; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 41; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 44; // Data type: Text.
  float32 copyright_year = 45; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 46; // A [[comment]] that corrects [[CreativeWork]].
    string text = 47; // Data type: Text.
    string url = 48; // Data type: URL.
  }
  Country country_of_origin = 49; // A country.
  oneof creative_work_status {
    string text = 50; // Data type: Text.
    DefinedTerm defined_term = 51; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 52; // A person (alive, dead, undead, or fictional).
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 54; // Data type: Text.
  string date_created = 55; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 56; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 57; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 58; // Data type: URL.
  string edit_eidr = 59; // Data type: Text.
  Person editor = 60; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 61; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 62; // Data type: URL.
    string text = 63; // Data type: Text.
    DefinedTerm defined_term = 64; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 65; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 66; // Data type: Text.
  }
  MediaObject encoding = 67; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 68; // Data type: Text.
  MediaObject encodings = 69; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 70; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 71; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 72; // Data type: URL.
  oneof funder {
    Organization organization = 73; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 74; // A person (alive, dead, undead, or fictional).
  }
  string genre = 75; // Data type: URL.
  CreativeWork has_part = 76; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 77; // Data type: Text.
  oneof in_language {
    string text = 78; // Data type: Text.
    Language language = 79; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 80; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 81; // Data type: Text.
  Claim interpreted_as_claim = 82; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 83; // Boolean: True or False.
  oneof is_based_on {
    string url = 84; // Data type: URL.
    Product product = 85; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 86; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 88; // Data type: URL.
    Product product = 89; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 90; // Boolean: True or False.
  oneof is_part_of {
    string url = 91; // Data type: URL.
    CreativeWork creative_work = 92; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 93; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 94; // Data type: URL.
    string text = 95; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 96; // Data type: Text.
    DefinedTerm defined_term = 97; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 98; // Data type: URL.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 100; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 101; // The most generic type of item.
  oneof maintainer {
    Person person = 102; // A person (alive, dead, undead, or fictional).
    Organization organization = 103; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 104; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 105; // Data type: URL.
    string text = 106; // Data type: Text.
  }
  Thing mentions = 107; // The most generic type of item.
  oneof offers {
    Demand demand = 108; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 109; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 110; // Data type: Text.
    DefinedTerm defined_term = 111; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 112; // Data type: Text.
    float32 integer = 113; // Data type: Integer.
  }
  oneof producer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 117; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 118; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 119; // A person (alive, dead, undead, or fictional).
    Organization organization = 120; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 121; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 122; // Data type: URL.
    CreativeWork creative_work = 123; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 124; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 125; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 126; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 127; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 128; // Data type: Text.
  string sd_date_published = 129; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 130; // Data type: URL.
    CreativeWork creative_work = 131; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 133; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 134; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 135; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 136; // Data type: Text.
    QuantitativeValue quantitative_value = 137; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 138; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 139; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 140; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 142; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 143; // Data type: Text.
    DefinedTerm defined_term = 144; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 145; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 146; // Data type: Text.
  string text = 147; // Data type: Text.
  string thumbnail_url = 148; // Data type: URL.
  Duration time_required = 149; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 150; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 151; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 152; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 153; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 154; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 155; // Data type: URL.
  }
  oneof version {
    string text = 156; // Data type: Text.
    float32 number = 157; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 158; // A video file.
    Clip clip = 159; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 160; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 162; // Data type: URL.
  string alternate_name = 163; // Data type: Text.
  string description = 164; // Data type: Text.
  string disambiguating_description = 165; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 166; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 167; // Data type: Text.
    string url = 168; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 169; // An image file.
    string url = 170; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 171; // Data type: URL.
    CreativeWork creative_work = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 173; // Data type: Text.
  Action potential_action = 174; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 175; // Data type: URL.
  oneof subject_of {
    Event event = 176; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 177; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 178; // Data type: URL.
}
message ImageObject {
  // from ImageObject
  oneof caption {
    MediaObject media_object = 1; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
    string text = 2; // Data type: Text.
  }
  string embedded_text_caption = 3; // Data type: Text.
  oneof exif_data {
    PropertyValue property_value = 4; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 5; // Data type: Text.
  }
  bool representative_of_page = 6; // Boolean: True or False.
  ImageObject thumbnail = 7; // An image file.
  // inherited from MediaObject
  NewsArticle associated_article = 8; // A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.  A more detailed overview of [schema.org News markup](/docs/news.html) is also available. 
  string bitrate = 9; // Data type: Text.
  string content_size = 10; // Data type: Text.
  string content_url = 11; // Data type: URL.
  Duration duration = 12; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string embed_url = 13; // Data type: URL.
  CreativeWork encodes_creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string encoding_format = 15; // Data type: Text.
  string end_time = 16; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof height {
    QuantitativeValue quantitative_value = 17; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 18; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  oneof ineligible_region {
    Place place = 19; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 20; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 21; // Data type: Text.
  }
  Claim interpreted_as_claim = 22; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  string player_type = 23; // Data type: Text.
  Organization production_company = 24; // An organization such as a school, NGO, corporation, club, etc.
  Place regions_allowed = 25; // Entities that have a somewhat fixed, physical extension.
  oneof requires_subscription {
    bool boolean = 26; // Boolean: True or False.
    MediaSubscription media_subscription = 27; // A subscription which allows a user to access media including audio, video, books, etc.
  }
  string sha_256 = 28; // Data type: Text.
  string start_time = 29; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string upload_date = 30; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof width {
    Distance distance = 31; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 32; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from CreativeWork
  oneof object_object {
    string text = 33; // Data type: Text.
    QuantitativeValue quantitative_value = 34; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 35; // The most generic type of item.
  string abstract = 36; // Data type: Text.
  string access_mode = 37; // Data type: Text.
  ItemList access_mode_sufficient = 38; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 39; // Data type: Text.
  string accessibility_control = 40; // Data type: Text.
  string accessibility_feature = 41; // Data type: Text.
  string accessibility_hazard = 42; // Data type: Text.
  string accessibility_summary = 43; // Data type: Text.
  Person accountable_person = 44; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 45; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 46; // Data type: URL.
  }
  AggregateRating aggregate_rating = 47; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 48; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 49; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 50; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 51; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 52; // Data type: Text.
  }
  MediaObject associated_media = 53; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 54; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 55; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 56; // An audio file.
    MusicRecording music_recording = 57; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 58; // A person (alive, dead, undead, or fictional).
    Organization organization = 59; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 60; // Data type: Text.
  string awards = 61; // Data type: Text.
  Person character = 62; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 63; // Data type: Text.
    CreativeWork creative_work = 64; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 65; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 66; // Data type: Integer.
  string conditions_of_access = 67; // Data type: Text.
  Place content_location = 68; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 69; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 70; // Data type: Text.
  }
  string content_reference_time = 71; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 72; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 73; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 74; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 75; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 76; // Data type: Text.
  float32 copyright_year = 77; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 78; // A [[comment]] that corrects [[CreativeWork]].
    string text = 79; // Data type: Text.
    string url = 80; // Data type: URL.
  }
  Country country_of_origin = 81; // A country.
  oneof creative_work_status {
    string text = 82; // Data type: Text.
    DefinedTerm defined_term = 83; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 84; // A person (alive, dead, undead, or fictional).
    Organization organization = 85; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 86; // Data type: Text.
  string date_created = 87; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 88; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 89; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 90; // Data type: URL.
  string edit_eidr = 91; // Data type: Text.
  Person editor = 92; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 93; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 94; // Data type: URL.
    string text = 95; // Data type: Text.
    DefinedTerm defined_term = 96; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 97; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 98; // Data type: Text.
  }
  MediaObject encoding = 99; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 100; // Data type: Text.
  MediaObject encodings = 101; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 103; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 104; // Data type: URL.
  oneof funder {
    Organization organization = 105; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 106; // A person (alive, dead, undead, or fictional).
  }
  string genre = 107; // Data type: URL.
  CreativeWork has_part = 108; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 109; // Data type: Text.
  oneof in_language {
    string text = 110; // Data type: Text.
    Language language = 111; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 112; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 113; // Data type: Text.
  Claim interpreted_as_claim = 114; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 115; // Boolean: True or False.
  oneof is_based_on {
    string url = 116; // Data type: URL.
    Product product = 117; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 118; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 119; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 120; // Data type: URL.
    Product product = 121; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 122; // Boolean: True or False.
  oneof is_part_of {
    string url = 123; // Data type: URL.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 125; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 126; // Data type: URL.
    string text = 127; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 128; // Data type: Text.
    DefinedTerm defined_term = 129; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 130; // Data type: URL.
    CreativeWork creative_work = 131; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 132; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 133; // The most generic type of item.
  oneof maintainer {
    Person person = 134; // A person (alive, dead, undead, or fictional).
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 136; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 137; // Data type: URL.
    string text = 138; // Data type: Text.
  }
  Thing mentions = 139; // The most generic type of item.
  oneof offers {
    Demand demand = 140; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 141; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 142; // Data type: Text.
    DefinedTerm defined_term = 143; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 144; // Data type: Text.
    float32 integer = 145; // Data type: Integer.
  }
  oneof producer {
    Person person = 146; // A person (alive, dead, undead, or fictional).
    Organization organization = 147; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 148; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 149; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 150; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 151; // A person (alive, dead, undead, or fictional).
    Organization organization = 152; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 153; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 154; // Data type: URL.
    CreativeWork creative_work = 155; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 156; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 157; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 158; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 159; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 160; // Data type: Text.
  string sd_date_published = 161; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 162; // Data type: URL.
    CreativeWork creative_work = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 164; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 165; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 166; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 167; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 168; // Data type: Text.
    QuantitativeValue quantitative_value = 169; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 170; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 171; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 172; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 173; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 174; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 175; // Data type: Text.
    DefinedTerm defined_term = 176; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 177; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 178; // Data type: Text.
  string text = 179; // Data type: Text.
  string thumbnail_url = 180; // Data type: URL.
  Duration time_required = 181; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 182; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 183; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 184; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 185; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 186; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 187; // Data type: URL.
  }
  oneof version {
    string text = 188; // Data type: Text.
    float32 number = 189; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 190; // A video file.
    Clip clip = 191; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 192; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 193; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 194; // Data type: URL.
  string alternate_name = 195; // Data type: Text.
  string description = 196; // Data type: Text.
  string disambiguating_description = 197; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 198; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 199; // Data type: Text.
    string url = 200; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 201; // An image file.
    string url = 202; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 203; // Data type: URL.
    CreativeWork creative_work = 204; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 205; // Data type: Text.
  Action potential_action = 206; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 207; // Data type: URL.
  oneof subject_of {
    Event event = 208; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 209; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 210; // Data type: URL.
}
message MediaObject {
  // from MediaObject
  NewsArticle associated_article = 1; // A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.  A more detailed overview of [schema.org News markup](/docs/news.html) is also available. 
  string bitrate = 2; // Data type: Text.
  string content_size = 3; // Data type: Text.
  string content_url = 4; // Data type: URL.
  Duration duration = 5; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string embed_url = 6; // Data type: URL.
  CreativeWork encodes_creative_work = 7; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string encoding_format = 8; // Data type: Text.
  string end_time = 9; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof height {
    QuantitativeValue quantitative_value = 10; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 11; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  oneof ineligible_region {
    Place place = 12; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 13; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 14; // Data type: Text.
  }
  Claim interpreted_as_claim = 15; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  string player_type = 16; // Data type: Text.
  Organization production_company = 17; // An organization such as a school, NGO, corporation, club, etc.
  Place regions_allowed = 18; // Entities that have a somewhat fixed, physical extension.
  oneof requires_subscription {
    bool boolean = 19; // Boolean: True or False.
    MediaSubscription media_subscription = 20; // A subscription which allows a user to access media including audio, video, books, etc.
  }
  string sha_256 = 21; // Data type: Text.
  string start_time = 22; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string upload_date = 23; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof width {
    Distance distance = 24; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 25; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from CreativeWork
  oneof object_object {
    string text = 26; // Data type: Text.
    QuantitativeValue quantitative_value = 27; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 28; // The most generic type of item.
  string abstract = 29; // Data type: Text.
  string access_mode = 30; // Data type: Text.
  ItemList access_mode_sufficient = 31; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 32; // Data type: Text.
  string accessibility_control = 33; // Data type: Text.
  string accessibility_feature = 34; // Data type: Text.
  string accessibility_hazard = 35; // Data type: Text.
  string accessibility_summary = 36; // Data type: Text.
  Person accountable_person = 37; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 38; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 39; // Data type: URL.
  }
  AggregateRating aggregate_rating = 40; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 41; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 42; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 43; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 44; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 45; // Data type: Text.
  }
  MediaObject associated_media = 46; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 47; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 48; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 49; // An audio file.
    MusicRecording music_recording = 50; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 51; // A person (alive, dead, undead, or fictional).
    Organization organization = 52; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 53; // Data type: Text.
  string awards = 54; // Data type: Text.
  Person character = 55; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 56; // Data type: Text.
    CreativeWork creative_work = 57; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 58; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 59; // Data type: Integer.
  string conditions_of_access = 60; // Data type: Text.
  Place content_location = 61; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 62; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 63; // Data type: Text.
  }
  string content_reference_time = 64; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 66; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 67; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 68; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 69; // Data type: Text.
  float32 copyright_year = 70; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 71; // A [[comment]] that corrects [[CreativeWork]].
    string text = 72; // Data type: Text.
    string url = 73; // Data type: URL.
  }
  Country country_of_origin = 74; // A country.
  oneof creative_work_status {
    string text = 75; // Data type: Text.
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 77; // A person (alive, dead, undead, or fictional).
    Organization organization = 78; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 79; // Data type: Text.
  string date_created = 80; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 81; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 82; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 83; // Data type: URL.
  string edit_eidr = 84; // Data type: Text.
  Person editor = 85; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 86; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 87; // Data type: URL.
    string text = 88; // Data type: Text.
    DefinedTerm defined_term = 89; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 90; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 91; // Data type: Text.
  }
  MediaObject encoding = 92; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 93; // Data type: Text.
  MediaObject encodings = 94; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 96; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 97; // Data type: URL.
  oneof funder {
    Organization organization = 98; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 99; // A person (alive, dead, undead, or fictional).
  }
  string genre = 100; // Data type: URL.
  CreativeWork has_part = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 102; // Data type: Text.
  oneof in_language {
    string text = 103; // Data type: Text.
    Language language = 104; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 105; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 106; // Data type: Text.
  Claim interpreted_as_claim = 107; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 108; // Boolean: True or False.
  oneof is_based_on {
    string url = 109; // Data type: URL.
    Product product = 110; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 112; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 113; // Data type: URL.
    Product product = 114; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 115; // Boolean: True or False.
  oneof is_part_of {
    string url = 116; // Data type: URL.
    CreativeWork creative_work = 117; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 118; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 119; // Data type: URL.
    string text = 120; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 121; // Data type: Text.
    DefinedTerm defined_term = 122; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 123; // Data type: URL.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 125; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 126; // The most generic type of item.
  oneof maintainer {
    Person person = 127; // A person (alive, dead, undead, or fictional).
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 129; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 130; // Data type: URL.
    string text = 131; // Data type: Text.
  }
  Thing mentions = 132; // The most generic type of item.
  oneof offers {
    Demand demand = 133; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 134; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 135; // Data type: Text.
    DefinedTerm defined_term = 136; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 137; // Data type: Text.
    float32 integer = 138; // Data type: Integer.
  }
  oneof producer {
    Person person = 139; // A person (alive, dead, undead, or fictional).
    Organization organization = 140; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 142; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 143; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 144; // A person (alive, dead, undead, or fictional).
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 146; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 147; // Data type: URL.
    CreativeWork creative_work = 148; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 149; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 150; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 151; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 152; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 153; // Data type: Text.
  string sd_date_published = 154; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 155; // Data type: URL.
    CreativeWork creative_work = 156; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 157; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 158; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 159; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 160; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 161; // Data type: Text.
    QuantitativeValue quantitative_value = 162; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 163; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 164; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 165; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 166; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 167; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 168; // Data type: Text.
    DefinedTerm defined_term = 169; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 170; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 171; // Data type: Text.
  string text = 172; // Data type: Text.
  string thumbnail_url = 173; // Data type: URL.
  Duration time_required = 174; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 176; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 177; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 178; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 180; // Data type: URL.
  }
  oneof version {
    string text = 181; // Data type: Text.
    float32 number = 182; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 183; // A video file.
    Clip clip = 184; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 185; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 186; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 187; // Data type: URL.
  string alternate_name = 188; // Data type: Text.
  string description = 189; // Data type: Text.
  string disambiguating_description = 190; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 191; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 192; // Data type: Text.
    string url = 193; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 194; // An image file.
    string url = 195; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 196; // Data type: URL.
    CreativeWork creative_work = 197; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 198; // Data type: Text.
  Action potential_action = 199; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 200; // Data type: URL.
  oneof subject_of {
    Event event = 201; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 202; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 203; // Data type: URL.
}
message Duration {
  // from Duration
  // inherited from Quantity
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message Organization {
  // from Organization
  oneof actionable_feedback_policy {
    CreativeWork creative_work = 1; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 2; // Data type: URL.
  }
  oneof address {
    PostalAddress postal_address = 3; // The mailing address.
    string text = 4; // Data type: Text.
  }
  AggregateRating aggregate_rating = 5; // The average rating based on multiple ratings or reviews.
  Person alumni = 6; // A person (alive, dead, undead, or fictional).
  oneof area_served {
    string text = 7; // Data type: Text.
    GeoShape geo_shape = 8; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 9; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 10; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string award = 11; // Data type: Text.
  string awards = 12; // Data type: Text.
  oneof brand {
    Organization organization = 13; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 14; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  ContactPoint contact_point = 15; // A contact point&#x2014;for example, a Customer Complaints department.
  ContactPoint contact_points = 16; // A contact point&#x2014;for example, a Customer Complaints department.
  oneof corrections_policy {
    string url = 17; // Data type: URL.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Organization department = 19; // An organization such as a school, NGO, corporation, club, etc.
  string dissolution_date = 20; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof diversity_policy {
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 22; // Data type: URL.
  }
  oneof diversity_staffing_report {
    string url = 23; // Data type: URL.
    Article article = 24; // An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
  }
  string duns = 25; // Data type: Text.
  string email = 26; // Data type: Text.
  Person employee = 27; // A person (alive, dead, undead, or fictional).
  Person employees = 28; // A person (alive, dead, undead, or fictional).
  oneof ethics_policy {
    CreativeWork creative_work = 29; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 30; // Data type: URL.
  }
  Event event = 31; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 32; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 33; // Data type: Text.
  Person founder = 34; // A person (alive, dead, undead, or fictional).
  Person founders = 35; // A person (alive, dead, undead, or fictional).
  string founding_date = 36; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Place founding_location = 37; // Entities that have a somewhat fixed, physical extension.
  oneof funder {
    Organization organization = 38; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 39; // A person (alive, dead, undead, or fictional).
  }
  string global_location_number = 40; // Data type: Text.
  EducationalOccupationalCredential has_credential = 41; // An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  MerchantReturnPolicy has_merchant_return_policy = 42; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  OfferCatalog has_offer_catalog = 43; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  Place has_pos = 44; // Entities that have a somewhat fixed, physical extension.
  InteractionCounter interaction_statistic = 45; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string isic_v_4 = 46; // Data type: Text.
  oneof knows_about {
    string url = 47; // Data type: URL.
    string text = 48; // Data type: Text.
    Thing thing = 49; // The most generic type of item.
  }
  oneof knows_language {
    Language language = 50; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
    string text = 51; // Data type: Text.
  }
  string legal_name = 52; // Data type: Text.
  string lei_code = 53; // Data type: Text.
  oneof location {
    PostalAddress postal_address = 54; // The mailing address.
    string text = 55; // Data type: Text.
    Place place = 56; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 57; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  oneof logo {
    string url = 58; // Data type: URL.
    ImageObject image_object = 59; // An image file.
  }
  Offer makes_offer = 60; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  oneof member {
    Organization organization = 61; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 62; // A person (alive, dead, undead, or fictional).
  }
  oneof member_of {
    ProgramMembership program_membership = 63; // Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
    Organization organization = 64; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof members {
    Person person = 65; // A person (alive, dead, undead, or fictional).
    Organization organization = 66; // An organization such as a school, NGO, corporation, club, etc.
  }
  string naics = 67; // Data type: Text.
  NonprofitType nonprofit_status = 68; // NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
  QuantitativeValue number_of_employees = 69; //  A point value or interval for product characteristics and other purposes.
  oneof ownership_funding_info {
    AboutPage about_page = 70; // Web page type: About page.
    string url = 71; // Data type: URL.
    string text = 72; // Data type: Text.
    CreativeWork creative_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof owns {
    Product product = 74; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    OwnershipInfo ownership_info = 75; // A structured value providing information about when a certain organization or person owned a certain product.
  }
  Organization parent_organization = 76; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 77; // Data type: URL.
    CreativeWork creative_work = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Review review = 79; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 80; // A review of an item - for example, of a restaurant, movie, or store.
  Demand seeks = 81; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
  oneof service_area {
    GeoShape geo_shape = 82; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 83; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 84; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string slogan = 85; // Data type: Text.
  oneof sponsor {
    Organization organization = 86; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 87; // A person (alive, dead, undead, or fictional).
  }
  Organization sub_organization = 88; // An organization such as a school, NGO, corporation, club, etc.
  string tax_id = 89; // Data type: Text.
  string telephone = 90; // Data type: Text.
  oneof unnamed_sources_policy {
    string url = 91; // Data type: URL.
    CreativeWork creative_work = 92; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string vat_id = 93; // Data type: Text.
  // inherited from Thing
  string additional_type = 94; // Data type: URL.
  string alternate_name = 95; // Data type: Text.
  string description = 96; // Data type: Text.
  string disambiguating_description = 97; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 98; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 99; // Data type: Text.
    string url = 100; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 101; // An image file.
    string url = 102; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 103; // Data type: URL.
    CreativeWork creative_work = 104; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 105; // Data type: Text.
  Action potential_action = 106; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 107; // Data type: URL.
  oneof subject_of {
    Event event = 108; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 109; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 110; // Data type: URL.
}
message ContactPoint {
  // from ContactPoint
  oneof area_served {
    string text = 1; // Data type: Text.
    GeoShape geo_shape = 2; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 3; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 4; // A geographical region, typically under the jurisdiction of a particular government.
  }
  oneof available_language {
    string text = 5; // Data type: Text.
    Language language = 6; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  ContactPointOption contact_option = 7; // Enumerated options related to a ContactPoint.
  string contact_type = 8; // Data type: Text.
  string email = 9; // Data type: Text.
  string fax_number = 10; // Data type: Text.
  OpeningHoursSpecification hours_available = 11; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof product_supported {
    string text = 12; // Data type: Text.
    Product product = 13; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  oneof service_area {
    GeoShape geo_shape = 14; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 15; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 16; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string telephone = 17; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 18; // Data type: URL.
  string alternate_name = 19; // Data type: Text.
  string description = 20; // Data type: Text.
  string disambiguating_description = 21; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 22; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 23; // Data type: Text.
    string url = 24; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 25; // An image file.
    string url = 26; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 27; // Data type: URL.
    CreativeWork creative_work = 28; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 29; // Data type: Text.
  Action potential_action = 30; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 31; // Data type: URL.
  oneof subject_of {
    Event event = 32; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 33; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 34; // Data type: URL.
}
message AdministrativeArea {
  // from AdministrativeArea
  // inherited from Place
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  oneof address {
    PostalAddress postal_address = 2; // The mailing address.
    string text = 3; // Data type: Text.
  }
  AggregateRating aggregate_rating = 4; // The average rating based on multiple ratings or reviews.
  LocationFeatureSpecification amenity_feature = 5; // Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
  string branch_code = 6; // Data type: Text.
  Place contained_in = 7; // Entities that have a somewhat fixed, physical extension.
  Place contained_in_place = 8; // Entities that have a somewhat fixed, physical extension.
  Place contains_place = 9; // Entities that have a somewhat fixed, physical extension.
  Event event = 10; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 11; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 12; // Data type: Text.
  oneof geo {
    GeoCoordinates geo_coordinates = 13; // The geographic coordinates of a place or event.
    GeoShape geo_shape = 14; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
  }
  oneof geo_contains {
    Place place = 15; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 16; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_covered_by {
    GeospatialGeometry geospatial_geometry = 17; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 18; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_covers {
    Place place = 19; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 20; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_crosses {
    Place place = 21; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 22; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_disjoint {
    Place place = 23; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 24; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_equals {
    Place place = 25; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 26; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_intersects {
    GeospatialGeometry geospatial_geometry = 27; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 28; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_overlaps {
    Place place = 29; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 30; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_touches {
    Place place = 31; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 32; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_within {
    GeospatialGeometry geospatial_geometry = 33; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 34; // Entities that have a somewhat fixed, physical extension.
  }
  string global_location_number = 35; // Data type: Text.
  bool has_drive_through_service = 36; // Boolean: True or False.
  oneof has_map {
    Map map = 37; // A map.
    string url = 38; // Data type: URL.
  }
  bool is_accessible_for_free = 39; // Boolean: True or False.
  string isic_v_4 = 40; // Data type: Text.
  oneof latitude {
    string text = 41; // Data type: Text.
    float32 number = 42; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof logo {
    string url = 43; // Data type: URL.
    ImageObject image_object = 44; // An image file.
  }
  oneof longitude {
    float32 number = 45; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 46; // Data type: Text.
  }
  string map = 47; // Data type: URL.
  string maps = 48; // Data type: URL.
  float32 maximum_attendee_capacity = 49; // Data type: Integer.
  OpeningHoursSpecification opening_hours_specification = 50; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof photo {
    Photograph photograph = 51; // A photograph.
    ImageObject image_object = 52; // An image file.
  }
  oneof photos {
    ImageObject image_object = 53; // An image file.
    Photograph photograph = 54; // A photograph.
  }
  bool public_access = 55; // Boolean: True or False.
  Review review = 56; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 57; // A review of an item - for example, of a restaurant, movie, or store.
  string slogan = 58; // Data type: Text.
  bool smoking_allowed = 59; // Boolean: True or False.
  OpeningHoursSpecification special_opening_hours_specification = 60; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  string telephone = 61; // Data type: Text.
  string tour_booking_page = 62; // Data type: URL.
  // inherited from Thing
  string additional_type = 63; // Data type: URL.
  string alternate_name = 64; // Data type: Text.
  string description = 65; // Data type: Text.
  string disambiguating_description = 66; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 67; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 68; // Data type: Text.
    string url = 69; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 70; // An image file.
    string url = 71; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 72; // Data type: URL.
    CreativeWork creative_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 74; // Data type: Text.
  Action potential_action = 75; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 76; // Data type: URL.
  oneof subject_of {
    Event event = 77; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 79; // Data type: URL.
}
message Language {
  // from Language
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message ContactPointOption {
  // from ContactPointOption
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Product {
  // from Product
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  AggregateRating aggregate_rating = 2; // The average rating based on multiple ratings or reviews.
  Audience audience = 3; // Intended audience for an item, i.e. the group for whom the item was created.
  string award = 4; // Data type: Text.
  string awards = 5; // Data type: Text.
  oneof brand {
    Organization organization = 6; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 7; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof category {
    string text = 8; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 9; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 10; // The most generic type of item.
    string url = 11; // Data type: URL.
  }
  string color = 12; // Data type: Text.
  string country_of_assembly = 13; // Data type: Text.
  string country_of_last_processing = 14; // Data type: Text.
  Country country_of_origin = 15; // A country.
  oneof depth {
    Distance distance = 16; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 17; //  A point value or interval for product characteristics and other purposes.
  }
  string gtin = 18; // Data type: Text.
  string gtin_12 = 19; // Data type: Text.
  string gtin_13 = 20; // Data type: Text.
  string gtin_14 = 21; // Data type: Text.
  string gtin_8 = 22; // Data type: Text.
  EnergyConsumptionDetails has_energy_consumption_details = 23; // EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
  QuantitativeValue has_measurement = 24; //  A point value or interval for product characteristics and other purposes.
  MerchantReturnPolicy has_merchant_return_policy = 25; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  oneof height {
    QuantitativeValue quantitative_value = 26; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 27; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  string in_product_group_with_id = 28; // Data type: Text.
  Product is_accessory_or_spare_part_for = 29; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  Product is_consumable_for = 30; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  oneof is_related_to {
    Product product = 31; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 32; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 33; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 34; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_variant_of {
    ProductModel product_model = 35; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
    ProductGroup product_group = 36; // A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.  While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]]. 
  }
  OfferItemCondition item_condition = 37; // A list of possible conditions for the item.
  oneof logo {
    string url = 38; // Data type: URL.
    ImageObject image_object = 39; // An image file.
  }
  Organization manufacturer = 40; // An organization such as a school, NGO, corporation, club, etc.
  oneof material {
    Product product = 41; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 42; // Data type: URL.
    string text = 43; // Data type: Text.
  }
  oneof model {
    string text = 44; // Data type: Text.
    ProductModel product_model = 45; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
  }
  string mpn = 46; // Data type: Text.
  string nsn = 47; // Data type: Text.
  oneof offers {
    Demand demand = 48; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 49; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 50; // Data type: Text.
    DefinedTerm defined_term = 51; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string product_id = 52; // Data type: Text.
  string production_date = 53; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string purchase_date = 54; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string release_date = 55; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Review review = 56; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 57; // A review of an item - for example, of a restaurant, movie, or store.
  oneof size {
    SizeSpecification size_specification = 58; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 59; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 60; // Data type: Text.
    QuantitativeValue quantitative_value = 61; //  A point value or interval for product characteristics and other purposes.
  }
  string sku = 62; // Data type: Text.
  string slogan = 63; // Data type: Text.
  QuantitativeValue weight = 64; //  A point value or interval for product characteristics and other purposes.
  oneof width {
    Distance distance = 65; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 66; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from Thing
  string additional_type = 67; // Data type: URL.
  string alternate_name = 68; // Data type: Text.
  string description = 69; // Data type: Text.
  string disambiguating_description = 70; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 71; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 72; // Data type: Text.
    string url = 73; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 74; // An image file.
    string url = 75; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 76; // Data type: URL.
    CreativeWork creative_work = 77; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 78; // Data type: Text.
  Action potential_action = 79; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 80; // Data type: URL.
  oneof subject_of {
    Event event = 81; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 82; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 83; // Data type: URL.
}
message ProductModel {
  // from ProductModel
  oneof is_variant_of {
    ProductModel product_model = 1; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
    ProductGroup product_group = 2; // A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.  While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]]. 
  }
  ProductModel predecessor_of = 3; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
  ProductModel successor_of = 4; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
  // inherited from Product
  PropertyValue additional_property = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  AggregateRating aggregate_rating = 6; // The average rating based on multiple ratings or reviews.
  Audience audience = 7; // Intended audience for an item, i.e. the group for whom the item was created.
  string award = 8; // Data type: Text.
  string awards = 9; // Data type: Text.
  oneof brand {
    Organization organization = 10; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 11; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof category {
    string text = 12; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 13; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 14; // The most generic type of item.
    string url = 15; // Data type: URL.
  }
  string color = 16; // Data type: Text.
  string country_of_assembly = 17; // Data type: Text.
  string country_of_last_processing = 18; // Data type: Text.
  Country country_of_origin = 19; // A country.
  oneof depth {
    Distance distance = 20; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 21; //  A point value or interval for product characteristics and other purposes.
  }
  string gtin = 22; // Data type: Text.
  string gtin_12 = 23; // Data type: Text.
  string gtin_13 = 24; // Data type: Text.
  string gtin_14 = 25; // Data type: Text.
  string gtin_8 = 26; // Data type: Text.
  EnergyConsumptionDetails has_energy_consumption_details = 27; // EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
  QuantitativeValue has_measurement = 28; //  A point value or interval for product characteristics and other purposes.
  MerchantReturnPolicy has_merchant_return_policy = 29; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  oneof height {
    QuantitativeValue quantitative_value = 30; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 31; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  string in_product_group_with_id = 32; // Data type: Text.
  Product is_accessory_or_spare_part_for = 33; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  Product is_consumable_for = 34; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  oneof is_related_to {
    Product product = 35; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 36; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 37; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 38; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_variant_of {
    ProductModel product_model = 39; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
    ProductGroup product_group = 40; // A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.  While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]]. 
  }
  OfferItemCondition item_condition = 41; // A list of possible conditions for the item.
  oneof logo {
    string url = 42; // Data type: URL.
    ImageObject image_object = 43; // An image file.
  }
  Organization manufacturer = 44; // An organization such as a school, NGO, corporation, club, etc.
  oneof material {
    Product product = 45; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 46; // Data type: URL.
    string text = 47; // Data type: Text.
  }
  oneof model {
    string text = 48; // Data type: Text.
    ProductModel product_model = 49; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
  }
  string mpn = 50; // Data type: Text.
  string nsn = 51; // Data type: Text.
  oneof offers {
    Demand demand = 52; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 53; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 54; // Data type: Text.
    DefinedTerm defined_term = 55; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string product_id = 56; // Data type: Text.
  string production_date = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string purchase_date = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string release_date = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Review review = 60; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 61; // A review of an item - for example, of a restaurant, movie, or store.
  oneof size {
    SizeSpecification size_specification = 62; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 63; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 64; // Data type: Text.
    QuantitativeValue quantitative_value = 65; //  A point value or interval for product characteristics and other purposes.
  }
  string sku = 66; // Data type: Text.
  string slogan = 67; // Data type: Text.
  QuantitativeValue weight = 68; //  A point value or interval for product characteristics and other purposes.
  oneof width {
    Distance distance = 69; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 70; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from Thing
  string additional_type = 71; // Data type: URL.
  string alternate_name = 72; // Data type: Text.
  string description = 73; // Data type: Text.
  string disambiguating_description = 74; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 75; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 76; // Data type: Text.
    string url = 77; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 78; // An image file.
    string url = 79; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 80; // Data type: URL.
    CreativeWork creative_work = 81; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 82; // Data type: Text.
  Action potential_action = 83; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 84; // Data type: URL.
  oneof subject_of {
    Event event = 85; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 86; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 87; // Data type: URL.
}
message ProductGroup {
  // from ProductGroup
  Product has_variant = 1; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  string product_group_id = 2; // Data type: Text.
  oneof varies_by {
    DefinedTerm defined_term = 3; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 4; // Data type: Text.
  }
  // inherited from Product
  PropertyValue additional_property = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  AggregateRating aggregate_rating = 6; // The average rating based on multiple ratings or reviews.
  Audience audience = 7; // Intended audience for an item, i.e. the group for whom the item was created.
  string award = 8; // Data type: Text.
  string awards = 9; // Data type: Text.
  oneof brand {
    Organization organization = 10; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 11; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof category {
    string text = 12; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 13; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 14; // The most generic type of item.
    string url = 15; // Data type: URL.
  }
  string color = 16; // Data type: Text.
  string country_of_assembly = 17; // Data type: Text.
  string country_of_last_processing = 18; // Data type: Text.
  Country country_of_origin = 19; // A country.
  oneof depth {
    Distance distance = 20; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 21; //  A point value or interval for product characteristics and other purposes.
  }
  string gtin = 22; // Data type: Text.
  string gtin_12 = 23; // Data type: Text.
  string gtin_13 = 24; // Data type: Text.
  string gtin_14 = 25; // Data type: Text.
  string gtin_8 = 26; // Data type: Text.
  EnergyConsumptionDetails has_energy_consumption_details = 27; // EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
  QuantitativeValue has_measurement = 28; //  A point value or interval for product characteristics and other purposes.
  MerchantReturnPolicy has_merchant_return_policy = 29; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  oneof height {
    QuantitativeValue quantitative_value = 30; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 31; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  string in_product_group_with_id = 32; // Data type: Text.
  Product is_accessory_or_spare_part_for = 33; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  Product is_consumable_for = 34; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  oneof is_related_to {
    Product product = 35; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 36; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 37; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 38; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_variant_of {
    ProductModel product_model = 39; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
    ProductGroup product_group = 40; // A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.  While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]]. 
  }
  OfferItemCondition item_condition = 41; // A list of possible conditions for the item.
  oneof logo {
    string url = 42; // Data type: URL.
    ImageObject image_object = 43; // An image file.
  }
  Organization manufacturer = 44; // An organization such as a school, NGO, corporation, club, etc.
  oneof material {
    Product product = 45; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 46; // Data type: URL.
    string text = 47; // Data type: Text.
  }
  oneof model {
    string text = 48; // Data type: Text.
    ProductModel product_model = 49; // A datasheet or vendor specification of a product (in the sense of a prototypical description).
  }
  string mpn = 50; // Data type: Text.
  string nsn = 51; // Data type: Text.
  oneof offers {
    Demand demand = 52; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 53; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 54; // Data type: Text.
    DefinedTerm defined_term = 55; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string product_id = 56; // Data type: Text.
  string production_date = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string purchase_date = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string release_date = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Review review = 60; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 61; // A review of an item - for example, of a restaurant, movie, or store.
  oneof size {
    SizeSpecification size_specification = 62; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 63; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 64; // Data type: Text.
    QuantitativeValue quantitative_value = 65; //  A point value or interval for product characteristics and other purposes.
  }
  string sku = 66; // Data type: Text.
  string slogan = 67; // Data type: Text.
  QuantitativeValue weight = 68; //  A point value or interval for product characteristics and other purposes.
  oneof width {
    Distance distance = 69; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 70; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from Thing
  string additional_type = 71; // Data type: URL.
  string alternate_name = 72; // Data type: Text.
  string description = 73; // Data type: Text.
  string disambiguating_description = 74; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 75; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 76; // Data type: Text.
    string url = 77; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 78; // An image file.
    string url = 79; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 80; // Data type: URL.
    CreativeWork creative_work = 81; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 82; // Data type: Text.
  Action potential_action = 83; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 84; // Data type: URL.
  oneof subject_of {
    Event event = 85; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 86; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 87; // Data type: URL.
}
message Distance {
  // from Distance
  // inherited from Quantity
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message AggregateRating {
  // from AggregateRating
  Thing item_reviewed = 1; // The most generic type of item.
  float32 rating_count = 2; // Data type: Integer.
  float32 review_count = 3; // Data type: Integer.
  // inherited from Rating
  oneof author {
    Person person = 4; // A person (alive, dead, undead, or fictional).
    Organization organization = 5; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof best_rating {
    float32 number = 6; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 7; // Data type: Text.
  }
  string rating_explanation = 8; // Data type: Text.
  oneof rating_value {
    float32 number = 9; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 10; // Data type: Text.
  }
  string review_aspect = 11; // Data type: Text.
  oneof worst_rating {
    float32 number = 12; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 13; // Data type: Text.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 14; // Data type: URL.
  string alternate_name = 15; // Data type: Text.
  string description = 16; // Data type: Text.
  string disambiguating_description = 17; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 18; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 19; // Data type: Text.
    string url = 20; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 21; // An image file.
    string url = 22; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 23; // Data type: URL.
    CreativeWork creative_work = 24; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 25; // Data type: Text.
  Action potential_action = 26; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 27; // Data type: URL.
  oneof subject_of {
    Event event = 28; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 29; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 30; // Data type: URL.
}
message Thing {
  // from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message CreativeWork {
  // from CreativeWork
  oneof object_object {
    string text = 1; // Data type: Text.
    QuantitativeValue quantitative_value = 2; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 3; // The most generic type of item.
  string abstract = 4; // Data type: Text.
  string access_mode = 5; // Data type: Text.
  ItemList access_mode_sufficient = 6; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 7; // Data type: Text.
  string accessibility_control = 8; // Data type: Text.
  string accessibility_feature = 9; // Data type: Text.
  string accessibility_hazard = 10; // Data type: Text.
  string accessibility_summary = 11; // Data type: Text.
  Person accountable_person = 12; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 14; // Data type: URL.
  }
  AggregateRating aggregate_rating = 15; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 16; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 17; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 18; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 19; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 20; // Data type: Text.
  }
  MediaObject associated_media = 21; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 22; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 23; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 24; // An audio file.
    MusicRecording music_recording = 25; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 26; // A person (alive, dead, undead, or fictional).
    Organization organization = 27; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 28; // Data type: Text.
  string awards = 29; // Data type: Text.
  Person character = 30; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 31; // Data type: Text.
    CreativeWork creative_work = 32; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 33; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 34; // Data type: Integer.
  string conditions_of_access = 35; // Data type: Text.
  Place content_location = 36; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 37; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 38; // Data type: Text.
  }
  string content_reference_time = 39; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 40; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 41; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 44; // Data type: Text.
  float32 copyright_year = 45; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 46; // A [[comment]] that corrects [[CreativeWork]].
    string text = 47; // Data type: Text.
    string url = 48; // Data type: URL.
  }
  Country country_of_origin = 49; // A country.
  oneof creative_work_status {
    string text = 50; // Data type: Text.
    DefinedTerm defined_term = 51; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 52; // A person (alive, dead, undead, or fictional).
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 54; // Data type: Text.
  string date_created = 55; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 56; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 57; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 58; // Data type: URL.
  string edit_eidr = 59; // Data type: Text.
  Person editor = 60; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 61; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 62; // Data type: URL.
    string text = 63; // Data type: Text.
    DefinedTerm defined_term = 64; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 65; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 66; // Data type: Text.
  }
  MediaObject encoding = 67; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 68; // Data type: Text.
  MediaObject encodings = 69; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 70; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 71; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 72; // Data type: URL.
  oneof funder {
    Organization organization = 73; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 74; // A person (alive, dead, undead, or fictional).
  }
  string genre = 75; // Data type: URL.
  CreativeWork has_part = 76; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 77; // Data type: Text.
  oneof in_language {
    string text = 78; // Data type: Text.
    Language language = 79; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 80; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 81; // Data type: Text.
  Claim interpreted_as_claim = 82; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 83; // Boolean: True or False.
  oneof is_based_on {
    string url = 84; // Data type: URL.
    Product product = 85; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 86; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 88; // Data type: URL.
    Product product = 89; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 90; // Boolean: True or False.
  oneof is_part_of {
    string url = 91; // Data type: URL.
    CreativeWork creative_work = 92; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 93; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 94; // Data type: URL.
    string text = 95; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 96; // Data type: Text.
    DefinedTerm defined_term = 97; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 98; // Data type: URL.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 100; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 101; // The most generic type of item.
  oneof maintainer {
    Person person = 102; // A person (alive, dead, undead, or fictional).
    Organization organization = 103; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 104; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 105; // Data type: URL.
    string text = 106; // Data type: Text.
  }
  Thing mentions = 107; // The most generic type of item.
  oneof offers {
    Demand demand = 108; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 109; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 110; // Data type: Text.
    DefinedTerm defined_term = 111; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 112; // Data type: Text.
    float32 integer = 113; // Data type: Integer.
  }
  oneof producer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 117; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 118; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 119; // A person (alive, dead, undead, or fictional).
    Organization organization = 120; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 121; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 122; // Data type: URL.
    CreativeWork creative_work = 123; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 124; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 125; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 126; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 127; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 128; // Data type: Text.
  string sd_date_published = 129; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 130; // Data type: URL.
    CreativeWork creative_work = 131; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 133; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 134; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 135; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 136; // Data type: Text.
    QuantitativeValue quantitative_value = 137; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 138; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 139; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 140; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 142; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 143; // Data type: Text.
    DefinedTerm defined_term = 144; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 145; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 146; // Data type: Text.
  string text = 147; // Data type: Text.
  string thumbnail_url = 148; // Data type: URL.
  Duration time_required = 149; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 150; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 151; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 152; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 153; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 154; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 155; // Data type: URL.
  }
  oneof version {
    string text = 156; // Data type: Text.
    float32 number = 157; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 158; // A video file.
    Clip clip = 159; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 160; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 162; // Data type: URL.
  string alternate_name = 163; // Data type: Text.
  string description = 164; // Data type: Text.
  string disambiguating_description = 165; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 166; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 167; // Data type: Text.
    string url = 168; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 169; // An image file.
    string url = 170; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 171; // Data type: URL.
    CreativeWork creative_work = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 173; // Data type: Text.
  Action potential_action = 174; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 175; // Data type: URL.
  oneof subject_of {
    Event event = 176; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 177; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 178; // Data type: URL.
}
message Person {
  // from Person
  string additional_name = 1; // Data type: Text.
  oneof address {
    PostalAddress postal_address = 2; // The mailing address.
    string text = 3; // Data type: Text.
  }
  Organization affiliation = 4; // An organization such as a school, NGO, corporation, club, etc.
  oneof alumni_of {
    Organization organization = 5; // An organization such as a school, NGO, corporation, club, etc.
    EducationalOrganization educational_organization = 6; // An educational organization.
  }
  string award = 7; // Data type: Text.
  string awards = 8; // Data type: Text.
  string birth_date = 9; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Place birth_place = 10; // Entities that have a somewhat fixed, physical extension.
  oneof brand {
    Organization organization = 11; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 12; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  string call_sign = 13; // Data type: Text.
  Person children = 14; // A person (alive, dead, undead, or fictional).
  oneof colleague {
    Person person = 15; // A person (alive, dead, undead, or fictional).
    string url = 16; // Data type: URL.
  }
  Person colleagues = 17; // A person (alive, dead, undead, or fictional).
  ContactPoint contact_point = 18; // A contact point&#x2014;for example, a Customer Complaints department.
  ContactPoint contact_points = 19; // A contact point&#x2014;for example, a Customer Complaints department.
  string death_date = 20; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Place death_place = 21; // Entities that have a somewhat fixed, physical extension.
  string duns = 22; // Data type: Text.
  string email = 23; // Data type: Text.
  string family_name = 24; // Data type: Text.
  string fax_number = 25; // Data type: Text.
  Person follows = 26; // A person (alive, dead, undead, or fictional).
  oneof funder {
    Organization organization = 27; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 28; // A person (alive, dead, undead, or fictional).
  }
  oneof gender {
    GenderType gender_type = 29; // An enumeration of genders.
    string text = 30; // Data type: Text.
  }
  string given_name = 31; // Data type: Text.
  string global_location_number = 32; // Data type: Text.
  EducationalOccupationalCredential has_credential = 33; // An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  Occupation has_occupation = 34; // A profession, may involve prolonged training and/or a formal qualification.
  OfferCatalog has_offer_catalog = 35; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  Place has_pos = 36; // Entities that have a somewhat fixed, physical extension.
  oneof height {
    QuantitativeValue quantitative_value = 37; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 38; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  oneof home_location {
    Place place = 39; // Entities that have a somewhat fixed, physical extension.
    ContactPoint contact_point = 40; // A contact point&#x2014;for example, a Customer Complaints department.
  }
  string honorific_prefix = 41; // Data type: Text.
  string honorific_suffix = 42; // Data type: Text.
  InteractionCounter interaction_statistic = 43; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string isic_v_4 = 44; // Data type: Text.
  oneof job_title {
    string text = 45; // Data type: Text.
    DefinedTerm defined_term = 46; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  Person knows = 47; // A person (alive, dead, undead, or fictional).
  oneof knows_about {
    string url = 48; // Data type: URL.
    string text = 49; // Data type: Text.
    Thing thing = 50; // The most generic type of item.
  }
  oneof knows_language {
    Language language = 51; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
    string text = 52; // Data type: Text.
  }
  Offer makes_offer = 53; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  oneof member_of {
    ProgramMembership program_membership = 54; // Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
  }
  string naics = 56; // Data type: Text.
  Country nationality = 57; // A country.
  oneof net_worth {
    MonetaryAmount monetary_amount = 58; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
    PriceSpecification price_specification = 59; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  }
  oneof owns {
    Product product = 60; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    OwnershipInfo ownership_info = 61; // A structured value providing information about when a certain organization or person owned a certain product.
  }
  Person parent = 62; // A person (alive, dead, undead, or fictional).
  Person parents = 63; // A person (alive, dead, undead, or fictional).
  Event performer_in = 64; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  oneof publishing_principles {
    string url = 65; // Data type: URL.
    CreativeWork creative_work = 66; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Person related_to = 67; // A person (alive, dead, undead, or fictional).
  Demand seeks = 68; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
  Person sibling = 69; // A person (alive, dead, undead, or fictional).
  Person siblings = 70; // A person (alive, dead, undead, or fictional).
  oneof sponsor {
    Organization organization = 71; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 72; // A person (alive, dead, undead, or fictional).
  }
  Person spouse = 73; // A person (alive, dead, undead, or fictional).
  string tax_id = 74; // Data type: Text.
  string telephone = 75; // Data type: Text.
  string vat_id = 76; // Data type: Text.
  QuantitativeValue weight = 77; //  A point value or interval for product characteristics and other purposes.
  oneof work_location {
    Place place = 78; // Entities that have a somewhat fixed, physical extension.
    ContactPoint contact_point = 79; // A contact point&#x2014;for example, a Customer Complaints department.
  }
  Organization works_for = 80; // An organization such as a school, NGO, corporation, club, etc.
  // inherited from Thing
  string additional_type = 81; // Data type: URL.
  string alternate_name = 82; // Data type: Text.
  string description = 83; // Data type: Text.
  string disambiguating_description = 84; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 85; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 86; // Data type: Text.
    string url = 87; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 88; // An image file.
    string url = 89; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 90; // Data type: URL.
    CreativeWork creative_work = 91; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 92; // Data type: Text.
  Action potential_action = 93; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 94; // Data type: URL.
  oneof subject_of {
    Event event = 95; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 96; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 97; // Data type: URL.
}
message EducationalOrganization {
  // from EducationalOrganization
  Person alumni = 1; // A person (alive, dead, undead, or fictional).
  // inherited from CivicStructure
  string opening_hours = 2; // Data type: Text.
  // inherited from Place
  PropertyValue additional_property = 3; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  oneof address {
    PostalAddress postal_address = 4; // The mailing address.
    string text = 5; // Data type: Text.
  }
  AggregateRating aggregate_rating = 6; // The average rating based on multiple ratings or reviews.
  LocationFeatureSpecification amenity_feature = 7; // Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
  string branch_code = 8; // Data type: Text.
  Place contained_in = 9; // Entities that have a somewhat fixed, physical extension.
  Place contained_in_place = 10; // Entities that have a somewhat fixed, physical extension.
  Place contains_place = 11; // Entities that have a somewhat fixed, physical extension.
  Event event = 12; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 13; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 14; // Data type: Text.
  oneof geo {
    GeoCoordinates geo_coordinates = 15; // The geographic coordinates of a place or event.
    GeoShape geo_shape = 16; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
  }
  oneof geo_contains {
    Place place = 17; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 18; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_covered_by {
    GeospatialGeometry geospatial_geometry = 19; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 20; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_covers {
    Place place = 21; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 22; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_crosses {
    Place place = 23; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 24; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_disjoint {
    Place place = 25; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 26; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_equals {
    Place place = 27; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 28; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_intersects {
    GeospatialGeometry geospatial_geometry = 29; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 30; // Entities that have a somewhat fixed, physical extension.
  }
  oneof geo_overlaps {
    Place place = 31; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 32; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_touches {
    Place place = 33; // Entities that have a somewhat fixed, physical extension.
    GeospatialGeometry geospatial_geometry = 34; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
  }
  oneof geo_within {
    GeospatialGeometry geospatial_geometry = 35; // (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
    Place place = 36; // Entities that have a somewhat fixed, physical extension.
  }
  string global_location_number = 37; // Data type: Text.
  bool has_drive_through_service = 38; // Boolean: True or False.
  oneof has_map {
    Map map = 39; // A map.
    string url = 40; // Data type: URL.
  }
  bool is_accessible_for_free = 41; // Boolean: True or False.
  string isic_v_4 = 42; // Data type: Text.
  oneof latitude {
    string text = 43; // Data type: Text.
    float32 number = 44; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof logo {
    string url = 45; // Data type: URL.
    ImageObject image_object = 46; // An image file.
  }
  oneof longitude {
    float32 number = 47; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 48; // Data type: Text.
  }
  string map = 49; // Data type: URL.
  string maps = 50; // Data type: URL.
  float32 maximum_attendee_capacity = 51; // Data type: Integer.
  OpeningHoursSpecification opening_hours_specification = 52; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof photo {
    Photograph photograph = 53; // A photograph.
    ImageObject image_object = 54; // An image file.
  }
  oneof photos {
    ImageObject image_object = 55; // An image file.
    Photograph photograph = 56; // A photograph.
  }
  bool public_access = 57; // Boolean: True or False.
  Review review = 58; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 59; // A review of an item - for example, of a restaurant, movie, or store.
  string slogan = 60; // Data type: Text.
  bool smoking_allowed = 61; // Boolean: True or False.
  OpeningHoursSpecification special_opening_hours_specification = 62; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  string telephone = 63; // Data type: Text.
  string tour_booking_page = 64; // Data type: URL.
  // inherited from Organization
  oneof actionable_feedback_policy {
    CreativeWork creative_work = 65; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 66; // Data type: URL.
  }
  oneof address {
    PostalAddress postal_address = 67; // The mailing address.
    string text = 68; // Data type: Text.
  }
  AggregateRating aggregate_rating = 69; // The average rating based on multiple ratings or reviews.
  Person alumni = 70; // A person (alive, dead, undead, or fictional).
  oneof area_served {
    string text = 71; // Data type: Text.
    GeoShape geo_shape = 72; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 73; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 74; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string award = 75; // Data type: Text.
  string awards = 76; // Data type: Text.
  oneof brand {
    Organization organization = 77; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 78; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  ContactPoint contact_point = 79; // A contact point&#x2014;for example, a Customer Complaints department.
  ContactPoint contact_points = 80; // A contact point&#x2014;for example, a Customer Complaints department.
  oneof corrections_policy {
    string url = 81; // Data type: URL.
    CreativeWork creative_work = 82; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Organization department = 83; // An organization such as a school, NGO, corporation, club, etc.
  string dissolution_date = 84; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof diversity_policy {
    CreativeWork creative_work = 85; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 86; // Data type: URL.
  }
  oneof diversity_staffing_report {
    string url = 87; // Data type: URL.
    Article article = 88; // An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
  }
  string duns = 89; // Data type: Text.
  string email = 90; // Data type: Text.
  Person employee = 91; // A person (alive, dead, undead, or fictional).
  Person employees = 92; // A person (alive, dead, undead, or fictional).
  oneof ethics_policy {
    CreativeWork creative_work = 93; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 94; // Data type: URL.
  }
  Event event = 95; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 96; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 97; // Data type: Text.
  Person founder = 98; // A person (alive, dead, undead, or fictional).
  Person founders = 99; // A person (alive, dead, undead, or fictional).
  string founding_date = 100; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Place founding_location = 101; // Entities that have a somewhat fixed, physical extension.
  oneof funder {
    Organization organization = 102; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 103; // A person (alive, dead, undead, or fictional).
  }
  string global_location_number = 104; // Data type: Text.
  EducationalOccupationalCredential has_credential = 105; // An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  MerchantReturnPolicy has_merchant_return_policy = 106; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  OfferCatalog has_offer_catalog = 107; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  Place has_pos = 108; // Entities that have a somewhat fixed, physical extension.
  InteractionCounter interaction_statistic = 109; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string isic_v_4 = 110; // Data type: Text.
  oneof knows_about {
    string url = 111; // Data type: URL.
    string text = 112; // Data type: Text.
    Thing thing = 113; // The most generic type of item.
  }
  oneof knows_language {
    Language language = 114; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
    string text = 115; // Data type: Text.
  }
  string legal_name = 116; // Data type: Text.
  string lei_code = 117; // Data type: Text.
  oneof location {
    PostalAddress postal_address = 118; // The mailing address.
    string text = 119; // Data type: Text.
    Place place = 120; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 121; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  oneof logo {
    string url = 122; // Data type: URL.
    ImageObject image_object = 123; // An image file.
  }
  Offer makes_offer = 124; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  oneof member {
    Organization organization = 125; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 126; // A person (alive, dead, undead, or fictional).
  }
  oneof member_of {
    ProgramMembership program_membership = 127; // Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof members {
    Person person = 129; // A person (alive, dead, undead, or fictional).
    Organization organization = 130; // An organization such as a school, NGO, corporation, club, etc.
  }
  string naics = 131; // Data type: Text.
  NonprofitType nonprofit_status = 132; // NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
  QuantitativeValue number_of_employees = 133; //  A point value or interval for product characteristics and other purposes.
  oneof ownership_funding_info {
    AboutPage about_page = 134; // Web page type: About page.
    string url = 135; // Data type: URL.
    string text = 136; // Data type: Text.
    CreativeWork creative_work = 137; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof owns {
    Product product = 138; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    OwnershipInfo ownership_info = 139; // A structured value providing information about when a certain organization or person owned a certain product.
  }
  Organization parent_organization = 140; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 141; // Data type: URL.
    CreativeWork creative_work = 142; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Review review = 143; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 144; // A review of an item - for example, of a restaurant, movie, or store.
  Demand seeks = 145; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
  oneof service_area {
    GeoShape geo_shape = 146; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 147; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 148; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string slogan = 149; // Data type: Text.
  oneof sponsor {
    Organization organization = 150; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 151; // A person (alive, dead, undead, or fictional).
  }
  Organization sub_organization = 152; // An organization such as a school, NGO, corporation, club, etc.
  string tax_id = 153; // Data type: Text.
  string telephone = 154; // Data type: Text.
  oneof unnamed_sources_policy {
    string url = 155; // Data type: URL.
    CreativeWork creative_work = 156; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string vat_id = 157; // Data type: Text.
  // inherited from Thing
  string additional_type = 158; // Data type: URL.
  string alternate_name = 159; // Data type: Text.
  string description = 160; // Data type: Text.
  string disambiguating_description = 161; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 162; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 163; // Data type: Text.
    string url = 164; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 165; // An image file.
    string url = 166; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 167; // Data type: URL.
    CreativeWork creative_work = 168; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 169; // Data type: Text.
  Action potential_action = 170; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 171; // Data type: URL.
  oneof subject_of {
    Event event = 172; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 174; // Data type: URL.
}
message MonetaryAmount {
  // from MonetaryAmount
  string currency = 1; // Data type: Text.
  float32 max_value = 2; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 min_value = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  string valid_from = 4; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 5; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof value {
    string text = 6; // Data type: Text.
    float32 number = 7; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    bool boolean = 8; // Boolean: True or False.
    StructuredValue structured_value = 9; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
  }
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 10; // Data type: URL.
  string alternate_name = 11; // Data type: Text.
  string description = 12; // Data type: Text.
  string disambiguating_description = 13; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 14; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 15; // Data type: Text.
    string url = 16; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 17; // An image file.
    string url = 18; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 19; // Data type: URL.
    CreativeWork creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 21; // Data type: Text.
  Action potential_action = 22; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 23; // Data type: URL.
  oneof subject_of {
    Event event = 24; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 26; // Data type: URL.
}
message PriceSpecification {
  // from PriceSpecification
  QuantitativeValue eligible_quantity = 1; //  A point value or interval for product characteristics and other purposes.
  PriceSpecification eligible_transaction_volume = 2; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  float32 max_price = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 min_price = 4; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof price {
    float32 number = 5; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 6; // Data type: Text.
  }
  string price_currency = 7; // Data type: Text.
  string valid_from = 8; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 9; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  bool value_added_tax_included = 10; // Boolean: True or False.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 11; // Data type: URL.
  string alternate_name = 12; // Data type: Text.
  string description = 13; // Data type: Text.
  string disambiguating_description = 14; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 15; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 16; // Data type: Text.
    string url = 17; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 18; // An image file.
    string url = 19; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 20; // Data type: URL.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 22; // Data type: Text.
  Action potential_action = 23; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 24; // Data type: URL.
  oneof subject_of {
    Event event = 25; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 27; // Data type: URL.
}
message GenderType {
  // from GenderType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Brand {
  // from Brand
  AggregateRating aggregate_rating = 1; // The average rating based on multiple ratings or reviews.
  oneof logo {
    string url = 2; // Data type: URL.
    ImageObject image_object = 3; // An image file.
  }
  Review review = 4; // A review of an item - for example, of a restaurant, movie, or store.
  string slogan = 5; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 6; // Data type: URL.
  string alternate_name = 7; // Data type: Text.
  string description = 8; // Data type: Text.
  string disambiguating_description = 9; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 11; // Data type: Text.
    string url = 12; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 13; // An image file.
    string url = 14; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 15; // Data type: URL.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 17; // Data type: Text.
  Action potential_action = 18; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 19; // Data type: URL.
  oneof subject_of {
    Event event = 20; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 22; // Data type: URL.
}
message Review {
  // from Review
  Review associated_claim_review = 1; // A review of an item - for example, of a restaurant, movie, or store.
  Review associated_media_review = 2; // A review of an item - for example, of a restaurant, movie, or store.
  Review associated_review = 3; // A review of an item - for example, of a restaurant, movie, or store.
  Thing item_reviewed = 4; // The most generic type of item.
  oneof negative_notes {
    ListItem list_item = 5; // An list item, e.g. a step in a checklist or how-to description.
    string text = 6; // Data type: Text.
    ItemList item_list = 7; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
    WebContent web_content = 8; // WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]]).
  }
  oneof positive_notes {
    WebContent web_content = 9; // WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]]).
    string text = 10; // Data type: Text.
    ListItem list_item = 11; // An list item, e.g. a step in a checklist or how-to description.
    ItemList item_list = 12; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  }
  string review_aspect = 13; // Data type: Text.
  string review_body = 14; // Data type: Text.
  Rating review_rating = 15; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
  // inherited from CreativeWork
  oneof object_object {
    string text = 16; // Data type: Text.
    QuantitativeValue quantitative_value = 17; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 18; // The most generic type of item.
  string abstract = 19; // Data type: Text.
  string access_mode = 20; // Data type: Text.
  ItemList access_mode_sufficient = 21; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 22; // Data type: Text.
  string accessibility_control = 23; // Data type: Text.
  string accessibility_feature = 24; // Data type: Text.
  string accessibility_hazard = 25; // Data type: Text.
  string accessibility_summary = 26; // Data type: Text.
  Person accountable_person = 27; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 28; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 29; // Data type: URL.
  }
  AggregateRating aggregate_rating = 30; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 31; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 32; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 33; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 34; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 35; // Data type: Text.
  }
  MediaObject associated_media = 36; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 37; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 38; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 39; // An audio file.
    MusicRecording music_recording = 40; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 41; // A person (alive, dead, undead, or fictional).
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 43; // Data type: Text.
  string awards = 44; // Data type: Text.
  Person character = 45; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 46; // Data type: Text.
    CreativeWork creative_work = 47; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 48; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 49; // Data type: Integer.
  string conditions_of_access = 50; // Data type: Text.
  Place content_location = 51; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 52; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 53; // Data type: Text.
  }
  string content_reference_time = 54; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 56; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 57; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 58; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 59; // Data type: Text.
  float32 copyright_year = 60; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 61; // A [[comment]] that corrects [[CreativeWork]].
    string text = 62; // Data type: Text.
    string url = 63; // Data type: URL.
  }
  Country country_of_origin = 64; // A country.
  oneof creative_work_status {
    string text = 65; // Data type: Text.
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 67; // A person (alive, dead, undead, or fictional).
    Organization organization = 68; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 69; // Data type: Text.
  string date_created = 70; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 71; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 72; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 73; // Data type: URL.
  string edit_eidr = 74; // Data type: Text.
  Person editor = 75; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 76; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 77; // Data type: URL.
    string text = 78; // Data type: Text.
    DefinedTerm defined_term = 79; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 80; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 81; // Data type: Text.
  }
  MediaObject encoding = 82; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 83; // Data type: Text.
  MediaObject encodings = 84; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 85; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 86; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 87; // Data type: URL.
  oneof funder {
    Organization organization = 88; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 89; // A person (alive, dead, undead, or fictional).
  }
  string genre = 90; // Data type: URL.
  CreativeWork has_part = 91; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 92; // Data type: Text.
  oneof in_language {
    string text = 93; // Data type: Text.
    Language language = 94; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 95; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 96; // Data type: Text.
  Claim interpreted_as_claim = 97; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 98; // Boolean: True or False.
  oneof is_based_on {
    string url = 99; // Data type: URL.
    Product product = 100; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 103; // Data type: URL.
    Product product = 104; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 105; // Boolean: True or False.
  oneof is_part_of {
    string url = 106; // Data type: URL.
    CreativeWork creative_work = 107; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 108; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 109; // Data type: URL.
    string text = 110; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 111; // Data type: Text.
    DefinedTerm defined_term = 112; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 113; // Data type: URL.
    CreativeWork creative_work = 114; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 115; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 116; // The most generic type of item.
  oneof maintainer {
    Person person = 117; // A person (alive, dead, undead, or fictional).
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 119; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 120; // Data type: URL.
    string text = 121; // Data type: Text.
  }
  Thing mentions = 122; // The most generic type of item.
  oneof offers {
    Demand demand = 123; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 124; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 125; // Data type: Text.
    DefinedTerm defined_term = 126; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 127; // Data type: Text.
    float32 integer = 128; // Data type: Integer.
  }
  oneof producer {
    Person person = 129; // A person (alive, dead, undead, or fictional).
    Organization organization = 130; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 131; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 132; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 133; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 134; // A person (alive, dead, undead, or fictional).
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 136; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 137; // Data type: URL.
    CreativeWork creative_work = 138; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 139; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 140; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 141; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 142; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 143; // Data type: Text.
  string sd_date_published = 144; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 145; // Data type: URL.
    CreativeWork creative_work = 146; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 147; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 148; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 149; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 150; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 151; // Data type: Text.
    QuantitativeValue quantitative_value = 152; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 153; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 154; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 155; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 156; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 157; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 158; // Data type: Text.
    DefinedTerm defined_term = 159; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 160; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 161; // Data type: Text.
  string text = 162; // Data type: Text.
  string thumbnail_url = 163; // Data type: URL.
  Duration time_required = 164; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 165; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 166; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 167; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 168; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 169; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 170; // Data type: URL.
  }
  oneof version {
    string text = 171; // Data type: Text.
    float32 number = 172; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 173; // A video file.
    Clip clip = 174; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 176; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 177; // Data type: URL.
  string alternate_name = 178; // Data type: Text.
  string description = 179; // Data type: Text.
  string disambiguating_description = 180; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 181; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 182; // Data type: Text.
    string url = 183; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 184; // An image file.
    string url = 185; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 186; // Data type: URL.
    CreativeWork creative_work = 187; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 188; // Data type: Text.
  Action potential_action = 189; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 190; // Data type: URL.
  oneof subject_of {
    Event event = 191; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 192; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 193; // Data type: URL.
}
message WebContent {
  // from WebContent
  // inherited from CreativeWork
  oneof object_object {
    string text = 1; // Data type: Text.
    QuantitativeValue quantitative_value = 2; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 3; // The most generic type of item.
  string abstract = 4; // Data type: Text.
  string access_mode = 5; // Data type: Text.
  ItemList access_mode_sufficient = 6; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 7; // Data type: Text.
  string accessibility_control = 8; // Data type: Text.
  string accessibility_feature = 9; // Data type: Text.
  string accessibility_hazard = 10; // Data type: Text.
  string accessibility_summary = 11; // Data type: Text.
  Person accountable_person = 12; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 14; // Data type: URL.
  }
  AggregateRating aggregate_rating = 15; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 16; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 17; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 18; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 19; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 20; // Data type: Text.
  }
  MediaObject associated_media = 21; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 22; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 23; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 24; // An audio file.
    MusicRecording music_recording = 25; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 26; // A person (alive, dead, undead, or fictional).
    Organization organization = 27; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 28; // Data type: Text.
  string awards = 29; // Data type: Text.
  Person character = 30; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 31; // Data type: Text.
    CreativeWork creative_work = 32; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 33; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 34; // Data type: Integer.
  string conditions_of_access = 35; // Data type: Text.
  Place content_location = 36; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 37; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 38; // Data type: Text.
  }
  string content_reference_time = 39; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 40; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 41; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 44; // Data type: Text.
  float32 copyright_year = 45; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 46; // A [[comment]] that corrects [[CreativeWork]].
    string text = 47; // Data type: Text.
    string url = 48; // Data type: URL.
  }
  Country country_of_origin = 49; // A country.
  oneof creative_work_status {
    string text = 50; // Data type: Text.
    DefinedTerm defined_term = 51; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 52; // A person (alive, dead, undead, or fictional).
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 54; // Data type: Text.
  string date_created = 55; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 56; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 57; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 58; // Data type: URL.
  string edit_eidr = 59; // Data type: Text.
  Person editor = 60; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 61; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 62; // Data type: URL.
    string text = 63; // Data type: Text.
    DefinedTerm defined_term = 64; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 65; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 66; // Data type: Text.
  }
  MediaObject encoding = 67; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 68; // Data type: Text.
  MediaObject encodings = 69; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 70; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 71; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 72; // Data type: URL.
  oneof funder {
    Organization organization = 73; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 74; // A person (alive, dead, undead, or fictional).
  }
  string genre = 75; // Data type: URL.
  CreativeWork has_part = 76; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 77; // Data type: Text.
  oneof in_language {
    string text = 78; // Data type: Text.
    Language language = 79; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 80; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 81; // Data type: Text.
  Claim interpreted_as_claim = 82; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 83; // Boolean: True or False.
  oneof is_based_on {
    string url = 84; // Data type: URL.
    Product product = 85; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 86; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 88; // Data type: URL.
    Product product = 89; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 90; // Boolean: True or False.
  oneof is_part_of {
    string url = 91; // Data type: URL.
    CreativeWork creative_work = 92; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 93; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 94; // Data type: URL.
    string text = 95; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 96; // Data type: Text.
    DefinedTerm defined_term = 97; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 98; // Data type: URL.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 100; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 101; // The most generic type of item.
  oneof maintainer {
    Person person = 102; // A person (alive, dead, undead, or fictional).
    Organization organization = 103; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 104; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 105; // Data type: URL.
    string text = 106; // Data type: Text.
  }
  Thing mentions = 107; // The most generic type of item.
  oneof offers {
    Demand demand = 108; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 109; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 110; // Data type: Text.
    DefinedTerm defined_term = 111; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 112; // Data type: Text.
    float32 integer = 113; // Data type: Integer.
  }
  oneof producer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 117; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 118; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 119; // A person (alive, dead, undead, or fictional).
    Organization organization = 120; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 121; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 122; // Data type: URL.
    CreativeWork creative_work = 123; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 124; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 125; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 126; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 127; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 128; // Data type: Text.
  string sd_date_published = 129; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 130; // Data type: URL.
    CreativeWork creative_work = 131; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 133; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 134; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 135; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 136; // Data type: Text.
    QuantitativeValue quantitative_value = 137; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 138; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 139; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 140; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 142; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 143; // Data type: Text.
    DefinedTerm defined_term = 144; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 145; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 146; // Data type: Text.
  string text = 147; // Data type: Text.
  string thumbnail_url = 148; // Data type: URL.
  Duration time_required = 149; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 150; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 151; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 152; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 153; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 154; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 155; // Data type: URL.
  }
  oneof version {
    string text = 156; // Data type: Text.
    float32 number = 157; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 158; // A video file.
    Clip clip = 159; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 160; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 162; // Data type: URL.
  string alternate_name = 163; // Data type: Text.
  string description = 164; // Data type: Text.
  string disambiguating_description = 165; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 166; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 167; // Data type: Text.
    string url = 168; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 169; // An image file.
    string url = 170; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 171; // Data type: URL.
    CreativeWork creative_work = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 173; // Data type: Text.
  Action potential_action = 174; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 175; // Data type: URL.
  oneof subject_of {
    Event event = 176; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 177; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 178; // Data type: URL.
}
message ListItem {
  // from ListItem
  Thing item = 1; // The most generic type of item.
  ListItem next_item = 2; // An list item, e.g. a step in a checklist or how-to description.
  oneof position {
    string text = 3; // Data type: Text.
    float32 integer = 4; // Data type: Integer.
  }
  ListItem previous_item = 5; // An list item, e.g. a step in a checklist or how-to description.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 6; // Data type: URL.
  string alternate_name = 7; // Data type: Text.
  string description = 8; // Data type: Text.
  string disambiguating_description = 9; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 11; // Data type: Text.
    string url = 12; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 13; // An image file.
    string url = 14; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 15; // Data type: URL.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 17; // Data type: Text.
  Action potential_action = 18; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 19; // Data type: URL.
  oneof subject_of {
    Event event = 20; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 22; // Data type: URL.
}
message ItemList {
  // from ItemList
  oneof item_list_element {
    string text = 1; // Data type: Text.
    Thing thing = 2; // The most generic type of item.
    ListItem list_item = 3; // An list item, e.g. a step in a checklist or how-to description.
  }
  oneof item_list_order {
    ItemListOrderType item_list_order_type = 4; // Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
    string text = 5; // Data type: Text.
  }
  float32 number_of_items = 6; // Data type: Integer.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message ItemListOrderType {
  // from ItemListOrderType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Rating {
  // from Rating
  oneof author {
    Person person = 1; // A person (alive, dead, undead, or fictional).
    Organization organization = 2; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof best_rating {
    float32 number = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 4; // Data type: Text.
  }
  string rating_explanation = 5; // Data type: Text.
  oneof rating_value {
    float32 number = 6; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 7; // Data type: Text.
  }
  string review_aspect = 8; // Data type: Text.
  oneof worst_rating {
    float32 number = 9; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 10; // Data type: Text.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 11; // Data type: URL.
  string alternate_name = 12; // Data type: Text.
  string description = 13; // Data type: Text.
  string disambiguating_description = 14; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 15; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 16; // Data type: Text.
    string url = 17; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 18; // An image file.
    string url = 19; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 20; // Data type: URL.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 22; // Data type: Text.
  Action potential_action = 23; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 24; // Data type: URL.
  oneof subject_of {
    Event event = 25; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 27; // Data type: URL.
}
message InteractionCounter {
  // from InteractionCounter
  string end_time = 1; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof interaction_service {
    WebSite web_site = 2; // A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
    SoftwareApplication software_application = 3; // A software application.
  }
  Action interaction_type = 4; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  oneof location {
    PostalAddress postal_address = 5; // The mailing address.
    string text = 6; // Data type: Text.
    Place place = 7; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 8; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  string start_time = 9; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  float32 user_interaction_count = 10; // Data type: Integer.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 11; // Data type: URL.
  string alternate_name = 12; // Data type: Text.
  string description = 13; // Data type: Text.
  string disambiguating_description = 14; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 15; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 16; // Data type: Text.
    string url = 17; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 18; // An image file.
    string url = 19; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 20; // Data type: URL.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 22; // Data type: Text.
  Action potential_action = 23; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 24; // Data type: URL.
  oneof subject_of {
    Event event = 25; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 27; // Data type: URL.
}
message Action {
  // from Action
  ActionStatusType action_status = 1; // The status of an Action.
  oneof agent {
    Organization organization = 2; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 3; // A person (alive, dead, undead, or fictional).
  }
  string end_time = 4; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  Thing error = 5; // The most generic type of item.
  Thing instrument = 6; // The most generic type of item.
  oneof location {
    PostalAddress postal_address = 7; // The mailing address.
    string text = 8; // Data type: Text.
    Place place = 9; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 10; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  Thing object = 11; // The most generic type of item.
  oneof participant {
    Person person = 12; // A person (alive, dead, undead, or fictional).
    Organization organization = 13; // An organization such as a school, NGO, corporation, club, etc.
  }
  Thing result = 14; // The most generic type of item.
  string start_time = 15; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  EntryPoint target = 16; // An entry point, within some Web-based protocol.
  // inherited from Thing
  string additional_type = 17; // Data type: URL.
  string alternate_name = 18; // Data type: Text.
  string description = 19; // Data type: Text.
  string disambiguating_description = 20; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 21; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 22; // Data type: Text.
    string url = 23; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 24; // An image file.
    string url = 25; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 26; // Data type: URL.
    CreativeWork creative_work = 27; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 28; // Data type: Text.
  Action potential_action = 29; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 30; // Data type: URL.
  oneof subject_of {
    Event event = 31; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 32; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 33; // Data type: URL.
}
message VirtualLocation {
  // from VirtualLocation
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message EntryPoint {
  // from EntryPoint
  SoftwareApplication action_application = 1; // A software application.
  string action_platform = 2; // Data type: Text.
  SoftwareApplication application = 3; // A software application.
  string content_type = 4; // Data type: Text.
  string encoding_type = 5; // Data type: Text.
  string http_method = 6; // Data type: Text.
  string url_template = 7; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 8; // Data type: URL.
  string alternate_name = 9; // Data type: Text.
  string description = 10; // Data type: Text.
  string disambiguating_description = 11; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 12; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 13; // Data type: Text.
    string url = 14; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 15; // An image file.
    string url = 16; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 17; // Data type: URL.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 19; // Data type: Text.
  Action potential_action = 20; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 21; // Data type: URL.
  oneof subject_of {
    Event event = 22; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 23; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 24; // Data type: URL.
}
message SoftwareApplication {
  // from SoftwareApplication
  string application_category = 1; // Data type: Text.
  string application_sub_category = 2; // Data type: URL.
  string application_suite = 3; // Data type: Text.
  string available_on_device = 4; // Data type: Text.
  string countries_not_supported = 5; // Data type: Text.
  string countries_supported = 6; // Data type: Text.
  string device = 7; // Data type: Text.
  string download_url = 8; // Data type: URL.
  string feature_list = 9; // Data type: Text.
  string file_size = 10; // Data type: Text.
  string install_url = 11; // Data type: URL.
  string memory_requirements = 12; // Data type: Text.
  string operating_system = 13; // Data type: Text.
  string permissions = 14; // Data type: Text.
  string processor_requirements = 15; // Data type: Text.
  string release_notes = 16; // Data type: Text.
  string requirements = 17; // Data type: URL.
  oneof screenshot {
    string url = 18; // Data type: URL.
    ImageObject image_object = 19; // An image file.
  }
  SoftwareApplication software_add_on = 20; // A software application.
  CreativeWork software_help = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string software_requirements = 22; // Data type: Text.
  string software_version = 23; // Data type: Text.
  string storage_requirements = 24; // Data type: Text.
  DataFeed supporting_data = 25; // A single feed providing structured information about one or more entities or topics.
  // inherited from CreativeWork
  oneof object_object {
    string text = 26; // Data type: Text.
    QuantitativeValue quantitative_value = 27; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 28; // The most generic type of item.
  string abstract = 29; // Data type: Text.
  string access_mode = 30; // Data type: Text.
  ItemList access_mode_sufficient = 31; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 32; // Data type: Text.
  string accessibility_control = 33; // Data type: Text.
  string accessibility_feature = 34; // Data type: Text.
  string accessibility_hazard = 35; // Data type: Text.
  string accessibility_summary = 36; // Data type: Text.
  Person accountable_person = 37; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 38; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 39; // Data type: URL.
  }
  AggregateRating aggregate_rating = 40; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 41; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 42; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 43; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 44; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 45; // Data type: Text.
  }
  MediaObject associated_media = 46; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 47; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 48; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 49; // An audio file.
    MusicRecording music_recording = 50; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 51; // A person (alive, dead, undead, or fictional).
    Organization organization = 52; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 53; // Data type: Text.
  string awards = 54; // Data type: Text.
  Person character = 55; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 56; // Data type: Text.
    CreativeWork creative_work = 57; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 58; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 59; // Data type: Integer.
  string conditions_of_access = 60; // Data type: Text.
  Place content_location = 61; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 62; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 63; // Data type: Text.
  }
  string content_reference_time = 64; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 66; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 67; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 68; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 69; // Data type: Text.
  float32 copyright_year = 70; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 71; // A [[comment]] that corrects [[CreativeWork]].
    string text = 72; // Data type: Text.
    string url = 73; // Data type: URL.
  }
  Country country_of_origin = 74; // A country.
  oneof creative_work_status {
    string text = 75; // Data type: Text.
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 77; // A person (alive, dead, undead, or fictional).
    Organization organization = 78; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 79; // Data type: Text.
  string date_created = 80; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 81; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 82; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 83; // Data type: URL.
  string edit_eidr = 84; // Data type: Text.
  Person editor = 85; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 86; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 87; // Data type: URL.
    string text = 88; // Data type: Text.
    DefinedTerm defined_term = 89; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 90; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 91; // Data type: Text.
  }
  MediaObject encoding = 92; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 93; // Data type: Text.
  MediaObject encodings = 94; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 96; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 97; // Data type: URL.
  oneof funder {
    Organization organization = 98; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 99; // A person (alive, dead, undead, or fictional).
  }
  string genre = 100; // Data type: URL.
  CreativeWork has_part = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 102; // Data type: Text.
  oneof in_language {
    string text = 103; // Data type: Text.
    Language language = 104; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 105; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 106; // Data type: Text.
  Claim interpreted_as_claim = 107; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 108; // Boolean: True or False.
  oneof is_based_on {
    string url = 109; // Data type: URL.
    Product product = 110; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 112; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 113; // Data type: URL.
    Product product = 114; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 115; // Boolean: True or False.
  oneof is_part_of {
    string url = 116; // Data type: URL.
    CreativeWork creative_work = 117; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 118; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 119; // Data type: URL.
    string text = 120; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 121; // Data type: Text.
    DefinedTerm defined_term = 122; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 123; // Data type: URL.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 125; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 126; // The most generic type of item.
  oneof maintainer {
    Person person = 127; // A person (alive, dead, undead, or fictional).
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 129; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 130; // Data type: URL.
    string text = 131; // Data type: Text.
  }
  Thing mentions = 132; // The most generic type of item.
  oneof offers {
    Demand demand = 133; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 134; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 135; // Data type: Text.
    DefinedTerm defined_term = 136; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 137; // Data type: Text.
    float32 integer = 138; // Data type: Integer.
  }
  oneof producer {
    Person person = 139; // A person (alive, dead, undead, or fictional).
    Organization organization = 140; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 142; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 143; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 144; // A person (alive, dead, undead, or fictional).
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 146; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 147; // Data type: URL.
    CreativeWork creative_work = 148; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 149; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 150; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 151; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 152; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 153; // Data type: Text.
  string sd_date_published = 154; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 155; // Data type: URL.
    CreativeWork creative_work = 156; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 157; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 158; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 159; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 160; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 161; // Data type: Text.
    QuantitativeValue quantitative_value = 162; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 163; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 164; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 165; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 166; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 167; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 168; // Data type: Text.
    DefinedTerm defined_term = 169; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 170; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 171; // Data type: Text.
  string text = 172; // Data type: Text.
  string thumbnail_url = 173; // Data type: URL.
  Duration time_required = 174; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 176; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 177; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 178; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 180; // Data type: URL.
  }
  oneof version {
    string text = 181; // Data type: Text.
    float32 number = 182; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 183; // A video file.
    Clip clip = 184; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 185; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 186; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 187; // Data type: URL.
  string alternate_name = 188; // Data type: Text.
  string description = 189; // Data type: Text.
  string disambiguating_description = 190; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 191; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 192; // Data type: Text.
    string url = 193; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 194; // An image file.
    string url = 195; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 196; // Data type: URL.
    CreativeWork creative_work = 197; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 198; // Data type: Text.
  Action potential_action = 199; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 200; // Data type: URL.
  oneof subject_of {
    Event event = 201; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 202; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 203; // Data type: URL.
}
message DataFeed {
  // from DataFeed
  oneof data_feed_element {
    string text = 1; // Data type: Text.
    Thing thing = 2; // The most generic type of item.
    DataFeedItem data_feed_item = 3; // A single item within a larger data feed.
  }
  // inherited from Dataset
  DataCatalog catalog = 4; // A collection of datasets.
  string dataset_time_interval = 5; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  DataDownload distribution = 6; // A dataset in downloadable form.
  DataCatalog included_data_catalog = 7; // A collection of datasets.
  DataCatalog included_in_data_catalog = 8; // A collection of datasets.
  string issn = 9; // Data type: Text.
  string measurement_technique = 10; // Data type: Text.
  oneof variable_measured {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
  }
  // inherited from CreativeWork
  oneof object_object {
    string text = 13; // Data type: Text.
    QuantitativeValue quantitative_value = 14; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 15; // The most generic type of item.
  string abstract = 16; // Data type: Text.
  string access_mode = 17; // Data type: Text.
  ItemList access_mode_sufficient = 18; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 19; // Data type: Text.
  string accessibility_control = 20; // Data type: Text.
  string accessibility_feature = 21; // Data type: Text.
  string accessibility_hazard = 22; // Data type: Text.
  string accessibility_summary = 23; // Data type: Text.
  Person accountable_person = 24; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 26; // Data type: URL.
  }
  AggregateRating aggregate_rating = 27; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 28; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 29; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 30; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 31; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 32; // Data type: Text.
  }
  MediaObject associated_media = 33; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 34; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 35; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 36; // An audio file.
    MusicRecording music_recording = 37; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 38; // A person (alive, dead, undead, or fictional).
    Organization organization = 39; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 40; // Data type: Text.
  string awards = 41; // Data type: Text.
  Person character = 42; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 43; // Data type: Text.
    CreativeWork creative_work = 44; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 45; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 46; // Data type: Integer.
  string conditions_of_access = 47; // Data type: Text.
  Place content_location = 48; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 49; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 50; // Data type: Text.
  }
  string content_reference_time = 51; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 52; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 53; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 55; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 56; // Data type: Text.
  float32 copyright_year = 57; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 58; // A [[comment]] that corrects [[CreativeWork]].
    string text = 59; // Data type: Text.
    string url = 60; // Data type: URL.
  }
  Country country_of_origin = 61; // A country.
  oneof creative_work_status {
    string text = 62; // Data type: Text.
    DefinedTerm defined_term = 63; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 64; // A person (alive, dead, undead, or fictional).
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 66; // Data type: Text.
  string date_created = 67; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 69; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 70; // Data type: URL.
  string edit_eidr = 71; // Data type: Text.
  Person editor = 72; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 73; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 74; // Data type: URL.
    string text = 75; // Data type: Text.
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 78; // Data type: Text.
  }
  MediaObject encoding = 79; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 80; // Data type: Text.
  MediaObject encodings = 81; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 82; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 83; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 84; // Data type: URL.
  oneof funder {
    Organization organization = 85; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 86; // A person (alive, dead, undead, or fictional).
  }
  string genre = 87; // Data type: URL.
  CreativeWork has_part = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 89; // Data type: Text.
  oneof in_language {
    string text = 90; // Data type: Text.
    Language language = 91; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 92; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 93; // Data type: Text.
  Claim interpreted_as_claim = 94; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 95; // Boolean: True or False.
  oneof is_based_on {
    string url = 96; // Data type: URL.
    Product product = 97; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 98; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 100; // Data type: URL.
    Product product = 101; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 102; // Boolean: True or False.
  oneof is_part_of {
    string url = 103; // Data type: URL.
    CreativeWork creative_work = 104; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 105; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 108; // Data type: Text.
    DefinedTerm defined_term = 109; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 110; // Data type: URL.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 112; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 113; // The most generic type of item.
  oneof maintainer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 116; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 117; // Data type: URL.
    string text = 118; // Data type: Text.
  }
  Thing mentions = 119; // The most generic type of item.
  oneof offers {
    Demand demand = 120; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 121; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 122; // Data type: Text.
    DefinedTerm defined_term = 123; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 124; // Data type: Text.
    float32 integer = 125; // Data type: Integer.
  }
  oneof producer {
    Person person = 126; // A person (alive, dead, undead, or fictional).
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 129; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 130; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 131; // A person (alive, dead, undead, or fictional).
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 133; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 134; // Data type: URL.
    CreativeWork creative_work = 135; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 136; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 137; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 138; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 139; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 140; // Data type: Text.
  string sd_date_published = 141; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 142; // Data type: URL.
    CreativeWork creative_work = 143; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 146; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 148; // Data type: Text.
    QuantitativeValue quantitative_value = 149; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 150; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 151; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 152; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 155; // Data type: Text.
    DefinedTerm defined_term = 156; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 157; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 158; // Data type: Text.
  string text = 159; // Data type: Text.
  string thumbnail_url = 160; // Data type: URL.
  Duration time_required = 161; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 163; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 164; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 165; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 166; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 167; // Data type: URL.
  }
  oneof version {
    string text = 168; // Data type: Text.
    float32 number = 169; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 170; // A video file.
    Clip clip = 171; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 174; // Data type: URL.
  string alternate_name = 175; // Data type: Text.
  string description = 176; // Data type: Text.
  string disambiguating_description = 177; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 178; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 179; // Data type: Text.
    string url = 180; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 181; // An image file.
    string url = 182; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 183; // Data type: URL.
    CreativeWork creative_work = 184; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 185; // Data type: Text.
  Action potential_action = 186; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 187; // Data type: URL.
  oneof subject_of {
    Event event = 188; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 189; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 190; // Data type: URL.
}
message DataFeedItem {
  // from DataFeedItem
  string date_created = 1; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_deleted = 2; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 3; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Thing item = 4; // The most generic type of item.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 5; // Data type: URL.
  string alternate_name = 6; // Data type: Text.
  string description = 7; // Data type: Text.
  string disambiguating_description = 8; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 9; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 10; // Data type: Text.
    string url = 11; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 12; // An image file.
    string url = 13; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 14; // Data type: URL.
    CreativeWork creative_work = 15; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 16; // Data type: Text.
  Action potential_action = 17; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 18; // Data type: URL.
  oneof subject_of {
    Event event = 19; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 21; // Data type: URL.
}
message ActionStatusType {
  // from ActionStatusType
  // inherited from StatusEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message WebSite {
  // from WebSite
  string issn = 1; // Data type: Text.
  // inherited from CreativeWork
  oneof object_object {
    string text = 2; // Data type: Text.
    QuantitativeValue quantitative_value = 3; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 4; // The most generic type of item.
  string abstract = 5; // Data type: Text.
  string access_mode = 6; // Data type: Text.
  ItemList access_mode_sufficient = 7; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 8; // Data type: Text.
  string accessibility_control = 9; // Data type: Text.
  string accessibility_feature = 10; // Data type: Text.
  string accessibility_hazard = 11; // Data type: Text.
  string accessibility_summary = 12; // Data type: Text.
  Person accountable_person = 13; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 15; // Data type: URL.
  }
  AggregateRating aggregate_rating = 16; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 17; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 18; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 19; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 20; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 21; // Data type: Text.
  }
  MediaObject associated_media = 22; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 23; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 24; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 25; // An audio file.
    MusicRecording music_recording = 26; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 27; // A person (alive, dead, undead, or fictional).
    Organization organization = 28; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 29; // Data type: Text.
  string awards = 30; // Data type: Text.
  Person character = 31; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 32; // Data type: Text.
    CreativeWork creative_work = 33; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 34; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 35; // Data type: Integer.
  string conditions_of_access = 36; // Data type: Text.
  Place content_location = 37; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 38; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 39; // Data type: Text.
  }
  string content_reference_time = 40; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 41; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 42; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 45; // Data type: Text.
  float32 copyright_year = 46; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 47; // A [[comment]] that corrects [[CreativeWork]].
    string text = 48; // Data type: Text.
    string url = 49; // Data type: URL.
  }
  Country country_of_origin = 50; // A country.
  oneof creative_work_status {
    string text = 51; // Data type: Text.
    DefinedTerm defined_term = 52; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 53; // A person (alive, dead, undead, or fictional).
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 55; // Data type: Text.
  string date_created = 56; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 58; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 59; // Data type: URL.
  string edit_eidr = 60; // Data type: Text.
  Person editor = 61; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 62; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 63; // Data type: URL.
    string text = 64; // Data type: Text.
    DefinedTerm defined_term = 65; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 67; // Data type: Text.
  }
  MediaObject encoding = 68; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 69; // Data type: Text.
  MediaObject encodings = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 71; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 72; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 73; // Data type: URL.
  oneof funder {
    Organization organization = 74; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 75; // A person (alive, dead, undead, or fictional).
  }
  string genre = 76; // Data type: URL.
  CreativeWork has_part = 77; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 78; // Data type: Text.
  oneof in_language {
    string text = 79; // Data type: Text.
    Language language = 80; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 81; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 82; // Data type: Text.
  Claim interpreted_as_claim = 83; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 84; // Boolean: True or False.
  oneof is_based_on {
    string url = 85; // Data type: URL.
    Product product = 86; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 89; // Data type: URL.
    Product product = 90; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 91; // Boolean: True or False.
  oneof is_part_of {
    string url = 92; // Data type: URL.
    CreativeWork creative_work = 93; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 94; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 95; // Data type: URL.
    string text = 96; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 97; // Data type: Text.
    DefinedTerm defined_term = 98; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 99; // Data type: URL.
    CreativeWork creative_work = 100; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 101; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 102; // The most generic type of item.
  oneof maintainer {
    Person person = 103; // A person (alive, dead, undead, or fictional).
    Organization organization = 104; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 105; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  Thing mentions = 108; // The most generic type of item.
  oneof offers {
    Demand demand = 109; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 110; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 111; // Data type: Text.
    DefinedTerm defined_term = 112; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 113; // Data type: Text.
    float32 integer = 114; // Data type: Integer.
  }
  oneof producer {
    Person person = 115; // A person (alive, dead, undead, or fictional).
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 117; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 118; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 119; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 120; // A person (alive, dead, undead, or fictional).
    Organization organization = 121; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 122; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 123; // Data type: URL.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 125; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 126; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 127; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 128; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 129; // Data type: Text.
  string sd_date_published = 130; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 131; // Data type: URL.
    CreativeWork creative_work = 132; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 134; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 135; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 136; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 137; // Data type: Text.
    QuantitativeValue quantitative_value = 138; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 139; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 140; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 141; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 142; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 143; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 144; // Data type: Text.
    DefinedTerm defined_term = 145; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 146; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 147; // Data type: Text.
  string text = 148; // Data type: Text.
  string thumbnail_url = 149; // Data type: URL.
  Duration time_required = 150; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 151; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 152; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 153; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 154; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 155; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 156; // Data type: URL.
  }
  oneof version {
    string text = 157; // Data type: Text.
    float32 number = 158; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 159; // A video file.
    Clip clip = 160; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 163; // Data type: URL.
  string alternate_name = 164; // Data type: Text.
  string description = 165; // Data type: Text.
  string disambiguating_description = 166; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 167; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 168; // Data type: Text.
    string url = 169; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 170; // An image file.
    string url = 171; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 172; // Data type: URL.
    CreativeWork creative_work = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 174; // Data type: Text.
  Action potential_action = 175; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 176; // Data type: URL.
  oneof subject_of {
    Event event = 177; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 178; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 179; // Data type: URL.
}
message EducationalOccupationalCredential {
  // from EducationalOccupationalCredential
  oneof competency_required {
    DefinedTerm defined_term = 1; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 2; // Data type: Text.
    string url = 3; // Data type: URL.
  }
  oneof credential_category {
    DefinedTerm defined_term = 4; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 5; // Data type: Text.
    string url = 6; // Data type: URL.
  }
  oneof educational_level {
    string url = 7; // Data type: URL.
    string text = 8; // Data type: Text.
    DefinedTerm defined_term = 9; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  Organization recognized_by = 10; // An organization such as a school, NGO, corporation, club, etc.
  Duration valid_for = 11; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  AdministrativeArea valid_in = 12; // A geographical region, typically under the jurisdiction of a particular government.
  // inherited from CreativeWork
  oneof object_object {
    string text = 13; // Data type: Text.
    QuantitativeValue quantitative_value = 14; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 15; // The most generic type of item.
  string abstract = 16; // Data type: Text.
  string access_mode = 17; // Data type: Text.
  ItemList access_mode_sufficient = 18; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 19; // Data type: Text.
  string accessibility_control = 20; // Data type: Text.
  string accessibility_feature = 21; // Data type: Text.
  string accessibility_hazard = 22; // Data type: Text.
  string accessibility_summary = 23; // Data type: Text.
  Person accountable_person = 24; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 26; // Data type: URL.
  }
  AggregateRating aggregate_rating = 27; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 28; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 29; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 30; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 31; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 32; // Data type: Text.
  }
  MediaObject associated_media = 33; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 34; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 35; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 36; // An audio file.
    MusicRecording music_recording = 37; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 38; // A person (alive, dead, undead, or fictional).
    Organization organization = 39; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 40; // Data type: Text.
  string awards = 41; // Data type: Text.
  Person character = 42; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 43; // Data type: Text.
    CreativeWork creative_work = 44; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 45; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 46; // Data type: Integer.
  string conditions_of_access = 47; // Data type: Text.
  Place content_location = 48; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 49; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 50; // Data type: Text.
  }
  string content_reference_time = 51; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 52; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 53; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 55; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 56; // Data type: Text.
  float32 copyright_year = 57; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 58; // A [[comment]] that corrects [[CreativeWork]].
    string text = 59; // Data type: Text.
    string url = 60; // Data type: URL.
  }
  Country country_of_origin = 61; // A country.
  oneof creative_work_status {
    string text = 62; // Data type: Text.
    DefinedTerm defined_term = 63; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 64; // A person (alive, dead, undead, or fictional).
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 66; // Data type: Text.
  string date_created = 67; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 69; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 70; // Data type: URL.
  string edit_eidr = 71; // Data type: Text.
  Person editor = 72; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 73; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 74; // Data type: URL.
    string text = 75; // Data type: Text.
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 78; // Data type: Text.
  }
  MediaObject encoding = 79; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 80; // Data type: Text.
  MediaObject encodings = 81; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 82; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 83; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 84; // Data type: URL.
  oneof funder {
    Organization organization = 85; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 86; // A person (alive, dead, undead, or fictional).
  }
  string genre = 87; // Data type: URL.
  CreativeWork has_part = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 89; // Data type: Text.
  oneof in_language {
    string text = 90; // Data type: Text.
    Language language = 91; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 92; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 93; // Data type: Text.
  Claim interpreted_as_claim = 94; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 95; // Boolean: True or False.
  oneof is_based_on {
    string url = 96; // Data type: URL.
    Product product = 97; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 98; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 100; // Data type: URL.
    Product product = 101; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 102; // Boolean: True or False.
  oneof is_part_of {
    string url = 103; // Data type: URL.
    CreativeWork creative_work = 104; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 105; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 108; // Data type: Text.
    DefinedTerm defined_term = 109; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 110; // Data type: URL.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 112; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 113; // The most generic type of item.
  oneof maintainer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 116; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 117; // Data type: URL.
    string text = 118; // Data type: Text.
  }
  Thing mentions = 119; // The most generic type of item.
  oneof offers {
    Demand demand = 120; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 121; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 122; // Data type: Text.
    DefinedTerm defined_term = 123; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 124; // Data type: Text.
    float32 integer = 125; // Data type: Integer.
  }
  oneof producer {
    Person person = 126; // A person (alive, dead, undead, or fictional).
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 129; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 130; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 131; // A person (alive, dead, undead, or fictional).
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 133; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 134; // Data type: URL.
    CreativeWork creative_work = 135; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 136; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 137; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 138; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 139; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 140; // Data type: Text.
  string sd_date_published = 141; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 142; // Data type: URL.
    CreativeWork creative_work = 143; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 146; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 148; // Data type: Text.
    QuantitativeValue quantitative_value = 149; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 150; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 151; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 152; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 155; // Data type: Text.
    DefinedTerm defined_term = 156; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 157; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 158; // Data type: Text.
  string text = 159; // Data type: Text.
  string thumbnail_url = 160; // Data type: URL.
  Duration time_required = 161; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 163; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 164; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 165; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 166; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 167; // Data type: URL.
  }
  oneof version {
    string text = 168; // Data type: Text.
    float32 number = 169; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 170; // A video file.
    Clip clip = 171; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 174; // Data type: URL.
  string alternate_name = 175; // Data type: Text.
  string description = 176; // Data type: Text.
  string disambiguating_description = 177; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 178; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 179; // Data type: Text.
    string url = 180; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 181; // An image file.
    string url = 182; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 183; // Data type: URL.
    CreativeWork creative_work = 184; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 185; // Data type: Text.
  Action potential_action = 186; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 187; // Data type: URL.
  oneof subject_of {
    Event event = 188; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 189; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 190; // Data type: URL.
}
message ProgramMembership {
  // from ProgramMembership
  Organization hosting_organization = 1; // An organization such as a school, NGO, corporation, club, etc.
  oneof member {
    Organization organization = 2; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 3; // A person (alive, dead, undead, or fictional).
  }
  oneof members {
    Person person = 4; // A person (alive, dead, undead, or fictional).
    Organization organization = 5; // An organization such as a school, NGO, corporation, club, etc.
  }
  string membership_number = 6; // Data type: Text.
  oneof membership_points_earned {
    QuantitativeValue quantitative_value = 7; //  A point value or interval for product characteristics and other purposes.
    float32 number = 8; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  string program_name = 9; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 10; // Data type: URL.
  string alternate_name = 11; // Data type: Text.
  string description = 12; // Data type: Text.
  string disambiguating_description = 13; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 14; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 15; // Data type: Text.
    string url = 16; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 17; // An image file.
    string url = 18; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 19; // Data type: URL.
    CreativeWork creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 21; // Data type: Text.
  Action potential_action = 22; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 23; // Data type: URL.
  oneof subject_of {
    Event event = 24; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 26; // Data type: URL.
}
message Occupation {
  // from Occupation
  oneof education_requirements {
    string text = 1; // Data type: Text.
    EducationalOccupationalCredential educational_occupational_credential = 2; // An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  }
  oneof estimated_salary {
    float32 number = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    MonetaryAmountDistribution monetary_amount_distribution = 4; // A statistical distribution of monetary amounts.
    MonetaryAmount monetary_amount = 5; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  }
  oneof experience_requirements {
    OccupationalExperienceRequirements occupational_experience_requirements = 6; // Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].
    string text = 7; // Data type: Text.
  }
  AdministrativeArea occupation_location = 8; // A geographical region, typically under the jurisdiction of a particular government.
  oneof occupational_category {
    CategoryCode category_code = 9; // A Category Code.
    string text = 10; // Data type: Text.
  }
  oneof qualifications {
    string text = 11; // Data type: Text.
    EducationalOccupationalCredential educational_occupational_credential = 12; // An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  }
  string responsibilities = 13; // Data type: Text.
  oneof skills {
    DefinedTerm defined_term = 14; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 15; // Data type: Text.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 16; // Data type: URL.
  string alternate_name = 17; // Data type: Text.
  string description = 18; // Data type: Text.
  string disambiguating_description = 19; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 20; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 21; // Data type: Text.
    string url = 22; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 23; // An image file.
    string url = 24; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 25; // Data type: URL.
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 27; // Data type: Text.
  Action potential_action = 28; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 29; // Data type: URL.
  oneof subject_of {
    Event event = 30; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 31; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 32; // Data type: URL.
}
message OccupationalExperienceRequirements {
  // from OccupationalExperienceRequirements
  float32 months_of_experience = 1; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 2; // Data type: URL.
  string alternate_name = 3; // Data type: Text.
  string description = 4; // Data type: Text.
  string disambiguating_description = 5; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 6; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 7; // Data type: Text.
    string url = 8; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 9; // An image file.
    string url = 10; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 11; // Data type: URL.
    CreativeWork creative_work = 12; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 13; // Data type: Text.
  Action potential_action = 14; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 15; // Data type: URL.
  oneof subject_of {
    Event event = 16; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 18; // Data type: URL.
}
message MonetaryAmountDistribution {
  // from MonetaryAmountDistribution
  string currency = 1; // Data type: Text.
  // inherited from QuantitativeValueDistribution
  Duration duration = 2; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  float32 median = 3; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 percentile_10 = 4; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 percentile_25 = 5; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 percentile_75 = 6; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 percentile_90 = 7; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 8; // Data type: URL.
  string alternate_name = 9; // Data type: Text.
  string description = 10; // Data type: Text.
  string disambiguating_description = 11; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 12; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 13; // Data type: Text.
    string url = 14; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 15; // An image file.
    string url = 16; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 17; // Data type: URL.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 19; // Data type: Text.
  Action potential_action = 20; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 21; // Data type: URL.
  oneof subject_of {
    Event event = 22; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 23; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 24; // Data type: URL.
}
message CategoryCode {
  // from CategoryCode
  string code_value = 1; // Data type: Text.
  oneof in_code_set {
    string url = 2; // Data type: URL.
    CategoryCodeSet category_code_set = 3; // A set of Category Code values.
  }
  // inherited from DefinedTerm
  oneof in_defined_term_set {
    string url = 4; // Data type: URL.
    DefinedTermSet defined_term_set = 5; // A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
  }
  string term_code = 6; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message CategoryCodeSet {
  // from CategoryCodeSet
  CategoryCode has_category_code = 1; // A Category Code.
  // inherited from DefinedTermSet
  DefinedTerm has_defined_term = 2; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  // inherited from CreativeWork
  oneof object_object {
    string text = 3; // Data type: Text.
    QuantitativeValue quantitative_value = 4; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 5; // The most generic type of item.
  string abstract = 6; // Data type: Text.
  string access_mode = 7; // Data type: Text.
  ItemList access_mode_sufficient = 8; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 9; // Data type: Text.
  string accessibility_control = 10; // Data type: Text.
  string accessibility_feature = 11; // Data type: Text.
  string accessibility_hazard = 12; // Data type: Text.
  string accessibility_summary = 13; // Data type: Text.
  Person accountable_person = 14; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 15; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 16; // Data type: URL.
  }
  AggregateRating aggregate_rating = 17; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 18; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 19; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 20; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 21; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 22; // Data type: Text.
  }
  MediaObject associated_media = 23; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 24; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 25; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 26; // An audio file.
    MusicRecording music_recording = 27; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 28; // A person (alive, dead, undead, or fictional).
    Organization organization = 29; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 30; // Data type: Text.
  string awards = 31; // Data type: Text.
  Person character = 32; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 33; // Data type: Text.
    CreativeWork creative_work = 34; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 35; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 36; // Data type: Integer.
  string conditions_of_access = 37; // Data type: Text.
  Place content_location = 38; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 39; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 40; // Data type: Text.
  }
  string content_reference_time = 41; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 46; // Data type: Text.
  float32 copyright_year = 47; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 48; // A [[comment]] that corrects [[CreativeWork]].
    string text = 49; // Data type: Text.
    string url = 50; // Data type: URL.
  }
  Country country_of_origin = 51; // A country.
  oneof creative_work_status {
    string text = 52; // Data type: Text.
    DefinedTerm defined_term = 53; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 54; // A person (alive, dead, undead, or fictional).
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 56; // Data type: Text.
  string date_created = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 59; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 60; // Data type: URL.
  string edit_eidr = 61; // Data type: Text.
  Person editor = 62; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 63; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 64; // Data type: URL.
    string text = 65; // Data type: Text.
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 68; // Data type: Text.
  }
  MediaObject encoding = 69; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 70; // Data type: Text.
  MediaObject encodings = 71; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 72; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 73; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 74; // Data type: URL.
  oneof funder {
    Organization organization = 75; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 76; // A person (alive, dead, undead, or fictional).
  }
  string genre = 77; // Data type: URL.
  CreativeWork has_part = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 79; // Data type: Text.
  oneof in_language {
    string text = 80; // Data type: Text.
    Language language = 81; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 82; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 83; // Data type: Text.
  Claim interpreted_as_claim = 84; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 85; // Boolean: True or False.
  oneof is_based_on {
    string url = 86; // Data type: URL.
    Product product = 87; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 90; // Data type: URL.
    Product product = 91; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 92; // Boolean: True or False.
  oneof is_part_of {
    string url = 93; // Data type: URL.
    CreativeWork creative_work = 94; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 95; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 96; // Data type: URL.
    string text = 97; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 98; // Data type: Text.
    DefinedTerm defined_term = 99; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 100; // Data type: URL.
    CreativeWork creative_work = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 102; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 103; // The most generic type of item.
  oneof maintainer {
    Person person = 104; // A person (alive, dead, undead, or fictional).
    Organization organization = 105; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 106; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 107; // Data type: URL.
    string text = 108; // Data type: Text.
  }
  Thing mentions = 109; // The most generic type of item.
  oneof offers {
    Demand demand = 110; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 111; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 112; // Data type: Text.
    DefinedTerm defined_term = 113; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 114; // Data type: Text.
    float32 integer = 115; // Data type: Integer.
  }
  oneof producer {
    Person person = 116; // A person (alive, dead, undead, or fictional).
    Organization organization = 117; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 119; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 120; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 121; // A person (alive, dead, undead, or fictional).
    Organization organization = 122; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 123; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 124; // Data type: URL.
    CreativeWork creative_work = 125; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 126; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 127; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 128; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 129; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 130; // Data type: Text.
  string sd_date_published = 131; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 132; // Data type: URL.
    CreativeWork creative_work = 133; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 134; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 135; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 136; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 137; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 138; // Data type: Text.
    QuantitativeValue quantitative_value = 139; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 140; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 141; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 142; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 143; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 144; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 145; // Data type: Text.
    DefinedTerm defined_term = 146; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 147; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 148; // Data type: Text.
  string text = 149; // Data type: Text.
  string thumbnail_url = 150; // Data type: URL.
  Duration time_required = 151; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 152; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 155; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 156; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 157; // Data type: URL.
  }
  oneof version {
    string text = 158; // Data type: Text.
    float32 number = 159; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 160; // A video file.
    Clip clip = 161; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 164; // Data type: URL.
  string alternate_name = 165; // Data type: Text.
  string description = 166; // Data type: Text.
  string disambiguating_description = 167; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 168; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 169; // Data type: Text.
    string url = 170; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 171; // An image file.
    string url = 172; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 173; // Data type: URL.
    CreativeWork creative_work = 174; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 175; // Data type: Text.
  Action potential_action = 176; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 177; // Data type: URL.
  oneof subject_of {
    Event event = 178; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 180; // Data type: URL.
}
message OfferCatalog {
  // from OfferCatalog
  // inherited from ItemList
  oneof item_list_element {
    string text = 1; // Data type: Text.
    Thing thing = 2; // The most generic type of item.
    ListItem list_item = 3; // An list item, e.g. a step in a checklist or how-to description.
  }
  oneof item_list_order {
    ItemListOrderType item_list_order_type = 4; // Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
    string text = 5; // Data type: Text.
  }
  float32 number_of_items = 6; // Data type: Integer.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message Event {
  // from Event
  Thing about = 1; // The most generic type of item.
  Person actor = 2; // A person (alive, dead, undead, or fictional).
  AggregateRating aggregate_rating = 3; // The average rating based on multiple ratings or reviews.
  oneof attendee {
    Organization organization = 4; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 5; // A person (alive, dead, undead, or fictional).
  }
  oneof attendees {
    Organization organization = 6; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 7; // A person (alive, dead, undead, or fictional).
  }
  Audience audience = 8; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof composer {
    Organization organization = 9; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 10; // A person (alive, dead, undead, or fictional).
  }
  oneof contributor {
    Organization organization = 11; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 12; // A person (alive, dead, undead, or fictional).
  }
  Person director = 13; // A person (alive, dead, undead, or fictional).
  string door_time = 14; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  Duration duration = 15; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string end_date = 16; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  EventAttendanceModeEnumeration event_attendance_mode = 17; // An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
  Schedule event_schedule = 18; // A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.       This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also       have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
  EventStatusType event_status = 19; // EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
  oneof funder {
    Organization organization = 20; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 21; // A person (alive, dead, undead, or fictional).
  }
  oneof in_language {
    string text = 22; // Data type: Text.
    Language language = 23; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  bool is_accessible_for_free = 24; // Boolean: True or False.
  oneof location {
    PostalAddress postal_address = 25; // The mailing address.
    string text = 26; // Data type: Text.
    Place place = 27; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 28; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  float32 maximum_attendee_capacity = 29; // Data type: Integer.
  float32 maximum_physical_attendee_capacity = 30; // Data type: Integer.
  float32 maximum_virtual_attendee_capacity = 31; // Data type: Integer.
  oneof offers {
    Demand demand = 32; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 33; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof organizer {
    Person person = 34; // A person (alive, dead, undead, or fictional).
    Organization organization = 35; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof performer {
    Person person = 36; // A person (alive, dead, undead, or fictional).
    Organization organization = 37; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof performers {
    Organization organization = 38; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 39; // A person (alive, dead, undead, or fictional).
  }
  string previous_start_date = 40; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  CreativeWork recorded_in = 41; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  float32 remaining_attendee_capacity = 42; // Data type: Integer.
  Review review = 43; // A review of an item - for example, of a restaurant, movie, or store.
  oneof sponsor {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  string start_date = 46; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Event sub_event = 47; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event sub_events = 48; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event super_event = 49; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  oneof translator {
    Organization organization = 50; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 51; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 52; // Data type: Text.
  CreativeWork work_featured = 53; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_performed = 54; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 55; // Data type: URL.
  string alternate_name = 56; // Data type: Text.
  string description = 57; // Data type: Text.
  string disambiguating_description = 58; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 59; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 60; // Data type: Text.
    string url = 61; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 62; // An image file.
    string url = 63; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 64; // Data type: URL.
    CreativeWork creative_work = 65; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 66; // Data type: Text.
  Action potential_action = 67; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 68; // Data type: URL.
  oneof subject_of {
    Event event = 69; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 70; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 71; // Data type: URL.
}
message EventStatusType {
  // from EventStatusType
  // inherited from StatusEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Audience {
  // from Audience
  string audience_type = 1; // Data type: Text.
  AdministrativeArea geographic_area = 2; // A geographical region, typically under the jurisdiction of a particular government.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 3; // Data type: URL.
  string alternate_name = 4; // Data type: Text.
  string description = 5; // Data type: Text.
  string disambiguating_description = 6; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 7; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 8; // Data type: Text.
    string url = 9; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 10; // An image file.
    string url = 11; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 12; // Data type: URL.
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 14; // Data type: Text.
  Action potential_action = 15; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 16; // Data type: URL.
  oneof subject_of {
    Event event = 17; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 19; // Data type: URL.
}
message EventAttendanceModeEnumeration {
  // from EventAttendanceModeEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Schedule {
  // from Schedule
  oneof by_day {
    string text = 1; // Data type: Text.
    DayOfWeek day_of_week = 2; // The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.  Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.       
  }
  float32 by_month = 3; // Data type: Integer.
  float32 by_month_day = 4; // Data type: Integer.
  float32 by_month_week = 5; // Data type: Integer.
  Duration duration = 6; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string end_date = 7; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string end_time = 8; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string except_date = 9; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  float32 repeat_count = 10; // Data type: Integer.
  oneof repeat_frequency {
    string text = 11; // Data type: Text.
    Duration duration = 12; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  }
  string schedule_timezone = 13; // Data type: Text.
  string start_date = 14; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string start_time = 15; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 16; // Data type: URL.
  string alternate_name = 17; // Data type: Text.
  string description = 18; // Data type: Text.
  string disambiguating_description = 19; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 20; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 21; // Data type: Text.
    string url = 22; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 23; // An image file.
    string url = 24; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 25; // Data type: URL.
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 27; // Data type: Text.
  Action potential_action = 28; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 29; // Data type: URL.
  oneof subject_of {
    Event event = 30; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 31; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 32; // Data type: URL.
}
message OwnershipInfo {
  // from OwnershipInfo
  oneof acquired_from {
    Person person = 1; // A person (alive, dead, undead, or fictional).
    Organization organization = 2; // An organization such as a school, NGO, corporation, club, etc.
  }
  string owned_from = 3; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string owned_through = 4; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof type_of_good {
    Service service = 5; // A service provided by an organization, e.g. delivery service, print services, etc.
    Product product = 6; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message AlignmentObject {
  // from AlignmentObject
  string alignment_type = 1; // Data type: Text.
  string educational_framework = 2; // Data type: Text.
  string target_description = 3; // Data type: Text.
  string target_name = 4; // Data type: Text.
  string target_url = 5; // Data type: URL.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 6; // Data type: URL.
  string alternate_name = 7; // Data type: Text.
  string description = 8; // Data type: Text.
  string disambiguating_description = 9; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 11; // Data type: Text.
    string url = 12; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 13; // An image file.
    string url = 14; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 15; // Data type: URL.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 17; // Data type: Text.
  Action potential_action = 18; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 19; // Data type: URL.
  oneof subject_of {
    Event event = 20; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 22; // Data type: URL.
}
message Comment {
  // from Comment
  float32 downvote_count = 1; // Data type: Integer.
  Comment parent_item = 2; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 upvote_count = 3; // Data type: Integer.
  // inherited from CreativeWork
  oneof object_object {
    string text = 4; // Data type: Text.
    QuantitativeValue quantitative_value = 5; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 6; // The most generic type of item.
  string abstract = 7; // Data type: Text.
  string access_mode = 8; // Data type: Text.
  ItemList access_mode_sufficient = 9; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 10; // Data type: Text.
  string accessibility_control = 11; // Data type: Text.
  string accessibility_feature = 12; // Data type: Text.
  string accessibility_hazard = 13; // Data type: Text.
  string accessibility_summary = 14; // Data type: Text.
  Person accountable_person = 15; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 17; // Data type: URL.
  }
  AggregateRating aggregate_rating = 18; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 19; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 20; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 21; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 22; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 23; // Data type: Text.
  }
  MediaObject associated_media = 24; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 25; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 26; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 27; // An audio file.
    MusicRecording music_recording = 28; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 29; // A person (alive, dead, undead, or fictional).
    Organization organization = 30; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 31; // Data type: Text.
  string awards = 32; // Data type: Text.
  Person character = 33; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 34; // Data type: Text.
    CreativeWork creative_work = 35; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 36; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 37; // Data type: Integer.
  string conditions_of_access = 38; // Data type: Text.
  Place content_location = 39; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 40; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 41; // Data type: Text.
  }
  string content_reference_time = 42; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 45; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 46; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 47; // Data type: Text.
  float32 copyright_year = 48; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 49; // A [[comment]] that corrects [[CreativeWork]].
    string text = 50; // Data type: Text.
    string url = 51; // Data type: URL.
  }
  Country country_of_origin = 52; // A country.
  oneof creative_work_status {
    string text = 53; // Data type: Text.
    DefinedTerm defined_term = 54; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 55; // A person (alive, dead, undead, or fictional).
    Organization organization = 56; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 57; // Data type: Text.
  string date_created = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 60; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 61; // Data type: URL.
  string edit_eidr = 62; // Data type: Text.
  Person editor = 63; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 64; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 65; // Data type: URL.
    string text = 66; // Data type: Text.
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 69; // Data type: Text.
  }
  MediaObject encoding = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 71; // Data type: Text.
  MediaObject encodings = 72; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 74; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 75; // Data type: URL.
  oneof funder {
    Organization organization = 76; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 77; // A person (alive, dead, undead, or fictional).
  }
  string genre = 78; // Data type: URL.
  CreativeWork has_part = 79; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 80; // Data type: Text.
  oneof in_language {
    string text = 81; // Data type: Text.
    Language language = 82; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 83; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 84; // Data type: Text.
  Claim interpreted_as_claim = 85; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 86; // Boolean: True or False.
  oneof is_based_on {
    string url = 87; // Data type: URL.
    Product product = 88; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 91; // Data type: URL.
    Product product = 92; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 93; // Boolean: True or False.
  oneof is_part_of {
    string url = 94; // Data type: URL.
    CreativeWork creative_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 96; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 97; // Data type: URL.
    string text = 98; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 99; // Data type: Text.
    DefinedTerm defined_term = 100; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 101; // Data type: URL.
    CreativeWork creative_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 103; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 104; // The most generic type of item.
  oneof maintainer {
    Person person = 105; // A person (alive, dead, undead, or fictional).
    Organization organization = 106; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 107; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 108; // Data type: URL.
    string text = 109; // Data type: Text.
  }
  Thing mentions = 110; // The most generic type of item.
  oneof offers {
    Demand demand = 111; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 112; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 113; // Data type: Text.
    DefinedTerm defined_term = 114; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 115; // Data type: Text.
    float32 integer = 116; // Data type: Integer.
  }
  oneof producer {
    Person person = 117; // A person (alive, dead, undead, or fictional).
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 119; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 120; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 121; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 122; // A person (alive, dead, undead, or fictional).
    Organization organization = 123; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 124; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 125; // Data type: URL.
    CreativeWork creative_work = 126; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 127; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 128; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 129; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 130; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 131; // Data type: Text.
  string sd_date_published = 132; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 133; // Data type: URL.
    CreativeWork creative_work = 134; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 136; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 137; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 138; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 139; // Data type: Text.
    QuantitativeValue quantitative_value = 140; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 141; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 142; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 143; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 146; // Data type: Text.
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 148; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 149; // Data type: Text.
  string text = 150; // Data type: Text.
  string thumbnail_url = 151; // Data type: URL.
  Duration time_required = 152; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 153; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 156; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 157; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 158; // Data type: URL.
  }
  oneof version {
    string text = 159; // Data type: Text.
    float32 number = 160; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 161; // A video file.
    Clip clip = 162; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 164; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 165; // Data type: URL.
  string alternate_name = 166; // Data type: Text.
  string description = 167; // Data type: Text.
  string disambiguating_description = 168; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 169; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 170; // Data type: Text.
    string url = 171; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 172; // An image file.
    string url = 173; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 174; // Data type: URL.
    CreativeWork creative_work = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 176; // Data type: Text.
  Action potential_action = 177; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 178; // Data type: URL.
  oneof subject_of {
    Event event = 179; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 180; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 181; // Data type: URL.
}
message Clip {
  // from Clip
  Person actor = 1; // A person (alive, dead, undead, or fictional).
  Person actors = 2; // A person (alive, dead, undead, or fictional).
  oneof clip_number {
    float32 integer = 3; // Data type: Integer.
    string text = 4; // Data type: Text.
  }
  Person director = 5; // A person (alive, dead, undead, or fictional).
  Person directors = 6; // A person (alive, dead, undead, or fictional).
  oneof end_offset {
    float32 number = 7; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    HyperTocEntry hyper_toc_entry = 8; // A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
  }
  oneof music_by {
    Person person = 9; // A person (alive, dead, undead, or fictional).
    MusicGroup music_group = 10; // A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
  }
  Episode part_of_episode = 11; // A media episode (e.g. TV, radio, video game) which can be part of a series or season.
  CreativeWorkSeason part_of_season = 12; // A media season e.g. tv, radio, video game etc.
  CreativeWorkSeries part_of_series = 13; // A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate. 	  
  oneof start_offset {
    float32 number = 14; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    HyperTocEntry hyper_toc_entry = 15; // A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
  }
  // inherited from CreativeWork
  oneof object_object {
    string text = 16; // Data type: Text.
    QuantitativeValue quantitative_value = 17; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 18; // The most generic type of item.
  string abstract = 19; // Data type: Text.
  string access_mode = 20; // Data type: Text.
  ItemList access_mode_sufficient = 21; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 22; // Data type: Text.
  string accessibility_control = 23; // Data type: Text.
  string accessibility_feature = 24; // Data type: Text.
  string accessibility_hazard = 25; // Data type: Text.
  string accessibility_summary = 26; // Data type: Text.
  Person accountable_person = 27; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 28; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 29; // Data type: URL.
  }
  AggregateRating aggregate_rating = 30; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 31; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 32; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 33; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 34; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 35; // Data type: Text.
  }
  MediaObject associated_media = 36; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 37; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 38; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 39; // An audio file.
    MusicRecording music_recording = 40; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 41; // A person (alive, dead, undead, or fictional).
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 43; // Data type: Text.
  string awards = 44; // Data type: Text.
  Person character = 45; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 46; // Data type: Text.
    CreativeWork creative_work = 47; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 48; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 49; // Data type: Integer.
  string conditions_of_access = 50; // Data type: Text.
  Place content_location = 51; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 52; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 53; // Data type: Text.
  }
  string content_reference_time = 54; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 56; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 57; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 58; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 59; // Data type: Text.
  float32 copyright_year = 60; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 61; // A [[comment]] that corrects [[CreativeWork]].
    string text = 62; // Data type: Text.
    string url = 63; // Data type: URL.
  }
  Country country_of_origin = 64; // A country.
  oneof creative_work_status {
    string text = 65; // Data type: Text.
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 67; // A person (alive, dead, undead, or fictional).
    Organization organization = 68; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 69; // Data type: Text.
  string date_created = 70; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 71; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 72; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 73; // Data type: URL.
  string edit_eidr = 74; // Data type: Text.
  Person editor = 75; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 76; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 77; // Data type: URL.
    string text = 78; // Data type: Text.
    DefinedTerm defined_term = 79; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 80; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 81; // Data type: Text.
  }
  MediaObject encoding = 82; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 83; // Data type: Text.
  MediaObject encodings = 84; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 85; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 86; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 87; // Data type: URL.
  oneof funder {
    Organization organization = 88; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 89; // A person (alive, dead, undead, or fictional).
  }
  string genre = 90; // Data type: URL.
  CreativeWork has_part = 91; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 92; // Data type: Text.
  oneof in_language {
    string text = 93; // Data type: Text.
    Language language = 94; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 95; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 96; // Data type: Text.
  Claim interpreted_as_claim = 97; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 98; // Boolean: True or False.
  oneof is_based_on {
    string url = 99; // Data type: URL.
    Product product = 100; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 103; // Data type: URL.
    Product product = 104; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 105; // Boolean: True or False.
  oneof is_part_of {
    string url = 106; // Data type: URL.
    CreativeWork creative_work = 107; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 108; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 109; // Data type: URL.
    string text = 110; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 111; // Data type: Text.
    DefinedTerm defined_term = 112; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 113; // Data type: URL.
    CreativeWork creative_work = 114; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 115; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 116; // The most generic type of item.
  oneof maintainer {
    Person person = 117; // A person (alive, dead, undead, or fictional).
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 119; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 120; // Data type: URL.
    string text = 121; // Data type: Text.
  }
  Thing mentions = 122; // The most generic type of item.
  oneof offers {
    Demand demand = 123; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 124; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 125; // Data type: Text.
    DefinedTerm defined_term = 126; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 127; // Data type: Text.
    float32 integer = 128; // Data type: Integer.
  }
  oneof producer {
    Person person = 129; // A person (alive, dead, undead, or fictional).
    Organization organization = 130; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 131; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 132; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 133; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 134; // A person (alive, dead, undead, or fictional).
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 136; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 137; // Data type: URL.
    CreativeWork creative_work = 138; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 139; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 140; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 141; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 142; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 143; // Data type: Text.
  string sd_date_published = 144; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 145; // Data type: URL.
    CreativeWork creative_work = 146; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 147; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 148; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 149; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 150; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 151; // Data type: Text.
    QuantitativeValue quantitative_value = 152; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 153; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 154; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 155; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 156; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 157; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 158; // Data type: Text.
    DefinedTerm defined_term = 159; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 160; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 161; // Data type: Text.
  string text = 162; // Data type: Text.
  string thumbnail_url = 163; // Data type: URL.
  Duration time_required = 164; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 165; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 166; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 167; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 168; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 169; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 170; // Data type: URL.
  }
  oneof version {
    string text = 171; // Data type: Text.
    float32 number = 172; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 173; // A video file.
    Clip clip = 174; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 176; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 177; // Data type: URL.
  string alternate_name = 178; // Data type: Text.
  string description = 179; // Data type: Text.
  string disambiguating_description = 180; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 181; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 182; // Data type: Text.
    string url = 183; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 184; // An image file.
    string url = 185; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 186; // Data type: URL.
    CreativeWork creative_work = 187; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 188; // Data type: Text.
  Action potential_action = 189; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 190; // Data type: URL.
  oneof subject_of {
    Event event = 191; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 192; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 193; // Data type: URL.
}
message CreativeWorkSeason {
  // from CreativeWorkSeason
  Person actor = 1; // A person (alive, dead, undead, or fictional).
  Person director = 2; // A person (alive, dead, undead, or fictional).
  string end_date = 3; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  Episode episode = 4; // A media episode (e.g. TV, radio, video game) which can be part of a series or season.
  Episode episodes = 5; // A media episode (e.g. TV, radio, video game) which can be part of a series or season.
  float32 number_of_episodes = 6; // Data type: Integer.
  CreativeWorkSeries part_of_series = 7; // A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate. 	  
  Organization production_company = 8; // An organization such as a school, NGO, corporation, club, etc.
  oneof season_number {
    string text = 9; // Data type: Text.
    float32 integer = 10; // Data type: Integer.
  }
  string start_date = 11; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  VideoObject trailer = 12; // A video file.
  // inherited from CreativeWork
  oneof object_object {
    string text = 13; // Data type: Text.
    QuantitativeValue quantitative_value = 14; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 15; // The most generic type of item.
  string abstract = 16; // Data type: Text.
  string access_mode = 17; // Data type: Text.
  ItemList access_mode_sufficient = 18; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 19; // Data type: Text.
  string accessibility_control = 20; // Data type: Text.
  string accessibility_feature = 21; // Data type: Text.
  string accessibility_hazard = 22; // Data type: Text.
  string accessibility_summary = 23; // Data type: Text.
  Person accountable_person = 24; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 26; // Data type: URL.
  }
  AggregateRating aggregate_rating = 27; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 28; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 29; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 30; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 31; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 32; // Data type: Text.
  }
  MediaObject associated_media = 33; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 34; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 35; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 36; // An audio file.
    MusicRecording music_recording = 37; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 38; // A person (alive, dead, undead, or fictional).
    Organization organization = 39; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 40; // Data type: Text.
  string awards = 41; // Data type: Text.
  Person character = 42; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 43; // Data type: Text.
    CreativeWork creative_work = 44; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 45; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 46; // Data type: Integer.
  string conditions_of_access = 47; // Data type: Text.
  Place content_location = 48; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 49; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 50; // Data type: Text.
  }
  string content_reference_time = 51; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 52; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 53; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 55; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 56; // Data type: Text.
  float32 copyright_year = 57; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 58; // A [[comment]] that corrects [[CreativeWork]].
    string text = 59; // Data type: Text.
    string url = 60; // Data type: URL.
  }
  Country country_of_origin = 61; // A country.
  oneof creative_work_status {
    string text = 62; // Data type: Text.
    DefinedTerm defined_term = 63; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 64; // A person (alive, dead, undead, or fictional).
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 66; // Data type: Text.
  string date_created = 67; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 69; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 70; // Data type: URL.
  string edit_eidr = 71; // Data type: Text.
  Person editor = 72; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 73; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 74; // Data type: URL.
    string text = 75; // Data type: Text.
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 78; // Data type: Text.
  }
  MediaObject encoding = 79; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 80; // Data type: Text.
  MediaObject encodings = 81; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 82; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 83; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 84; // Data type: URL.
  oneof funder {
    Organization organization = 85; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 86; // A person (alive, dead, undead, or fictional).
  }
  string genre = 87; // Data type: URL.
  CreativeWork has_part = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 89; // Data type: Text.
  oneof in_language {
    string text = 90; // Data type: Text.
    Language language = 91; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 92; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 93; // Data type: Text.
  Claim interpreted_as_claim = 94; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 95; // Boolean: True or False.
  oneof is_based_on {
    string url = 96; // Data type: URL.
    Product product = 97; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 98; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 100; // Data type: URL.
    Product product = 101; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 102; // Boolean: True or False.
  oneof is_part_of {
    string url = 103; // Data type: URL.
    CreativeWork creative_work = 104; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 105; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 108; // Data type: Text.
    DefinedTerm defined_term = 109; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 110; // Data type: URL.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 112; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 113; // The most generic type of item.
  oneof maintainer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 116; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 117; // Data type: URL.
    string text = 118; // Data type: Text.
  }
  Thing mentions = 119; // The most generic type of item.
  oneof offers {
    Demand demand = 120; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 121; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 122; // Data type: Text.
    DefinedTerm defined_term = 123; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 124; // Data type: Text.
    float32 integer = 125; // Data type: Integer.
  }
  oneof producer {
    Person person = 126; // A person (alive, dead, undead, or fictional).
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 129; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 130; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 131; // A person (alive, dead, undead, or fictional).
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 133; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 134; // Data type: URL.
    CreativeWork creative_work = 135; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 136; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 137; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 138; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 139; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 140; // Data type: Text.
  string sd_date_published = 141; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 142; // Data type: URL.
    CreativeWork creative_work = 143; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 146; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 148; // Data type: Text.
    QuantitativeValue quantitative_value = 149; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 150; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 151; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 152; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 155; // Data type: Text.
    DefinedTerm defined_term = 156; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 157; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 158; // Data type: Text.
  string text = 159; // Data type: Text.
  string thumbnail_url = 160; // Data type: URL.
  Duration time_required = 161; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 163; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 164; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 165; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 166; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 167; // Data type: URL.
  }
  oneof version {
    string text = 168; // Data type: Text.
    float32 number = 169; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 170; // A video file.
    Clip clip = 171; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 174; // Data type: URL.
  string alternate_name = 175; // Data type: Text.
  string description = 176; // Data type: Text.
  string disambiguating_description = 177; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 178; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 179; // Data type: Text.
    string url = 180; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 181; // An image file.
    string url = 182; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 183; // Data type: URL.
    CreativeWork creative_work = 184; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 185; // Data type: Text.
  Action potential_action = 186; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 187; // Data type: URL.
  oneof subject_of {
    Event event = 188; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 189; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 190; // Data type: URL.
}
message VideoObject {
  // from VideoObject
  Person actor = 1; // A person (alive, dead, undead, or fictional).
  Person actors = 2; // A person (alive, dead, undead, or fictional).
  oneof caption {
    MediaObject media_object = 3; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
    string text = 4; // Data type: Text.
  }
  Person director = 5; // A person (alive, dead, undead, or fictional).
  Person directors = 6; // A person (alive, dead, undead, or fictional).
  string embedded_text_caption = 7; // Data type: Text.
  oneof music_by {
    Person person = 8; // A person (alive, dead, undead, or fictional).
    MusicGroup music_group = 9; // A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
  }
  ImageObject thumbnail = 10; // An image file.
  string transcript = 11; // Data type: Text.
  string video_frame_size = 12; // Data type: Text.
  string video_quality = 13; // Data type: Text.
  // inherited from MediaObject
  NewsArticle associated_article = 14; // A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.  A more detailed overview of [schema.org News markup](/docs/news.html) is also available. 
  string bitrate = 15; // Data type: Text.
  string content_size = 16; // Data type: Text.
  string content_url = 17; // Data type: URL.
  Duration duration = 18; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string embed_url = 19; // Data type: URL.
  CreativeWork encodes_creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string encoding_format = 21; // Data type: Text.
  string end_time = 22; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof height {
    QuantitativeValue quantitative_value = 23; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 24; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  oneof ineligible_region {
    Place place = 25; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 26; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 27; // Data type: Text.
  }
  Claim interpreted_as_claim = 28; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  string player_type = 29; // Data type: Text.
  Organization production_company = 30; // An organization such as a school, NGO, corporation, club, etc.
  Place regions_allowed = 31; // Entities that have a somewhat fixed, physical extension.
  oneof requires_subscription {
    bool boolean = 32; // Boolean: True or False.
    MediaSubscription media_subscription = 33; // A subscription which allows a user to access media including audio, video, books, etc.
  }
  string sha_256 = 34; // Data type: Text.
  string start_time = 35; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string upload_date = 36; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof width {
    Distance distance = 37; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 38; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from CreativeWork
  oneof object_object {
    string text = 39; // Data type: Text.
    QuantitativeValue quantitative_value = 40; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 41; // The most generic type of item.
  string abstract = 42; // Data type: Text.
  string access_mode = 43; // Data type: Text.
  ItemList access_mode_sufficient = 44; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 45; // Data type: Text.
  string accessibility_control = 46; // Data type: Text.
  string accessibility_feature = 47; // Data type: Text.
  string accessibility_hazard = 48; // Data type: Text.
  string accessibility_summary = 49; // Data type: Text.
  Person accountable_person = 50; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 51; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 52; // Data type: URL.
  }
  AggregateRating aggregate_rating = 53; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 54; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 55; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 56; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 57; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 58; // Data type: Text.
  }
  MediaObject associated_media = 59; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 60; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 61; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 62; // An audio file.
    MusicRecording music_recording = 63; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 64; // A person (alive, dead, undead, or fictional).
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 66; // Data type: Text.
  string awards = 67; // Data type: Text.
  Person character = 68; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 69; // Data type: Text.
    CreativeWork creative_work = 70; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 71; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 72; // Data type: Integer.
  string conditions_of_access = 73; // Data type: Text.
  Place content_location = 74; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 75; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 76; // Data type: Text.
  }
  string content_reference_time = 77; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 78; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 79; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 80; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 81; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 82; // Data type: Text.
  float32 copyright_year = 83; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 84; // A [[comment]] that corrects [[CreativeWork]].
    string text = 85; // Data type: Text.
    string url = 86; // Data type: URL.
  }
  Country country_of_origin = 87; // A country.
  oneof creative_work_status {
    string text = 88; // Data type: Text.
    DefinedTerm defined_term = 89; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 90; // A person (alive, dead, undead, or fictional).
    Organization organization = 91; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 92; // Data type: Text.
  string date_created = 93; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 94; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 95; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 96; // Data type: URL.
  string edit_eidr = 97; // Data type: Text.
  Person editor = 98; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 99; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 100; // Data type: URL.
    string text = 101; // Data type: Text.
    DefinedTerm defined_term = 102; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 103; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 104; // Data type: Text.
  }
  MediaObject encoding = 105; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 106; // Data type: Text.
  MediaObject encodings = 107; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 108; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 109; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 110; // Data type: URL.
  oneof funder {
    Organization organization = 111; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 112; // A person (alive, dead, undead, or fictional).
  }
  string genre = 113; // Data type: URL.
  CreativeWork has_part = 114; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 115; // Data type: Text.
  oneof in_language {
    string text = 116; // Data type: Text.
    Language language = 117; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 118; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 119; // Data type: Text.
  Claim interpreted_as_claim = 120; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 121; // Boolean: True or False.
  oneof is_based_on {
    string url = 122; // Data type: URL.
    Product product = 123; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 125; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 126; // Data type: URL.
    Product product = 127; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 128; // Boolean: True or False.
  oneof is_part_of {
    string url = 129; // Data type: URL.
    CreativeWork creative_work = 130; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 131; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 132; // Data type: URL.
    string text = 133; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 134; // Data type: Text.
    DefinedTerm defined_term = 135; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 136; // Data type: URL.
    CreativeWork creative_work = 137; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 138; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 139; // The most generic type of item.
  oneof maintainer {
    Person person = 140; // A person (alive, dead, undead, or fictional).
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 142; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 143; // Data type: URL.
    string text = 144; // Data type: Text.
  }
  Thing mentions = 145; // The most generic type of item.
  oneof offers {
    Demand demand = 146; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 147; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 148; // Data type: Text.
    DefinedTerm defined_term = 149; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 150; // Data type: Text.
    float32 integer = 151; // Data type: Integer.
  }
  oneof producer {
    Person person = 152; // A person (alive, dead, undead, or fictional).
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 156; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 157; // A person (alive, dead, undead, or fictional).
    Organization organization = 158; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 159; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 160; // Data type: URL.
    CreativeWork creative_work = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 162; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 163; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 164; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 165; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 166; // Data type: Text.
  string sd_date_published = 167; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 168; // Data type: URL.
    CreativeWork creative_work = 169; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 170; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 171; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 172; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 173; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 174; // Data type: Text.
    QuantitativeValue quantitative_value = 175; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 176; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 177; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 178; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 179; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 180; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 181; // Data type: Text.
    DefinedTerm defined_term = 182; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 183; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 184; // Data type: Text.
  string text = 185; // Data type: Text.
  string thumbnail_url = 186; // Data type: URL.
  Duration time_required = 187; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 188; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 189; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 190; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 191; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 192; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 193; // Data type: URL.
  }
  oneof version {
    string text = 194; // Data type: Text.
    float32 number = 195; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 196; // A video file.
    Clip clip = 197; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 198; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 199; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 200; // Data type: URL.
  string alternate_name = 201; // Data type: Text.
  string description = 202; // Data type: Text.
  string disambiguating_description = 203; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 204; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 205; // Data type: Text.
    string url = 206; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 207; // An image file.
    string url = 208; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 209; // Data type: URL.
    CreativeWork creative_work = 210; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 211; // Data type: Text.
  Action potential_action = 212; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 213; // Data type: URL.
  oneof subject_of {
    Event event = 214; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 215; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 216; // Data type: URL.
}
message MusicGroup {
  // from MusicGroup
  MusicAlbum album = 1; // A collection of music tracks.
  MusicAlbum albums = 2; // A collection of music tracks.
  string genre = 3; // Data type: URL.
  Person music_group_member = 4; // A person (alive, dead, undead, or fictional).
  oneof track {
    MusicRecording music_recording = 5; // A music recording (track), usually a single song.
    ItemList item_list = 6; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  }
  MusicRecording tracks = 7; // A music recording (track), usually a single song.
  // inherited from PerformingGroup
  // inherited from Organization
  oneof actionable_feedback_policy {
    CreativeWork creative_work = 8; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 9; // Data type: URL.
  }
  oneof address {
    PostalAddress postal_address = 10; // The mailing address.
    string text = 11; // Data type: Text.
  }
  AggregateRating aggregate_rating = 12; // The average rating based on multiple ratings or reviews.
  Person alumni = 13; // A person (alive, dead, undead, or fictional).
  oneof area_served {
    string text = 14; // Data type: Text.
    GeoShape geo_shape = 15; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 16; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 17; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string award = 18; // Data type: Text.
  string awards = 19; // Data type: Text.
  oneof brand {
    Organization organization = 20; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 21; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  ContactPoint contact_point = 22; // A contact point&#x2014;for example, a Customer Complaints department.
  ContactPoint contact_points = 23; // A contact point&#x2014;for example, a Customer Complaints department.
  oneof corrections_policy {
    string url = 24; // Data type: URL.
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Organization department = 26; // An organization such as a school, NGO, corporation, club, etc.
  string dissolution_date = 27; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof diversity_policy {
    CreativeWork creative_work = 28; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 29; // Data type: URL.
  }
  oneof diversity_staffing_report {
    string url = 30; // Data type: URL.
    Article article = 31; // An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
  }
  string duns = 32; // Data type: Text.
  string email = 33; // Data type: Text.
  Person employee = 34; // A person (alive, dead, undead, or fictional).
  Person employees = 35; // A person (alive, dead, undead, or fictional).
  oneof ethics_policy {
    CreativeWork creative_work = 36; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 37; // Data type: URL.
  }
  Event event = 38; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event events = 39; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  string fax_number = 40; // Data type: Text.
  Person founder = 41; // A person (alive, dead, undead, or fictional).
  Person founders = 42; // A person (alive, dead, undead, or fictional).
  string founding_date = 43; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Place founding_location = 44; // Entities that have a somewhat fixed, physical extension.
  oneof funder {
    Organization organization = 45; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 46; // A person (alive, dead, undead, or fictional).
  }
  string global_location_number = 47; // Data type: Text.
  EducationalOccupationalCredential has_credential = 48; // An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
  MerchantReturnPolicy has_merchant_return_policy = 49; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  OfferCatalog has_offer_catalog = 50; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  Place has_pos = 51; // Entities that have a somewhat fixed, physical extension.
  InteractionCounter interaction_statistic = 52; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string isic_v_4 = 53; // Data type: Text.
  oneof knows_about {
    string url = 54; // Data type: URL.
    string text = 55; // Data type: Text.
    Thing thing = 56; // The most generic type of item.
  }
  oneof knows_language {
    Language language = 57; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
    string text = 58; // Data type: Text.
  }
  string legal_name = 59; // Data type: Text.
  string lei_code = 60; // Data type: Text.
  oneof location {
    PostalAddress postal_address = 61; // The mailing address.
    string text = 62; // Data type: Text.
    Place place = 63; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 64; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  oneof logo {
    string url = 65; // Data type: URL.
    ImageObject image_object = 66; // An image file.
  }
  Offer makes_offer = 67; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  oneof member {
    Organization organization = 68; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 69; // A person (alive, dead, undead, or fictional).
  }
  oneof member_of {
    ProgramMembership program_membership = 70; // Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
    Organization organization = 71; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof members {
    Person person = 72; // A person (alive, dead, undead, or fictional).
    Organization organization = 73; // An organization such as a school, NGO, corporation, club, etc.
  }
  string naics = 74; // Data type: Text.
  NonprofitType nonprofit_status = 75; // NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
  QuantitativeValue number_of_employees = 76; //  A point value or interval for product characteristics and other purposes.
  oneof ownership_funding_info {
    AboutPage about_page = 77; // Web page type: About page.
    string url = 78; // Data type: URL.
    string text = 79; // Data type: Text.
    CreativeWork creative_work = 80; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof owns {
    Product product = 81; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    OwnershipInfo ownership_info = 82; // A structured value providing information about when a certain organization or person owned a certain product.
  }
  Organization parent_organization = 83; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 84; // Data type: URL.
    CreativeWork creative_work = 85; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Review review = 86; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 87; // A review of an item - for example, of a restaurant, movie, or store.
  Demand seeks = 88; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
  oneof service_area {
    GeoShape geo_shape = 89; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 90; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 91; // A geographical region, typically under the jurisdiction of a particular government.
  }
  string slogan = 92; // Data type: Text.
  oneof sponsor {
    Organization organization = 93; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 94; // A person (alive, dead, undead, or fictional).
  }
  Organization sub_organization = 95; // An organization such as a school, NGO, corporation, club, etc.
  string tax_id = 96; // Data type: Text.
  string telephone = 97; // Data type: Text.
  oneof unnamed_sources_policy {
    string url = 98; // Data type: URL.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string vat_id = 100; // Data type: Text.
  // inherited from Thing
  string additional_type = 101; // Data type: URL.
  string alternate_name = 102; // Data type: Text.
  string description = 103; // Data type: Text.
  string disambiguating_description = 104; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 105; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 106; // Data type: Text.
    string url = 107; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 108; // An image file.
    string url = 109; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 110; // Data type: URL.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 112; // Data type: Text.
  Action potential_action = 113; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 114; // Data type: URL.
  oneof subject_of {
    Event event = 115; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 116; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 117; // Data type: URL.
}
message MusicAlbum {
  // from MusicAlbum
  MusicAlbumProductionType album_production_type = 1; // Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
  MusicRelease album_release = 2; // A MusicRelease is a specific release of a music album.
  MusicAlbumReleaseType album_release_type = 3; // The kind of release which this album is: single, EP or album.
  oneof by_artist {
    MusicGroup music_group = 4; // A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
    Person person = 5; // A person (alive, dead, undead, or fictional).
  }
  // inherited from MusicPlaylist
  float32 num_tracks = 6; // Data type: Integer.
  oneof track {
    MusicRecording music_recording = 7; // A music recording (track), usually a single song.
    ItemList item_list = 8; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  }
  MusicRecording tracks = 9; // A music recording (track), usually a single song.
  // inherited from CreativeWork
  oneof object_object {
    string text = 10; // Data type: Text.
    QuantitativeValue quantitative_value = 11; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 12; // The most generic type of item.
  string abstract = 13; // Data type: Text.
  string access_mode = 14; // Data type: Text.
  ItemList access_mode_sufficient = 15; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 16; // Data type: Text.
  string accessibility_control = 17; // Data type: Text.
  string accessibility_feature = 18; // Data type: Text.
  string accessibility_hazard = 19; // Data type: Text.
  string accessibility_summary = 20; // Data type: Text.
  Person accountable_person = 21; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 23; // Data type: URL.
  }
  AggregateRating aggregate_rating = 24; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 25; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 26; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 27; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 28; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 29; // Data type: Text.
  }
  MediaObject associated_media = 30; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 31; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 32; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 33; // An audio file.
    MusicRecording music_recording = 34; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 35; // A person (alive, dead, undead, or fictional).
    Organization organization = 36; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 37; // Data type: Text.
  string awards = 38; // Data type: Text.
  Person character = 39; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 40; // Data type: Text.
    CreativeWork creative_work = 41; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 42; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 43; // Data type: Integer.
  string conditions_of_access = 44; // Data type: Text.
  Place content_location = 45; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 46; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 47; // Data type: Text.
  }
  string content_reference_time = 48; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 49; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 50; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 51; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 52; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 53; // Data type: Text.
  float32 copyright_year = 54; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 55; // A [[comment]] that corrects [[CreativeWork]].
    string text = 56; // Data type: Text.
    string url = 57; // Data type: URL.
  }
  Country country_of_origin = 58; // A country.
  oneof creative_work_status {
    string text = 59; // Data type: Text.
    DefinedTerm defined_term = 60; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 61; // A person (alive, dead, undead, or fictional).
    Organization organization = 62; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 63; // Data type: Text.
  string date_created = 64; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 65; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 66; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 67; // Data type: URL.
  string edit_eidr = 68; // Data type: Text.
  Person editor = 69; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 70; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 71; // Data type: URL.
    string text = 72; // Data type: Text.
    DefinedTerm defined_term = 73; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 74; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 75; // Data type: Text.
  }
  MediaObject encoding = 76; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 77; // Data type: Text.
  MediaObject encodings = 78; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 79; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 80; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 81; // Data type: URL.
  oneof funder {
    Organization organization = 82; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 83; // A person (alive, dead, undead, or fictional).
  }
  string genre = 84; // Data type: URL.
  CreativeWork has_part = 85; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 86; // Data type: Text.
  oneof in_language {
    string text = 87; // Data type: Text.
    Language language = 88; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 89; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 90; // Data type: Text.
  Claim interpreted_as_claim = 91; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 92; // Boolean: True or False.
  oneof is_based_on {
    string url = 93; // Data type: URL.
    Product product = 94; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 96; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 97; // Data type: URL.
    Product product = 98; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 99; // Boolean: True or False.
  oneof is_part_of {
    string url = 100; // Data type: URL.
    CreativeWork creative_work = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 102; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 103; // Data type: URL.
    string text = 104; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 105; // Data type: Text.
    DefinedTerm defined_term = 106; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 107; // Data type: URL.
    CreativeWork creative_work = 108; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 109; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 110; // The most generic type of item.
  oneof maintainer {
    Person person = 111; // A person (alive, dead, undead, or fictional).
    Organization organization = 112; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 113; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 114; // Data type: URL.
    string text = 115; // Data type: Text.
  }
  Thing mentions = 116; // The most generic type of item.
  oneof offers {
    Demand demand = 117; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 118; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 119; // Data type: Text.
    DefinedTerm defined_term = 120; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 121; // Data type: Text.
    float32 integer = 122; // Data type: Integer.
  }
  oneof producer {
    Person person = 123; // A person (alive, dead, undead, or fictional).
    Organization organization = 124; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 125; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 126; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 127; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 128; // A person (alive, dead, undead, or fictional).
    Organization organization = 129; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 130; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 131; // Data type: URL.
    CreativeWork creative_work = 132; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 133; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 134; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 135; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 136; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 137; // Data type: Text.
  string sd_date_published = 138; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 139; // Data type: URL.
    CreativeWork creative_work = 140; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 141; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 142; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 143; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 144; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 145; // Data type: Text.
    QuantitativeValue quantitative_value = 146; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 147; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 148; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 149; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 150; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 151; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 152; // Data type: Text.
    DefinedTerm defined_term = 153; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 154; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 155; // Data type: Text.
  string text = 156; // Data type: Text.
  string thumbnail_url = 157; // Data type: URL.
  Duration time_required = 158; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 159; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 160; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 161; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 162; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 164; // Data type: URL.
  }
  oneof version {
    string text = 165; // Data type: Text.
    float32 number = 166; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 167; // A video file.
    Clip clip = 168; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 169; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 170; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 171; // Data type: URL.
  string alternate_name = 172; // Data type: Text.
  string description = 173; // Data type: Text.
  string disambiguating_description = 174; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 175; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 176; // Data type: Text.
    string url = 177; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 178; // An image file.
    string url = 179; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 180; // Data type: URL.
    CreativeWork creative_work = 181; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 182; // Data type: Text.
  Action potential_action = 183; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 184; // Data type: URL.
  oneof subject_of {
    Event event = 185; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 186; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 187; // Data type: URL.
}
message MusicAlbumProductionType {
  // from MusicAlbumProductionType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message MusicAlbumReleaseType {
  // from MusicAlbumReleaseType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message MusicRelease {
  // from MusicRelease
  string catalog_number = 1; // Data type: Text.
  oneof credited_to {
    Person person = 2; // A person (alive, dead, undead, or fictional).
    Organization organization = 3; // An organization such as a school, NGO, corporation, club, etc.
  }
  Duration duration = 4; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  MusicReleaseFormatType music_release_format = 5; // Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
  Organization record_label = 6; // An organization such as a school, NGO, corporation, club, etc.
  MusicAlbum release_of = 7; // A collection of music tracks.
  // inherited from MusicPlaylist
  float32 num_tracks = 8; // Data type: Integer.
  oneof track {
    MusicRecording music_recording = 9; // A music recording (track), usually a single song.
    ItemList item_list = 10; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  }
  MusicRecording tracks = 11; // A music recording (track), usually a single song.
  // inherited from CreativeWork
  oneof object_object {
    string text = 12; // Data type: Text.
    QuantitativeValue quantitative_value = 13; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 14; // The most generic type of item.
  string abstract = 15; // Data type: Text.
  string access_mode = 16; // Data type: Text.
  ItemList access_mode_sufficient = 17; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 18; // Data type: Text.
  string accessibility_control = 19; // Data type: Text.
  string accessibility_feature = 20; // Data type: Text.
  string accessibility_hazard = 21; // Data type: Text.
  string accessibility_summary = 22; // Data type: Text.
  Person accountable_person = 23; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 24; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 25; // Data type: URL.
  }
  AggregateRating aggregate_rating = 26; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 27; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 28; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 29; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 30; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 31; // Data type: Text.
  }
  MediaObject associated_media = 32; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 33; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 34; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 35; // An audio file.
    MusicRecording music_recording = 36; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 37; // A person (alive, dead, undead, or fictional).
    Organization organization = 38; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 39; // Data type: Text.
  string awards = 40; // Data type: Text.
  Person character = 41; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 42; // Data type: Text.
    CreativeWork creative_work = 43; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 44; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 45; // Data type: Integer.
  string conditions_of_access = 46; // Data type: Text.
  Place content_location = 47; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 48; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 49; // Data type: Text.
  }
  string content_reference_time = 50; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 51; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 52; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 54; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 55; // Data type: Text.
  float32 copyright_year = 56; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 57; // A [[comment]] that corrects [[CreativeWork]].
    string text = 58; // Data type: Text.
    string url = 59; // Data type: URL.
  }
  Country country_of_origin = 60; // A country.
  oneof creative_work_status {
    string text = 61; // Data type: Text.
    DefinedTerm defined_term = 62; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 63; // A person (alive, dead, undead, or fictional).
    Organization organization = 64; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 65; // Data type: Text.
  string date_created = 66; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 67; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 68; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 69; // Data type: URL.
  string edit_eidr = 70; // Data type: Text.
  Person editor = 71; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 72; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 73; // Data type: URL.
    string text = 74; // Data type: Text.
    DefinedTerm defined_term = 75; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 77; // Data type: Text.
  }
  MediaObject encoding = 78; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 79; // Data type: Text.
  MediaObject encodings = 80; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 81; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 82; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 83; // Data type: URL.
  oneof funder {
    Organization organization = 84; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 85; // A person (alive, dead, undead, or fictional).
  }
  string genre = 86; // Data type: URL.
  CreativeWork has_part = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 88; // Data type: Text.
  oneof in_language {
    string text = 89; // Data type: Text.
    Language language = 90; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 91; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 92; // Data type: Text.
  Claim interpreted_as_claim = 93; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 94; // Boolean: True or False.
  oneof is_based_on {
    string url = 95; // Data type: URL.
    Product product = 96; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 97; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 98; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 99; // Data type: URL.
    Product product = 100; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 101; // Boolean: True or False.
  oneof is_part_of {
    string url = 102; // Data type: URL.
    CreativeWork creative_work = 103; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 104; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 105; // Data type: URL.
    string text = 106; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 107; // Data type: Text.
    DefinedTerm defined_term = 108; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 109; // Data type: URL.
    CreativeWork creative_work = 110; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 111; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 112; // The most generic type of item.
  oneof maintainer {
    Person person = 113; // A person (alive, dead, undead, or fictional).
    Organization organization = 114; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 115; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 116; // Data type: URL.
    string text = 117; // Data type: Text.
  }
  Thing mentions = 118; // The most generic type of item.
  oneof offers {
    Demand demand = 119; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 120; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 121; // Data type: Text.
    DefinedTerm defined_term = 122; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 123; // Data type: Text.
    float32 integer = 124; // Data type: Integer.
  }
  oneof producer {
    Person person = 125; // A person (alive, dead, undead, or fictional).
    Organization organization = 126; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 128; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 129; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 130; // A person (alive, dead, undead, or fictional).
    Organization organization = 131; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 132; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 133; // Data type: URL.
    CreativeWork creative_work = 134; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 135; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 136; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 137; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 138; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 139; // Data type: Text.
  string sd_date_published = 140; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 141; // Data type: URL.
    CreativeWork creative_work = 142; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 143; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 144; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 145; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 146; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 147; // Data type: Text.
    QuantitativeValue quantitative_value = 148; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 149; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 150; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 151; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 152; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 153; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 154; // Data type: Text.
    DefinedTerm defined_term = 155; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 156; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 157; // Data type: Text.
  string text = 158; // Data type: Text.
  string thumbnail_url = 159; // Data type: URL.
  Duration time_required = 160; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 162; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 163; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 164; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 165; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 166; // Data type: URL.
  }
  oneof version {
    string text = 167; // Data type: Text.
    float32 number = 168; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 169; // A video file.
    Clip clip = 170; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 171; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 173; // Data type: URL.
  string alternate_name = 174; // Data type: Text.
  string description = 175; // Data type: Text.
  string disambiguating_description = 176; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 177; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 178; // Data type: Text.
    string url = 179; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 180; // An image file.
    string url = 181; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 182; // Data type: URL.
    CreativeWork creative_work = 183; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 184; // Data type: Text.
  Action potential_action = 185; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 186; // Data type: URL.
  oneof subject_of {
    Event event = 187; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 188; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 189; // Data type: URL.
}
message MusicReleaseFormatType {
  // from MusicReleaseFormatType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message MusicRecording {
  // from MusicRecording
  oneof by_artist {
    MusicGroup music_group = 1; // A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
    Person person = 2; // A person (alive, dead, undead, or fictional).
  }
  Duration duration = 3; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  MusicAlbum in_album = 4; // A collection of music tracks.
  MusicPlaylist in_playlist = 5; // A collection of music tracks in playlist form.
  string isrc_code = 6; // Data type: Text.
  MusicComposition recording_of = 7; // A musical composition.
  // inherited from CreativeWork
  oneof object_object {
    string text = 8; // Data type: Text.
    QuantitativeValue quantitative_value = 9; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 10; // The most generic type of item.
  string abstract = 11; // Data type: Text.
  string access_mode = 12; // Data type: Text.
  ItemList access_mode_sufficient = 13; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 14; // Data type: Text.
  string accessibility_control = 15; // Data type: Text.
  string accessibility_feature = 16; // Data type: Text.
  string accessibility_hazard = 17; // Data type: Text.
  string accessibility_summary = 18; // Data type: Text.
  Person accountable_person = 19; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 21; // Data type: URL.
  }
  AggregateRating aggregate_rating = 22; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 23; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 24; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 25; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 26; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 27; // Data type: Text.
  }
  MediaObject associated_media = 28; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 29; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 30; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 31; // An audio file.
    MusicRecording music_recording = 32; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 33; // A person (alive, dead, undead, or fictional).
    Organization organization = 34; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 35; // Data type: Text.
  string awards = 36; // Data type: Text.
  Person character = 37; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 38; // Data type: Text.
    CreativeWork creative_work = 39; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 40; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 41; // Data type: Integer.
  string conditions_of_access = 42; // Data type: Text.
  Place content_location = 43; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 44; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 45; // Data type: Text.
  }
  string content_reference_time = 46; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 47; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 48; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 49; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 50; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 51; // Data type: Text.
  float32 copyright_year = 52; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 53; // A [[comment]] that corrects [[CreativeWork]].
    string text = 54; // Data type: Text.
    string url = 55; // Data type: URL.
  }
  Country country_of_origin = 56; // A country.
  oneof creative_work_status {
    string text = 57; // Data type: Text.
    DefinedTerm defined_term = 58; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 59; // A person (alive, dead, undead, or fictional).
    Organization organization = 60; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 61; // Data type: Text.
  string date_created = 62; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 63; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 64; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 65; // Data type: URL.
  string edit_eidr = 66; // Data type: Text.
  Person editor = 67; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 68; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 69; // Data type: URL.
    string text = 70; // Data type: Text.
    DefinedTerm defined_term = 71; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 72; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 73; // Data type: Text.
  }
  MediaObject encoding = 74; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 75; // Data type: Text.
  MediaObject encodings = 76; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 77; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 78; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 79; // Data type: URL.
  oneof funder {
    Organization organization = 80; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 81; // A person (alive, dead, undead, or fictional).
  }
  string genre = 82; // Data type: URL.
  CreativeWork has_part = 83; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 84; // Data type: Text.
  oneof in_language {
    string text = 85; // Data type: Text.
    Language language = 86; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 87; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 88; // Data type: Text.
  Claim interpreted_as_claim = 89; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 90; // Boolean: True or False.
  oneof is_based_on {
    string url = 91; // Data type: URL.
    Product product = 92; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 93; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 94; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 95; // Data type: URL.
    Product product = 96; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 97; // Boolean: True or False.
  oneof is_part_of {
    string url = 98; // Data type: URL.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 100; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 101; // Data type: URL.
    string text = 102; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 103; // Data type: Text.
    DefinedTerm defined_term = 104; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 105; // Data type: URL.
    CreativeWork creative_work = 106; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 107; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 108; // The most generic type of item.
  oneof maintainer {
    Person person = 109; // A person (alive, dead, undead, or fictional).
    Organization organization = 110; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 111; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 112; // Data type: URL.
    string text = 113; // Data type: Text.
  }
  Thing mentions = 114; // The most generic type of item.
  oneof offers {
    Demand demand = 115; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 116; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 117; // Data type: Text.
    DefinedTerm defined_term = 118; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 119; // Data type: Text.
    float32 integer = 120; // Data type: Integer.
  }
  oneof producer {
    Person person = 121; // A person (alive, dead, undead, or fictional).
    Organization organization = 122; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 123; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 124; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 125; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 126; // A person (alive, dead, undead, or fictional).
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 128; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 129; // Data type: URL.
    CreativeWork creative_work = 130; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 131; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 132; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 133; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 134; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 135; // Data type: Text.
  string sd_date_published = 136; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 137; // Data type: URL.
    CreativeWork creative_work = 138; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 139; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 140; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 141; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 142; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 143; // Data type: Text.
    QuantitativeValue quantitative_value = 144; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 145; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 146; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 147; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 148; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 149; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 150; // Data type: Text.
    DefinedTerm defined_term = 151; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 152; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 153; // Data type: Text.
  string text = 154; // Data type: Text.
  string thumbnail_url = 155; // Data type: URL.
  Duration time_required = 156; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 157; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 158; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 159; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 160; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 162; // Data type: URL.
  }
  oneof version {
    string text = 163; // Data type: Text.
    float32 number = 164; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 165; // A video file.
    Clip clip = 166; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 167; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 168; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 169; // Data type: URL.
  string alternate_name = 170; // Data type: Text.
  string description = 171; // Data type: Text.
  string disambiguating_description = 172; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 173; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 174; // Data type: Text.
    string url = 175; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 176; // An image file.
    string url = 177; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 178; // Data type: URL.
    CreativeWork creative_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 180; // Data type: Text.
  Action potential_action = 181; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 182; // Data type: URL.
  oneof subject_of {
    Event event = 183; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 184; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 185; // Data type: URL.
}
message MusicPlaylist {
  // from MusicPlaylist
  float32 num_tracks = 1; // Data type: Integer.
  oneof track {
    MusicRecording music_recording = 2; // A music recording (track), usually a single song.
    ItemList item_list = 3; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  }
  MusicRecording tracks = 4; // A music recording (track), usually a single song.
  // inherited from CreativeWork
  oneof object_object {
    string text = 5; // Data type: Text.
    QuantitativeValue quantitative_value = 6; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 7; // The most generic type of item.
  string abstract = 8; // Data type: Text.
  string access_mode = 9; // Data type: Text.
  ItemList access_mode_sufficient = 10; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 11; // Data type: Text.
  string accessibility_control = 12; // Data type: Text.
  string accessibility_feature = 13; // Data type: Text.
  string accessibility_hazard = 14; // Data type: Text.
  string accessibility_summary = 15; // Data type: Text.
  Person accountable_person = 16; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 18; // Data type: URL.
  }
  AggregateRating aggregate_rating = 19; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 20; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 21; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 22; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 23; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 24; // Data type: Text.
  }
  MediaObject associated_media = 25; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 26; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 27; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 28; // An audio file.
    MusicRecording music_recording = 29; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 30; // A person (alive, dead, undead, or fictional).
    Organization organization = 31; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 32; // Data type: Text.
  string awards = 33; // Data type: Text.
  Person character = 34; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 35; // Data type: Text.
    CreativeWork creative_work = 36; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 37; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 38; // Data type: Integer.
  string conditions_of_access = 39; // Data type: Text.
  Place content_location = 40; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 41; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 42; // Data type: Text.
  }
  string content_reference_time = 43; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 46; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 47; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 48; // Data type: Text.
  float32 copyright_year = 49; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 50; // A [[comment]] that corrects [[CreativeWork]].
    string text = 51; // Data type: Text.
    string url = 52; // Data type: URL.
  }
  Country country_of_origin = 53; // A country.
  oneof creative_work_status {
    string text = 54; // Data type: Text.
    DefinedTerm defined_term = 55; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 56; // A person (alive, dead, undead, or fictional).
    Organization organization = 57; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 58; // Data type: Text.
  string date_created = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 60; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 61; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 62; // Data type: URL.
  string edit_eidr = 63; // Data type: Text.
  Person editor = 64; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 65; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 66; // Data type: URL.
    string text = 67; // Data type: Text.
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 69; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 70; // Data type: Text.
  }
  MediaObject encoding = 71; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 72; // Data type: Text.
  MediaObject encodings = 73; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 74; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 75; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 76; // Data type: URL.
  oneof funder {
    Organization organization = 77; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 78; // A person (alive, dead, undead, or fictional).
  }
  string genre = 79; // Data type: URL.
  CreativeWork has_part = 80; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 81; // Data type: Text.
  oneof in_language {
    string text = 82; // Data type: Text.
    Language language = 83; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 84; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 85; // Data type: Text.
  Claim interpreted_as_claim = 86; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 87; // Boolean: True or False.
  oneof is_based_on {
    string url = 88; // Data type: URL.
    Product product = 89; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 91; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 92; // Data type: URL.
    Product product = 93; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 94; // Boolean: True or False.
  oneof is_part_of {
    string url = 95; // Data type: URL.
    CreativeWork creative_work = 96; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 97; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 98; // Data type: URL.
    string text = 99; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 100; // Data type: Text.
    DefinedTerm defined_term = 101; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 102; // Data type: URL.
    CreativeWork creative_work = 103; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 104; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 105; // The most generic type of item.
  oneof maintainer {
    Person person = 106; // A person (alive, dead, undead, or fictional).
    Organization organization = 107; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 108; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 109; // Data type: URL.
    string text = 110; // Data type: Text.
  }
  Thing mentions = 111; // The most generic type of item.
  oneof offers {
    Demand demand = 112; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 113; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 114; // Data type: Text.
    DefinedTerm defined_term = 115; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 116; // Data type: Text.
    float32 integer = 117; // Data type: Integer.
  }
  oneof producer {
    Person person = 118; // A person (alive, dead, undead, or fictional).
    Organization organization = 119; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 120; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 121; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 122; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 123; // A person (alive, dead, undead, or fictional).
    Organization organization = 124; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 125; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 126; // Data type: URL.
    CreativeWork creative_work = 127; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 128; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 129; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 130; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 131; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 132; // Data type: Text.
  string sd_date_published = 133; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 134; // Data type: URL.
    CreativeWork creative_work = 135; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 136; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 137; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 138; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 139; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 140; // Data type: Text.
    QuantitativeValue quantitative_value = 141; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 142; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 143; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 144; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 146; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 147; // Data type: Text.
    DefinedTerm defined_term = 148; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 149; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 150; // Data type: Text.
  string text = 151; // Data type: Text.
  string thumbnail_url = 152; // Data type: URL.
  Duration time_required = 153; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 154; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 155; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 156; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 157; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 158; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 159; // Data type: URL.
  }
  oneof version {
    string text = 160; // Data type: Text.
    float32 number = 161; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 162; // A video file.
    Clip clip = 163; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 164; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 165; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 166; // Data type: URL.
  string alternate_name = 167; // Data type: Text.
  string description = 168; // Data type: Text.
  string disambiguating_description = 169; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 170; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 171; // Data type: Text.
    string url = 172; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 173; // An image file.
    string url = 174; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 175; // Data type: URL.
    CreativeWork creative_work = 176; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 177; // Data type: Text.
  Action potential_action = 178; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 179; // Data type: URL.
  oneof subject_of {
    Event event = 180; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 181; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 182; // Data type: URL.
}
message MusicComposition {
  // from MusicComposition
  oneof composer {
    Organization organization = 1; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 2; // A person (alive, dead, undead, or fictional).
  }
  Event first_performance = 3; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  MusicComposition included_composition = 4; // A musical composition.
  string iswc_code = 5; // Data type: Text.
  Person lyricist = 6; // A person (alive, dead, undead, or fictional).
  CreativeWork lyrics = 7; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  MusicComposition music_arrangement = 8; // A musical composition.
  string music_composition_form = 9; // Data type: Text.
  string musical_key = 10; // Data type: Text.
  MusicRecording recorded_as = 11; // A music recording (track), usually a single song.
  // inherited from CreativeWork
  oneof object_object {
    string text = 12; // Data type: Text.
    QuantitativeValue quantitative_value = 13; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 14; // The most generic type of item.
  string abstract = 15; // Data type: Text.
  string access_mode = 16; // Data type: Text.
  ItemList access_mode_sufficient = 17; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 18; // Data type: Text.
  string accessibility_control = 19; // Data type: Text.
  string accessibility_feature = 20; // Data type: Text.
  string accessibility_hazard = 21; // Data type: Text.
  string accessibility_summary = 22; // Data type: Text.
  Person accountable_person = 23; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 24; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 25; // Data type: URL.
  }
  AggregateRating aggregate_rating = 26; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 27; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 28; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 29; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 30; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 31; // Data type: Text.
  }
  MediaObject associated_media = 32; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 33; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 34; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 35; // An audio file.
    MusicRecording music_recording = 36; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 37; // A person (alive, dead, undead, or fictional).
    Organization organization = 38; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 39; // Data type: Text.
  string awards = 40; // Data type: Text.
  Person character = 41; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 42; // Data type: Text.
    CreativeWork creative_work = 43; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 44; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 45; // Data type: Integer.
  string conditions_of_access = 46; // Data type: Text.
  Place content_location = 47; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 48; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 49; // Data type: Text.
  }
  string content_reference_time = 50; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 51; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 52; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 54; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 55; // Data type: Text.
  float32 copyright_year = 56; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 57; // A [[comment]] that corrects [[CreativeWork]].
    string text = 58; // Data type: Text.
    string url = 59; // Data type: URL.
  }
  Country country_of_origin = 60; // A country.
  oneof creative_work_status {
    string text = 61; // Data type: Text.
    DefinedTerm defined_term = 62; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 63; // A person (alive, dead, undead, or fictional).
    Organization organization = 64; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 65; // Data type: Text.
  string date_created = 66; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 67; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 68; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 69; // Data type: URL.
  string edit_eidr = 70; // Data type: Text.
  Person editor = 71; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 72; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 73; // Data type: URL.
    string text = 74; // Data type: Text.
    DefinedTerm defined_term = 75; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 77; // Data type: Text.
  }
  MediaObject encoding = 78; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 79; // Data type: Text.
  MediaObject encodings = 80; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 81; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 82; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 83; // Data type: URL.
  oneof funder {
    Organization organization = 84; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 85; // A person (alive, dead, undead, or fictional).
  }
  string genre = 86; // Data type: URL.
  CreativeWork has_part = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 88; // Data type: Text.
  oneof in_language {
    string text = 89; // Data type: Text.
    Language language = 90; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 91; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 92; // Data type: Text.
  Claim interpreted_as_claim = 93; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 94; // Boolean: True or False.
  oneof is_based_on {
    string url = 95; // Data type: URL.
    Product product = 96; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 97; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 98; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 99; // Data type: URL.
    Product product = 100; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 101; // Boolean: True or False.
  oneof is_part_of {
    string url = 102; // Data type: URL.
    CreativeWork creative_work = 103; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 104; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 105; // Data type: URL.
    string text = 106; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 107; // Data type: Text.
    DefinedTerm defined_term = 108; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 109; // Data type: URL.
    CreativeWork creative_work = 110; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 111; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 112; // The most generic type of item.
  oneof maintainer {
    Person person = 113; // A person (alive, dead, undead, or fictional).
    Organization organization = 114; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 115; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 116; // Data type: URL.
    string text = 117; // Data type: Text.
  }
  Thing mentions = 118; // The most generic type of item.
  oneof offers {
    Demand demand = 119; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 120; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 121; // Data type: Text.
    DefinedTerm defined_term = 122; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 123; // Data type: Text.
    float32 integer = 124; // Data type: Integer.
  }
  oneof producer {
    Person person = 125; // A person (alive, dead, undead, or fictional).
    Organization organization = 126; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 128; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 129; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 130; // A person (alive, dead, undead, or fictional).
    Organization organization = 131; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 132; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 133; // Data type: URL.
    CreativeWork creative_work = 134; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 135; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 136; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 137; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 138; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 139; // Data type: Text.
  string sd_date_published = 140; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 141; // Data type: URL.
    CreativeWork creative_work = 142; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 143; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 144; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 145; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 146; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 147; // Data type: Text.
    QuantitativeValue quantitative_value = 148; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 149; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 150; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 151; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 152; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 153; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 154; // Data type: Text.
    DefinedTerm defined_term = 155; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 156; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 157; // Data type: Text.
  string text = 158; // Data type: Text.
  string thumbnail_url = 159; // Data type: URL.
  Duration time_required = 160; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 162; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 163; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 164; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 165; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 166; // Data type: URL.
  }
  oneof version {
    string text = 167; // Data type: Text.
    float32 number = 168; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 169; // A video file.
    Clip clip = 170; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 171; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 173; // Data type: URL.
  string alternate_name = 174; // Data type: Text.
  string description = 175; // Data type: Text.
  string disambiguating_description = 176; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 177; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 178; // Data type: Text.
    string url = 179; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 180; // An image file.
    string url = 181; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 182; // Data type: URL.
    CreativeWork creative_work = 183; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 184; // Data type: Text.
  Action potential_action = 185; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 186; // Data type: URL.
  oneof subject_of {
    Event event = 187; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 188; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 189; // Data type: URL.
}
message Episode {
  // from Episode
  Person actor = 1; // A person (alive, dead, undead, or fictional).
  Person actors = 2; // A person (alive, dead, undead, or fictional).
  Person director = 3; // A person (alive, dead, undead, or fictional).
  Person directors = 4; // A person (alive, dead, undead, or fictional).
  Duration duration = 5; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  oneof episode_number {
    string text = 6; // Data type: Text.
    float32 integer = 7; // Data type: Integer.
  }
  oneof music_by {
    Person person = 8; // A person (alive, dead, undead, or fictional).
    MusicGroup music_group = 9; // A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
  }
  CreativeWorkSeason part_of_season = 10; // A media season e.g. tv, radio, video game etc.
  CreativeWorkSeries part_of_series = 11; // A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate. 	  
  Organization production_company = 12; // An organization such as a school, NGO, corporation, club, etc.
  VideoObject trailer = 13; // A video file.
  // inherited from CreativeWork
  oneof object_object {
    string text = 14; // Data type: Text.
    QuantitativeValue quantitative_value = 15; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 16; // The most generic type of item.
  string abstract = 17; // Data type: Text.
  string access_mode = 18; // Data type: Text.
  ItemList access_mode_sufficient = 19; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 20; // Data type: Text.
  string accessibility_control = 21; // Data type: Text.
  string accessibility_feature = 22; // Data type: Text.
  string accessibility_hazard = 23; // Data type: Text.
  string accessibility_summary = 24; // Data type: Text.
  Person accountable_person = 25; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 27; // Data type: URL.
  }
  AggregateRating aggregate_rating = 28; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 29; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 30; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 31; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 32; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 33; // Data type: Text.
  }
  MediaObject associated_media = 34; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 35; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 36; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 37; // An audio file.
    MusicRecording music_recording = 38; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 39; // A person (alive, dead, undead, or fictional).
    Organization organization = 40; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 41; // Data type: Text.
  string awards = 42; // Data type: Text.
  Person character = 43; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 44; // Data type: Text.
    CreativeWork creative_work = 45; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 46; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 47; // Data type: Integer.
  string conditions_of_access = 48; // Data type: Text.
  Place content_location = 49; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 50; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 51; // Data type: Text.
  }
  string content_reference_time = 52; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 54; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 56; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 57; // Data type: Text.
  float32 copyright_year = 58; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 59; // A [[comment]] that corrects [[CreativeWork]].
    string text = 60; // Data type: Text.
    string url = 61; // Data type: URL.
  }
  Country country_of_origin = 62; // A country.
  oneof creative_work_status {
    string text = 63; // Data type: Text.
    DefinedTerm defined_term = 64; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 65; // A person (alive, dead, undead, or fictional).
    Organization organization = 66; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 67; // Data type: Text.
  string date_created = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 69; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 70; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 71; // Data type: URL.
  string edit_eidr = 72; // Data type: Text.
  Person editor = 73; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 74; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 75; // Data type: URL.
    string text = 76; // Data type: Text.
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 78; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 79; // Data type: Text.
  }
  MediaObject encoding = 80; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 81; // Data type: Text.
  MediaObject encodings = 82; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 83; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 84; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 85; // Data type: URL.
  oneof funder {
    Organization organization = 86; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 87; // A person (alive, dead, undead, or fictional).
  }
  string genre = 88; // Data type: URL.
  CreativeWork has_part = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 90; // Data type: Text.
  oneof in_language {
    string text = 91; // Data type: Text.
    Language language = 92; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 93; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 94; // Data type: Text.
  Claim interpreted_as_claim = 95; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 96; // Boolean: True or False.
  oneof is_based_on {
    string url = 97; // Data type: URL.
    Product product = 98; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 100; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 101; // Data type: URL.
    Product product = 102; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 103; // Boolean: True or False.
  oneof is_part_of {
    string url = 104; // Data type: URL.
    CreativeWork creative_work = 105; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 106; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 107; // Data type: URL.
    string text = 108; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 109; // Data type: Text.
    DefinedTerm defined_term = 110; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 111; // Data type: URL.
    CreativeWork creative_work = 112; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 113; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 114; // The most generic type of item.
  oneof maintainer {
    Person person = 115; // A person (alive, dead, undead, or fictional).
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 117; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 118; // Data type: URL.
    string text = 119; // Data type: Text.
  }
  Thing mentions = 120; // The most generic type of item.
  oneof offers {
    Demand demand = 121; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 122; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 123; // Data type: Text.
    DefinedTerm defined_term = 124; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 125; // Data type: Text.
    float32 integer = 126; // Data type: Integer.
  }
  oneof producer {
    Person person = 127; // A person (alive, dead, undead, or fictional).
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 129; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 130; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 131; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 132; // A person (alive, dead, undead, or fictional).
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 134; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 135; // Data type: URL.
    CreativeWork creative_work = 136; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 137; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 138; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 139; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 140; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 141; // Data type: Text.
  string sd_date_published = 142; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 143; // Data type: URL.
    CreativeWork creative_work = 144; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 146; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 147; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 148; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 149; // Data type: Text.
    QuantitativeValue quantitative_value = 150; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 151; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 152; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 153; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 156; // Data type: Text.
    DefinedTerm defined_term = 157; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 158; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 159; // Data type: Text.
  string text = 160; // Data type: Text.
  string thumbnail_url = 161; // Data type: URL.
  Duration time_required = 162; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 164; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 165; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 166; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 167; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 168; // Data type: URL.
  }
  oneof version {
    string text = 169; // Data type: Text.
    float32 number = 170; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 171; // A video file.
    Clip clip = 172; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 174; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 175; // Data type: URL.
  string alternate_name = 176; // Data type: Text.
  string description = 177; // Data type: Text.
  string disambiguating_description = 178; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 179; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 180; // Data type: Text.
    string url = 181; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 182; // An image file.
    string url = 183; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 184; // Data type: URL.
    CreativeWork creative_work = 185; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 186; // Data type: Text.
  Action potential_action = 187; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 188; // Data type: URL.
  oneof subject_of {
    Event event = 189; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 190; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 191; // Data type: URL.
}
message CreativeWorkSeries {
  // from CreativeWorkSeries
  string end_date = 1; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string issn = 2; // Data type: Text.
  string start_date = 3; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  // inherited from Series
  // inherited from Intangible
  // inherited from CreativeWork
  oneof object_object {
    string text = 4; // Data type: Text.
    QuantitativeValue quantitative_value = 5; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 6; // The most generic type of item.
  string abstract = 7; // Data type: Text.
  string access_mode = 8; // Data type: Text.
  ItemList access_mode_sufficient = 9; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 10; // Data type: Text.
  string accessibility_control = 11; // Data type: Text.
  string accessibility_feature = 12; // Data type: Text.
  string accessibility_hazard = 13; // Data type: Text.
  string accessibility_summary = 14; // Data type: Text.
  Person accountable_person = 15; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 17; // Data type: URL.
  }
  AggregateRating aggregate_rating = 18; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 19; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 20; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 21; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 22; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 23; // Data type: Text.
  }
  MediaObject associated_media = 24; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 25; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 26; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 27; // An audio file.
    MusicRecording music_recording = 28; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 29; // A person (alive, dead, undead, or fictional).
    Organization organization = 30; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 31; // Data type: Text.
  string awards = 32; // Data type: Text.
  Person character = 33; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 34; // Data type: Text.
    CreativeWork creative_work = 35; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 36; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 37; // Data type: Integer.
  string conditions_of_access = 38; // Data type: Text.
  Place content_location = 39; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 40; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 41; // Data type: Text.
  }
  string content_reference_time = 42; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 45; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 46; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 47; // Data type: Text.
  float32 copyright_year = 48; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 49; // A [[comment]] that corrects [[CreativeWork]].
    string text = 50; // Data type: Text.
    string url = 51; // Data type: URL.
  }
  Country country_of_origin = 52; // A country.
  oneof creative_work_status {
    string text = 53; // Data type: Text.
    DefinedTerm defined_term = 54; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 55; // A person (alive, dead, undead, or fictional).
    Organization organization = 56; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 57; // Data type: Text.
  string date_created = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 60; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 61; // Data type: URL.
  string edit_eidr = 62; // Data type: Text.
  Person editor = 63; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 64; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 65; // Data type: URL.
    string text = 66; // Data type: Text.
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 69; // Data type: Text.
  }
  MediaObject encoding = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 71; // Data type: Text.
  MediaObject encodings = 72; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 74; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 75; // Data type: URL.
  oneof funder {
    Organization organization = 76; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 77; // A person (alive, dead, undead, or fictional).
  }
  string genre = 78; // Data type: URL.
  CreativeWork has_part = 79; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 80; // Data type: Text.
  oneof in_language {
    string text = 81; // Data type: Text.
    Language language = 82; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 83; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 84; // Data type: Text.
  Claim interpreted_as_claim = 85; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 86; // Boolean: True or False.
  oneof is_based_on {
    string url = 87; // Data type: URL.
    Product product = 88; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 91; // Data type: URL.
    Product product = 92; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 93; // Boolean: True or False.
  oneof is_part_of {
    string url = 94; // Data type: URL.
    CreativeWork creative_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 96; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 97; // Data type: URL.
    string text = 98; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 99; // Data type: Text.
    DefinedTerm defined_term = 100; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 101; // Data type: URL.
    CreativeWork creative_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 103; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 104; // The most generic type of item.
  oneof maintainer {
    Person person = 105; // A person (alive, dead, undead, or fictional).
    Organization organization = 106; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 107; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 108; // Data type: URL.
    string text = 109; // Data type: Text.
  }
  Thing mentions = 110; // The most generic type of item.
  oneof offers {
    Demand demand = 111; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 112; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 113; // Data type: Text.
    DefinedTerm defined_term = 114; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 115; // Data type: Text.
    float32 integer = 116; // Data type: Integer.
  }
  oneof producer {
    Person person = 117; // A person (alive, dead, undead, or fictional).
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 119; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 120; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 121; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 122; // A person (alive, dead, undead, or fictional).
    Organization organization = 123; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 124; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 125; // Data type: URL.
    CreativeWork creative_work = 126; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 127; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 128; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 129; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 130; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 131; // Data type: Text.
  string sd_date_published = 132; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 133; // Data type: URL.
    CreativeWork creative_work = 134; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 136; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 137; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 138; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 139; // Data type: Text.
    QuantitativeValue quantitative_value = 140; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 141; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 142; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 143; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 146; // Data type: Text.
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 148; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 149; // Data type: Text.
  string text = 150; // Data type: Text.
  string thumbnail_url = 151; // Data type: URL.
  Duration time_required = 152; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 153; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 156; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 157; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 158; // Data type: URL.
  }
  oneof version {
    string text = 159; // Data type: Text.
    float32 number = 160; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 161; // A video file.
    Clip clip = 162; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 164; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 165; // Data type: URL.
  string alternate_name = 166; // Data type: Text.
  string description = 167; // Data type: Text.
  string disambiguating_description = 168; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 169; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 170; // Data type: Text.
    string url = 171; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 172; // An image file.
    string url = 173; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 174; // Data type: URL.
    CreativeWork creative_work = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 176; // Data type: Text.
  Action potential_action = 177; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 178; // Data type: URL.
  oneof subject_of {
    Event event = 179; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 180; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 181; // Data type: URL.
}
message HyperTocEntry {
  // from HyperTocEntry
  MediaObject associated_media = 1; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  HyperTocEntry toc_continuation = 2; // A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
  string utterances = 3; // Data type: Text.
  // inherited from CreativeWork
  oneof object_object {
    string text = 4; // Data type: Text.
    QuantitativeValue quantitative_value = 5; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 6; // The most generic type of item.
  string abstract = 7; // Data type: Text.
  string access_mode = 8; // Data type: Text.
  ItemList access_mode_sufficient = 9; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 10; // Data type: Text.
  string accessibility_control = 11; // Data type: Text.
  string accessibility_feature = 12; // Data type: Text.
  string accessibility_hazard = 13; // Data type: Text.
  string accessibility_summary = 14; // Data type: Text.
  Person accountable_person = 15; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 17; // Data type: URL.
  }
  AggregateRating aggregate_rating = 18; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 19; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 20; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 21; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 22; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 23; // Data type: Text.
  }
  MediaObject associated_media = 24; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 25; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 26; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 27; // An audio file.
    MusicRecording music_recording = 28; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 29; // A person (alive, dead, undead, or fictional).
    Organization organization = 30; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 31; // Data type: Text.
  string awards = 32; // Data type: Text.
  Person character = 33; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 34; // Data type: Text.
    CreativeWork creative_work = 35; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 36; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 37; // Data type: Integer.
  string conditions_of_access = 38; // Data type: Text.
  Place content_location = 39; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 40; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 41; // Data type: Text.
  }
  string content_reference_time = 42; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 45; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 46; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 47; // Data type: Text.
  float32 copyright_year = 48; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 49; // A [[comment]] that corrects [[CreativeWork]].
    string text = 50; // Data type: Text.
    string url = 51; // Data type: URL.
  }
  Country country_of_origin = 52; // A country.
  oneof creative_work_status {
    string text = 53; // Data type: Text.
    DefinedTerm defined_term = 54; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 55; // A person (alive, dead, undead, or fictional).
    Organization organization = 56; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 57; // Data type: Text.
  string date_created = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 60; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 61; // Data type: URL.
  string edit_eidr = 62; // Data type: Text.
  Person editor = 63; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 64; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 65; // Data type: URL.
    string text = 66; // Data type: Text.
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 69; // Data type: Text.
  }
  MediaObject encoding = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 71; // Data type: Text.
  MediaObject encodings = 72; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 74; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 75; // Data type: URL.
  oneof funder {
    Organization organization = 76; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 77; // A person (alive, dead, undead, or fictional).
  }
  string genre = 78; // Data type: URL.
  CreativeWork has_part = 79; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 80; // Data type: Text.
  oneof in_language {
    string text = 81; // Data type: Text.
    Language language = 82; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 83; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 84; // Data type: Text.
  Claim interpreted_as_claim = 85; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 86; // Boolean: True or False.
  oneof is_based_on {
    string url = 87; // Data type: URL.
    Product product = 88; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 91; // Data type: URL.
    Product product = 92; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 93; // Boolean: True or False.
  oneof is_part_of {
    string url = 94; // Data type: URL.
    CreativeWork creative_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 96; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 97; // Data type: URL.
    string text = 98; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 99; // Data type: Text.
    DefinedTerm defined_term = 100; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 101; // Data type: URL.
    CreativeWork creative_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 103; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 104; // The most generic type of item.
  oneof maintainer {
    Person person = 105; // A person (alive, dead, undead, or fictional).
    Organization organization = 106; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 107; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 108; // Data type: URL.
    string text = 109; // Data type: Text.
  }
  Thing mentions = 110; // The most generic type of item.
  oneof offers {
    Demand demand = 111; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 112; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 113; // Data type: Text.
    DefinedTerm defined_term = 114; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 115; // Data type: Text.
    float32 integer = 116; // Data type: Integer.
  }
  oneof producer {
    Person person = 117; // A person (alive, dead, undead, or fictional).
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 119; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 120; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 121; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 122; // A person (alive, dead, undead, or fictional).
    Organization organization = 123; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 124; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 125; // Data type: URL.
    CreativeWork creative_work = 126; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 127; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 128; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 129; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 130; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 131; // Data type: Text.
  string sd_date_published = 132; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 133; // Data type: URL.
    CreativeWork creative_work = 134; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 136; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 137; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 138; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 139; // Data type: Text.
    QuantitativeValue quantitative_value = 140; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 141; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 142; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 143; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 146; // Data type: Text.
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 148; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 149; // Data type: Text.
  string text = 150; // Data type: Text.
  string thumbnail_url = 151; // Data type: URL.
  Duration time_required = 152; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 153; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 156; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 157; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 158; // Data type: URL.
  }
  oneof version {
    string text = 159; // Data type: Text.
    float32 number = 160; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 161; // A video file.
    Clip clip = 162; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 164; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 165; // Data type: URL.
  string alternate_name = 166; // Data type: Text.
  string description = 167; // Data type: Text.
  string disambiguating_description = 168; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 169; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 170; // Data type: Text.
    string url = 171; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 172; // An image file.
    string url = 173; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 174; // Data type: URL.
    CreativeWork creative_work = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 176; // Data type: Text.
  Action potential_action = 177; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 178; // Data type: URL.
  oneof subject_of {
    Event event = 179; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 180; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 181; // Data type: URL.
}
message AudioObject {
  // from AudioObject
  oneof caption {
    MediaObject media_object = 1; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
    string text = 2; // Data type: Text.
  }
  string embedded_text_caption = 3; // Data type: Text.
  string transcript = 4; // Data type: Text.
  // inherited from MediaObject
  NewsArticle associated_article = 5; // A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.  A more detailed overview of [schema.org News markup](/docs/news.html) is also available. 
  string bitrate = 6; // Data type: Text.
  string content_size = 7; // Data type: Text.
  string content_url = 8; // Data type: URL.
  Duration duration = 9; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string embed_url = 10; // Data type: URL.
  CreativeWork encodes_creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string encoding_format = 12; // Data type: Text.
  string end_time = 13; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof height {
    QuantitativeValue quantitative_value = 14; //  A point value or interval for product characteristics and other purposes.
    Distance distance = 15; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
  }
  oneof ineligible_region {
    Place place = 16; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 17; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 18; // Data type: Text.
  }
  Claim interpreted_as_claim = 19; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  string player_type = 20; // Data type: Text.
  Organization production_company = 21; // An organization such as a school, NGO, corporation, club, etc.
  Place regions_allowed = 22; // Entities that have a somewhat fixed, physical extension.
  oneof requires_subscription {
    bool boolean = 23; // Boolean: True or False.
    MediaSubscription media_subscription = 24; // A subscription which allows a user to access media including audio, video, books, etc.
  }
  string sha_256 = 25; // Data type: Text.
  string start_time = 26; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string upload_date = 27; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof width {
    Distance distance = 28; // Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
    QuantitativeValue quantitative_value = 29; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from CreativeWork
  oneof object_object {
    string text = 30; // Data type: Text.
    QuantitativeValue quantitative_value = 31; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 32; // The most generic type of item.
  string abstract = 33; // Data type: Text.
  string access_mode = 34; // Data type: Text.
  ItemList access_mode_sufficient = 35; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 36; // Data type: Text.
  string accessibility_control = 37; // Data type: Text.
  string accessibility_feature = 38; // Data type: Text.
  string accessibility_hazard = 39; // Data type: Text.
  string accessibility_summary = 40; // Data type: Text.
  Person accountable_person = 41; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 42; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 43; // Data type: URL.
  }
  AggregateRating aggregate_rating = 44; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 45; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 46; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 47; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 48; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 49; // Data type: Text.
  }
  MediaObject associated_media = 50; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 51; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 52; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 53; // An audio file.
    MusicRecording music_recording = 54; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 55; // A person (alive, dead, undead, or fictional).
    Organization organization = 56; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 57; // Data type: Text.
  string awards = 58; // Data type: Text.
  Person character = 59; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 60; // Data type: Text.
    CreativeWork creative_work = 61; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 62; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 63; // Data type: Integer.
  string conditions_of_access = 64; // Data type: Text.
  Place content_location = 65; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 66; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 67; // Data type: Text.
  }
  string content_reference_time = 68; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 69; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 70; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 71; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 72; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 73; // Data type: Text.
  float32 copyright_year = 74; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 75; // A [[comment]] that corrects [[CreativeWork]].
    string text = 76; // Data type: Text.
    string url = 77; // Data type: URL.
  }
  Country country_of_origin = 78; // A country.
  oneof creative_work_status {
    string text = 79; // Data type: Text.
    DefinedTerm defined_term = 80; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 81; // A person (alive, dead, undead, or fictional).
    Organization organization = 82; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 83; // Data type: Text.
  string date_created = 84; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 85; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 86; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 87; // Data type: URL.
  string edit_eidr = 88; // Data type: Text.
  Person editor = 89; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 90; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 91; // Data type: URL.
    string text = 92; // Data type: Text.
    DefinedTerm defined_term = 93; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 94; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 95; // Data type: Text.
  }
  MediaObject encoding = 96; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 97; // Data type: Text.
  MediaObject encodings = 98; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 100; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 101; // Data type: URL.
  oneof funder {
    Organization organization = 102; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 103; // A person (alive, dead, undead, or fictional).
  }
  string genre = 104; // Data type: URL.
  CreativeWork has_part = 105; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 106; // Data type: Text.
  oneof in_language {
    string text = 107; // Data type: Text.
    Language language = 108; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 109; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 110; // Data type: Text.
  Claim interpreted_as_claim = 111; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 112; // Boolean: True or False.
  oneof is_based_on {
    string url = 113; // Data type: URL.
    Product product = 114; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 115; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 116; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 117; // Data type: URL.
    Product product = 118; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 119; // Boolean: True or False.
  oneof is_part_of {
    string url = 120; // Data type: URL.
    CreativeWork creative_work = 121; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 122; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 123; // Data type: URL.
    string text = 124; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 125; // Data type: Text.
    DefinedTerm defined_term = 126; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 127; // Data type: URL.
    CreativeWork creative_work = 128; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 129; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 130; // The most generic type of item.
  oneof maintainer {
    Person person = 131; // A person (alive, dead, undead, or fictional).
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 133; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 134; // Data type: URL.
    string text = 135; // Data type: Text.
  }
  Thing mentions = 136; // The most generic type of item.
  oneof offers {
    Demand demand = 137; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 138; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 139; // Data type: Text.
    DefinedTerm defined_term = 140; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 141; // Data type: Text.
    float32 integer = 142; // Data type: Integer.
  }
  oneof producer {
    Person person = 143; // A person (alive, dead, undead, or fictional).
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 146; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 147; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 148; // A person (alive, dead, undead, or fictional).
    Organization organization = 149; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 150; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 151; // Data type: URL.
    CreativeWork creative_work = 152; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 153; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 154; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 155; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 156; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 157; // Data type: Text.
  string sd_date_published = 158; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 159; // Data type: URL.
    CreativeWork creative_work = 160; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 161; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 162; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 163; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 164; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 165; // Data type: Text.
    QuantitativeValue quantitative_value = 166; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 167; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 168; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 169; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 170; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 171; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 172; // Data type: Text.
    DefinedTerm defined_term = 173; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 174; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 175; // Data type: Text.
  string text = 176; // Data type: Text.
  string thumbnail_url = 177; // Data type: URL.
  Duration time_required = 178; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 180; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 181; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 182; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 183; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 184; // Data type: URL.
  }
  oneof version {
    string text = 185; // Data type: Text.
    float32 number = 186; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 187; // A video file.
    Clip clip = 188; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 189; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 190; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 191; // Data type: URL.
  string alternate_name = 192; // Data type: Text.
  string description = 193; // Data type: Text.
  string disambiguating_description = 194; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 195; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 196; // Data type: Text.
    string url = 197; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 198; // An image file.
    string url = 199; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 200; // Data type: URL.
    CreativeWork creative_work = 201; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 202; // Data type: Text.
  Action potential_action = 203; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 204; // Data type: URL.
  oneof subject_of {
    Event event = 205; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 206; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 207; // Data type: URL.
}
message PublicationEvent {
  // from PublicationEvent
  bool free = 1; // Boolean: True or False.
  oneof published_by {
    Organization organization = 2; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 3; // A person (alive, dead, undead, or fictional).
  }
  BroadcastService published_on = 4; // A delivery service through which content is provided via broadcast over the air or online.
  // inherited from Event
  Thing about = 5; // The most generic type of item.
  Person actor = 6; // A person (alive, dead, undead, or fictional).
  AggregateRating aggregate_rating = 7; // The average rating based on multiple ratings or reviews.
  oneof attendee {
    Organization organization = 8; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 9; // A person (alive, dead, undead, or fictional).
  }
  oneof attendees {
    Organization organization = 10; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 11; // A person (alive, dead, undead, or fictional).
  }
  Audience audience = 12; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof composer {
    Organization organization = 13; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 14; // A person (alive, dead, undead, or fictional).
  }
  oneof contributor {
    Organization organization = 15; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 16; // A person (alive, dead, undead, or fictional).
  }
  Person director = 17; // A person (alive, dead, undead, or fictional).
  string door_time = 18; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  Duration duration = 19; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  string end_date = 20; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  EventAttendanceModeEnumeration event_attendance_mode = 21; // An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
  Schedule event_schedule = 22; // A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.       This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also       have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
  EventStatusType event_status = 23; // EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
  oneof funder {
    Organization organization = 24; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 25; // A person (alive, dead, undead, or fictional).
  }
  oneof in_language {
    string text = 26; // Data type: Text.
    Language language = 27; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  bool is_accessible_for_free = 28; // Boolean: True or False.
  oneof location {
    PostalAddress postal_address = 29; // The mailing address.
    string text = 30; // Data type: Text.
    Place place = 31; // Entities that have a somewhat fixed, physical extension.
    VirtualLocation virtual_location = 32; // An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
  }
  float32 maximum_attendee_capacity = 33; // Data type: Integer.
  float32 maximum_physical_attendee_capacity = 34; // Data type: Integer.
  float32 maximum_virtual_attendee_capacity = 35; // Data type: Integer.
  oneof offers {
    Demand demand = 36; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 37; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof organizer {
    Person person = 38; // A person (alive, dead, undead, or fictional).
    Organization organization = 39; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof performer {
    Person person = 40; // A person (alive, dead, undead, or fictional).
    Organization organization = 41; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof performers {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  string previous_start_date = 44; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  CreativeWork recorded_in = 45; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  float32 remaining_attendee_capacity = 46; // Data type: Integer.
  Review review = 47; // A review of an item - for example, of a restaurant, movie, or store.
  oneof sponsor {
    Organization organization = 48; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 49; // A person (alive, dead, undead, or fictional).
  }
  string start_date = 50; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Event sub_event = 51; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event sub_events = 52; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  Event super_event = 53; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  oneof translator {
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 55; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 56; // Data type: Text.
  CreativeWork work_featured = 57; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_performed = 58; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 59; // Data type: URL.
  string alternate_name = 60; // Data type: Text.
  string description = 61; // Data type: Text.
  string disambiguating_description = 62; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 63; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 64; // Data type: Text.
    string url = 65; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 66; // An image file.
    string url = 67; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 68; // Data type: URL.
    CreativeWork creative_work = 69; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 70; // Data type: Text.
  Action potential_action = 71; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 72; // Data type: URL.
  oneof subject_of {
    Event event = 73; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 74; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 75; // Data type: URL.
}
message BroadcastService {
  // from BroadcastService
  Place area = 1; // Entities that have a somewhat fixed, physical extension.
  Organization broadcast_affiliate_of = 2; // An organization such as a school, NGO, corporation, club, etc.
  string broadcast_display_name = 3; // Data type: Text.
  oneof broadcast_frequency {
    string text = 4; // Data type: Text.
    BroadcastFrequencySpecification broadcast_frequency_specification = 5; // The frequency in MHz and the modulation used for a particular BroadcastService.
  }
  string broadcast_timezone = 6; // Data type: Text.
  Organization broadcaster = 7; // An organization such as a school, NGO, corporation, club, etc.
  string call_sign = 8; // Data type: Text.
  BroadcastChannel has_broadcast_channel = 9; // A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
  oneof in_language {
    string text = 10; // Data type: Text.
    Language language = 11; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  BroadcastService parent_service = 12; // A delivery service through which content is provided via broadcast over the air or online.
  string video_format = 13; // Data type: Text.
  // inherited from Service
  AggregateRating aggregate_rating = 14; // The average rating based on multiple ratings or reviews.
  oneof area_served {
    string text = 15; // Data type: Text.
    GeoShape geo_shape = 16; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 17; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 18; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience audience = 19; // Intended audience for an item, i.e. the group for whom the item was created.
  ServiceChannel available_channel = 20; // A means for accessing a service, e.g. a government office location, web site, or phone number.
  string award = 21; // Data type: Text.
  oneof brand {
    Organization organization = 22; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 23; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof broker {
    Organization organization = 24; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 25; // A person (alive, dead, undead, or fictional).
  }
  oneof category {
    string text = 26; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 27; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 28; // The most generic type of item.
    string url = 29; // Data type: URL.
  }
  OfferCatalog has_offer_catalog = 30; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  OpeningHoursSpecification hours_available = 31; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof is_related_to {
    Product product = 32; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 33; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 34; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 35; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof logo {
    string url = 36; // Data type: URL.
    ImageObject image_object = 37; // An image file.
  }
  oneof offers {
    Demand demand = 38; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 39; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  Thing produces = 40; // The most generic type of item.
  oneof provider {
    Organization organization = 41; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 42; // A person (alive, dead, undead, or fictional).
  }
  string provider_mobility = 43; // Data type: Text.
  Review review = 44; // A review of an item - for example, of a restaurant, movie, or store.
  oneof service_area {
    GeoShape geo_shape = 45; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 46; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 47; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience service_audience = 48; // Intended audience for an item, i.e. the group for whom the item was created.
  Thing service_output = 49; // The most generic type of item.
  oneof service_type {
    string text = 50; // Data type: Text.
    GovernmentBenefitsType government_benefits_type = 51; // GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
  }
  string slogan = 52; // Data type: Text.
  string terms_of_service = 53; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 54; // Data type: URL.
  string alternate_name = 55; // Data type: Text.
  string description = 56; // Data type: Text.
  string disambiguating_description = 57; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 58; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 59; // Data type: Text.
    string url = 60; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 61; // An image file.
    string url = 62; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 63; // Data type: URL.
    CreativeWork creative_work = 64; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 65; // Data type: Text.
  Action potential_action = 66; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 67; // Data type: URL.
  oneof subject_of {
    Event event = 68; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 69; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 70; // Data type: URL.
}
message BroadcastFrequencySpecification {
  // from BroadcastFrequencySpecification
  oneof broadcast_frequency_value {
    QuantitativeValue quantitative_value = 1; //  A point value or interval for product characteristics and other purposes.
    float32 number = 2; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof broadcast_signal_modulation {
    string text = 3; // Data type: Text.
    QualitativeValue qualitative_value = 4; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  }
  string broadcast_sub_channel = 5; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 6; // Data type: URL.
  string alternate_name = 7; // Data type: Text.
  string description = 8; // Data type: Text.
  string disambiguating_description = 9; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 11; // Data type: Text.
    string url = 12; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 13; // An image file.
    string url = 14; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 15; // Data type: URL.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 17; // Data type: Text.
  Action potential_action = 18; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 19; // Data type: URL.
  oneof subject_of {
    Event event = 20; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 22; // Data type: URL.
}
message BroadcastChannel {
  // from BroadcastChannel
  string broadcast_channel_id = 1; // Data type: Text.
  oneof broadcast_frequency {
    string text = 2; // Data type: Text.
    BroadcastFrequencySpecification broadcast_frequency_specification = 3; // The frequency in MHz and the modulation used for a particular BroadcastService.
  }
  string broadcast_service_tier = 4; // Data type: Text.
  string genre = 5; // Data type: URL.
  CableOrSatelliteService in_broadcast_lineup = 6; // A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
  BroadcastService provides_broadcast_service = 7; // A delivery service through which content is provided via broadcast over the air or online.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 8; // Data type: URL.
  string alternate_name = 9; // Data type: Text.
  string description = 10; // Data type: Text.
  string disambiguating_description = 11; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 12; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 13; // Data type: Text.
    string url = 14; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 15; // An image file.
    string url = 16; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 17; // Data type: URL.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 19; // Data type: Text.
  Action potential_action = 20; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 21; // Data type: URL.
  oneof subject_of {
    Event event = 22; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 23; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 24; // Data type: URL.
}
message CableOrSatelliteService {
  // from CableOrSatelliteService
  // inherited from Service
  AggregateRating aggregate_rating = 1; // The average rating based on multiple ratings or reviews.
  oneof area_served {
    string text = 2; // Data type: Text.
    GeoShape geo_shape = 3; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 4; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 5; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience audience = 6; // Intended audience for an item, i.e. the group for whom the item was created.
  ServiceChannel available_channel = 7; // A means for accessing a service, e.g. a government office location, web site, or phone number.
  string award = 8; // Data type: Text.
  oneof brand {
    Organization organization = 9; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 10; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof broker {
    Organization organization = 11; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 12; // A person (alive, dead, undead, or fictional).
  }
  oneof category {
    string text = 13; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 14; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 15; // The most generic type of item.
    string url = 16; // Data type: URL.
  }
  OfferCatalog has_offer_catalog = 17; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  OpeningHoursSpecification hours_available = 18; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof is_related_to {
    Product product = 19; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 20; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 21; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 22; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof logo {
    string url = 23; // Data type: URL.
    ImageObject image_object = 24; // An image file.
  }
  oneof offers {
    Demand demand = 25; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 26; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  Thing produces = 27; // The most generic type of item.
  oneof provider {
    Organization organization = 28; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 29; // A person (alive, dead, undead, or fictional).
  }
  string provider_mobility = 30; // Data type: Text.
  Review review = 31; // A review of an item - for example, of a restaurant, movie, or store.
  oneof service_area {
    GeoShape geo_shape = 32; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 33; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 34; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience service_audience = 35; // Intended audience for an item, i.e. the group for whom the item was created.
  Thing service_output = 36; // The most generic type of item.
  oneof service_type {
    string text = 37; // Data type: Text.
    GovernmentBenefitsType government_benefits_type = 38; // GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
  }
  string slogan = 39; // Data type: Text.
  string terms_of_service = 40; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 41; // Data type: URL.
  string alternate_name = 42; // Data type: Text.
  string description = 43; // Data type: Text.
  string disambiguating_description = 44; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 45; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 46; // Data type: Text.
    string url = 47; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 48; // An image file.
    string url = 49; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 50; // Data type: URL.
    CreativeWork creative_work = 51; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 52; // Data type: Text.
  Action potential_action = 53; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 54; // Data type: URL.
  oneof subject_of {
    Event event = 55; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 56; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 57; // Data type: URL.
}
message SizeSpecification {
  // from SizeSpecification
  QuantitativeValue has_measurement = 1; //  A point value or interval for product characteristics and other purposes.
  oneof size_group {
    string text = 2; // Data type: Text.
    SizeGroupEnumeration size_group_enumeration = 3; // Enumerates common size groups for various product categories.
  }
  oneof size_system {
    string text = 4; // Data type: Text.
    SizeSystemEnumeration size_system_enumeration = 5; // Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables or "Imperial" for screws.
  }
  QuantitativeValue suggested_age = 6; //  A point value or interval for product characteristics and other purposes.
  oneof suggested_gender {
    GenderType gender_type = 7; // An enumeration of genders.
    string text = 8; // Data type: Text.
  }
  QuantitativeValue suggested_measurement = 9; //  A point value or interval for product characteristics and other purposes.
  // inherited from QualitativeValue
  PropertyValue additional_property = 10; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  QualitativeValue equal = 11; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue greater = 12; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue greater_or_equal = 13; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue lesser = 14; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue lesser_or_equal = 15; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  QualitativeValue non_equal = 16; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
  oneof value_reference {
    PropertyValue property_value = 17; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    StructuredValue structured_value = 18; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
    QualitativeValue qualitative_value = 19; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
    MeasurementTypeEnumeration measurement_type_enumeration = 20; // Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
    QuantitativeValue quantitative_value = 21; //  A point value or interval for product characteristics and other purposes.
    string text = 22; // Data type: Text.
    DefinedTerm defined_term = 23; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    Enumeration enumeration = 24; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
  }
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 25; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 26; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 27; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 28; // Data type: URL.
  string alternate_name = 29; // Data type: Text.
  string description = 30; // Data type: Text.
  string disambiguating_description = 31; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 32; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 33; // Data type: Text.
    string url = 34; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 35; // An image file.
    string url = 36; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 37; // Data type: URL.
    CreativeWork creative_work = 38; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 39; // Data type: Text.
  Action potential_action = 40; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 41; // Data type: URL.
  oneof subject_of {
    Event event = 42; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 43; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 44; // Data type: URL.
}
message SizeSystemEnumeration {
  // from SizeSystemEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message SizeGroupEnumeration {
  // from SizeGroupEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message CorrectionComment {
  // from CorrectionComment
  // inherited from Comment
  float32 downvote_count = 1; // Data type: Integer.
  Comment parent_item = 2; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 upvote_count = 3; // Data type: Integer.
  // inherited from CreativeWork
  oneof object_object {
    string text = 4; // Data type: Text.
    QuantitativeValue quantitative_value = 5; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 6; // The most generic type of item.
  string abstract = 7; // Data type: Text.
  string access_mode = 8; // Data type: Text.
  ItemList access_mode_sufficient = 9; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 10; // Data type: Text.
  string accessibility_control = 11; // Data type: Text.
  string accessibility_feature = 12; // Data type: Text.
  string accessibility_hazard = 13; // Data type: Text.
  string accessibility_summary = 14; // Data type: Text.
  Person accountable_person = 15; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 17; // Data type: URL.
  }
  AggregateRating aggregate_rating = 18; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 19; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 20; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 21; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 22; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 23; // Data type: Text.
  }
  MediaObject associated_media = 24; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 25; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 26; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 27; // An audio file.
    MusicRecording music_recording = 28; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 29; // A person (alive, dead, undead, or fictional).
    Organization organization = 30; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 31; // Data type: Text.
  string awards = 32; // Data type: Text.
  Person character = 33; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 34; // Data type: Text.
    CreativeWork creative_work = 35; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 36; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 37; // Data type: Integer.
  string conditions_of_access = 38; // Data type: Text.
  Place content_location = 39; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 40; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 41; // Data type: Text.
  }
  string content_reference_time = 42; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 45; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 46; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 47; // Data type: Text.
  float32 copyright_year = 48; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 49; // A [[comment]] that corrects [[CreativeWork]].
    string text = 50; // Data type: Text.
    string url = 51; // Data type: URL.
  }
  Country country_of_origin = 52; // A country.
  oneof creative_work_status {
    string text = 53; // Data type: Text.
    DefinedTerm defined_term = 54; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 55; // A person (alive, dead, undead, or fictional).
    Organization organization = 56; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 57; // Data type: Text.
  string date_created = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 60; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 61; // Data type: URL.
  string edit_eidr = 62; // Data type: Text.
  Person editor = 63; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 64; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 65; // Data type: URL.
    string text = 66; // Data type: Text.
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 69; // Data type: Text.
  }
  MediaObject encoding = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 71; // Data type: Text.
  MediaObject encodings = 72; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 73; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 74; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 75; // Data type: URL.
  oneof funder {
    Organization organization = 76; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 77; // A person (alive, dead, undead, or fictional).
  }
  string genre = 78; // Data type: URL.
  CreativeWork has_part = 79; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 80; // Data type: Text.
  oneof in_language {
    string text = 81; // Data type: Text.
    Language language = 82; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 83; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 84; // Data type: Text.
  Claim interpreted_as_claim = 85; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 86; // Boolean: True or False.
  oneof is_based_on {
    string url = 87; // Data type: URL.
    Product product = 88; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 91; // Data type: URL.
    Product product = 92; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 93; // Boolean: True or False.
  oneof is_part_of {
    string url = 94; // Data type: URL.
    CreativeWork creative_work = 95; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 96; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 97; // Data type: URL.
    string text = 98; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 99; // Data type: Text.
    DefinedTerm defined_term = 100; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 101; // Data type: URL.
    CreativeWork creative_work = 102; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 103; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 104; // The most generic type of item.
  oneof maintainer {
    Person person = 105; // A person (alive, dead, undead, or fictional).
    Organization organization = 106; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 107; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 108; // Data type: URL.
    string text = 109; // Data type: Text.
  }
  Thing mentions = 110; // The most generic type of item.
  oneof offers {
    Demand demand = 111; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 112; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 113; // Data type: Text.
    DefinedTerm defined_term = 114; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 115; // Data type: Text.
    float32 integer = 116; // Data type: Integer.
  }
  oneof producer {
    Person person = 117; // A person (alive, dead, undead, or fictional).
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 119; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 120; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 121; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 122; // A person (alive, dead, undead, or fictional).
    Organization organization = 123; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 124; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 125; // Data type: URL.
    CreativeWork creative_work = 126; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 127; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 128; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 129; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 130; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 131; // Data type: Text.
  string sd_date_published = 132; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 133; // Data type: URL.
    CreativeWork creative_work = 134; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 135; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 136; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 137; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 138; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 139; // Data type: Text.
    QuantitativeValue quantitative_value = 140; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 141; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 142; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 143; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 146; // Data type: Text.
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 148; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 149; // Data type: Text.
  string text = 150; // Data type: Text.
  string thumbnail_url = 151; // Data type: URL.
  Duration time_required = 152; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 153; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 156; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 157; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 158; // Data type: URL.
  }
  oneof version {
    string text = 159; // Data type: Text.
    float32 number = 160; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 161; // A video file.
    Clip clip = 162; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 164; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 165; // Data type: URL.
  string alternate_name = 166; // Data type: Text.
  string description = 167; // Data type: Text.
  string disambiguating_description = 168; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 169; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 170; // Data type: Text.
    string url = 171; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 172; // An image file.
    string url = 173; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 174; // Data type: URL.
    CreativeWork creative_work = 175; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 176; // Data type: Text.
  Action potential_action = 177; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 178; // Data type: URL.
  oneof subject_of {
    Event event = 179; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 180; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 181; // Data type: URL.
}
message Claim {
  // from Claim
  CreativeWork appearance = 1; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof claim_interpreter {
    Person person = 2; // A person (alive, dead, undead, or fictional).
    Organization organization = 3; // An organization such as a school, NGO, corporation, club, etc.
  }
  CreativeWork first_appearance = 4; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from CreativeWork
  oneof object_object {
    string text = 5; // Data type: Text.
    QuantitativeValue quantitative_value = 6; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 7; // The most generic type of item.
  string abstract = 8; // Data type: Text.
  string access_mode = 9; // Data type: Text.
  ItemList access_mode_sufficient = 10; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 11; // Data type: Text.
  string accessibility_control = 12; // Data type: Text.
  string accessibility_feature = 13; // Data type: Text.
  string accessibility_hazard = 14; // Data type: Text.
  string accessibility_summary = 15; // Data type: Text.
  Person accountable_person = 16; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 18; // Data type: URL.
  }
  AggregateRating aggregate_rating = 19; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 20; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 21; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 22; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 23; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 24; // Data type: Text.
  }
  MediaObject associated_media = 25; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 26; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 27; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 28; // An audio file.
    MusicRecording music_recording = 29; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 30; // A person (alive, dead, undead, or fictional).
    Organization organization = 31; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 32; // Data type: Text.
  string awards = 33; // Data type: Text.
  Person character = 34; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 35; // Data type: Text.
    CreativeWork creative_work = 36; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 37; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 38; // Data type: Integer.
  string conditions_of_access = 39; // Data type: Text.
  Place content_location = 40; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 41; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 42; // Data type: Text.
  }
  string content_reference_time = 43; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 46; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 47; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 48; // Data type: Text.
  float32 copyright_year = 49; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 50; // A [[comment]] that corrects [[CreativeWork]].
    string text = 51; // Data type: Text.
    string url = 52; // Data type: URL.
  }
  Country country_of_origin = 53; // A country.
  oneof creative_work_status {
    string text = 54; // Data type: Text.
    DefinedTerm defined_term = 55; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 56; // A person (alive, dead, undead, or fictional).
    Organization organization = 57; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 58; // Data type: Text.
  string date_created = 59; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 60; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 61; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 62; // Data type: URL.
  string edit_eidr = 63; // Data type: Text.
  Person editor = 64; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 65; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 66; // Data type: URL.
    string text = 67; // Data type: Text.
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 69; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 70; // Data type: Text.
  }
  MediaObject encoding = 71; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 72; // Data type: Text.
  MediaObject encodings = 73; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 74; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 75; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 76; // Data type: URL.
  oneof funder {
    Organization organization = 77; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 78; // A person (alive, dead, undead, or fictional).
  }
  string genre = 79; // Data type: URL.
  CreativeWork has_part = 80; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 81; // Data type: Text.
  oneof in_language {
    string text = 82; // Data type: Text.
    Language language = 83; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 84; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 85; // Data type: Text.
  Claim interpreted_as_claim = 86; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 87; // Boolean: True or False.
  oneof is_based_on {
    string url = 88; // Data type: URL.
    Product product = 89; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 91; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 92; // Data type: URL.
    Product product = 93; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 94; // Boolean: True or False.
  oneof is_part_of {
    string url = 95; // Data type: URL.
    CreativeWork creative_work = 96; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 97; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 98; // Data type: URL.
    string text = 99; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 100; // Data type: Text.
    DefinedTerm defined_term = 101; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 102; // Data type: URL.
    CreativeWork creative_work = 103; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 104; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 105; // The most generic type of item.
  oneof maintainer {
    Person person = 106; // A person (alive, dead, undead, or fictional).
    Organization organization = 107; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 108; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 109; // Data type: URL.
    string text = 110; // Data type: Text.
  }
  Thing mentions = 111; // The most generic type of item.
  oneof offers {
    Demand demand = 112; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 113; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 114; // Data type: Text.
    DefinedTerm defined_term = 115; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 116; // Data type: Text.
    float32 integer = 117; // Data type: Integer.
  }
  oneof producer {
    Person person = 118; // A person (alive, dead, undead, or fictional).
    Organization organization = 119; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 120; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 121; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 122; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 123; // A person (alive, dead, undead, or fictional).
    Organization organization = 124; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 125; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 126; // Data type: URL.
    CreativeWork creative_work = 127; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 128; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 129; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 130; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 131; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 132; // Data type: Text.
  string sd_date_published = 133; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 134; // Data type: URL.
    CreativeWork creative_work = 135; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 136; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 137; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 138; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 139; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 140; // Data type: Text.
    QuantitativeValue quantitative_value = 141; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 142; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 143; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 144; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 146; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 147; // Data type: Text.
    DefinedTerm defined_term = 148; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 149; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 150; // Data type: Text.
  string text = 151; // Data type: Text.
  string thumbnail_url = 152; // Data type: URL.
  Duration time_required = 153; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 154; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 155; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 156; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 157; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 158; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 159; // Data type: URL.
  }
  oneof version {
    string text = 160; // Data type: Text.
    float32 number = 161; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 162; // A video file.
    Clip clip = 163; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 164; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 165; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 166; // Data type: URL.
  string alternate_name = 167; // Data type: Text.
  string description = 168; // Data type: Text.
  string disambiguating_description = 169; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 170; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 171; // Data type: Text.
    string url = 172; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 173; // An image file.
    string url = 174; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 175; // Data type: URL.
    CreativeWork creative_work = 176; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 177; // Data type: Text.
  Action potential_action = 178; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 179; // Data type: URL.
  oneof subject_of {
    Event event = 180; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 181; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 182; // Data type: URL.
}
message WebPage {
  // from WebPage
  oneof breadcrumb {
    string text = 1; // Data type: Text.
    BreadcrumbList breadcrumb_list = 2; // A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.       
  }
  string last_reviewed = 3; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  WebPageElement main_content_of_page = 4; // A web page element, like a table or an image.
  ImageObject primary_image_of_page = 5; // An image file.
  string related_link = 6; // Data type: URL.
  oneof reviewed_by {
    Organization organization = 7; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 8; // A person (alive, dead, undead, or fictional).
  }
  string significant_link = 9; // Data type: URL.
  string significant_links = 10; // Data type: URL.
  oneof speakable {
    string url = 11; // Data type: URL.
    SpeakableSpecification speakable_specification = 12; // A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
  }
  Specialty specialty = 13; // Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
  // inherited from CreativeWork
  oneof object_object {
    string text = 14; // Data type: Text.
    QuantitativeValue quantitative_value = 15; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 16; // The most generic type of item.
  string abstract = 17; // Data type: Text.
  string access_mode = 18; // Data type: Text.
  ItemList access_mode_sufficient = 19; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 20; // Data type: Text.
  string accessibility_control = 21; // Data type: Text.
  string accessibility_feature = 22; // Data type: Text.
  string accessibility_hazard = 23; // Data type: Text.
  string accessibility_summary = 24; // Data type: Text.
  Person accountable_person = 25; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 27; // Data type: URL.
  }
  AggregateRating aggregate_rating = 28; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 29; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 30; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 31; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 32; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 33; // Data type: Text.
  }
  MediaObject associated_media = 34; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 35; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 36; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 37; // An audio file.
    MusicRecording music_recording = 38; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 39; // A person (alive, dead, undead, or fictional).
    Organization organization = 40; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 41; // Data type: Text.
  string awards = 42; // Data type: Text.
  Person character = 43; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 44; // Data type: Text.
    CreativeWork creative_work = 45; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 46; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 47; // Data type: Integer.
  string conditions_of_access = 48; // Data type: Text.
  Place content_location = 49; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 50; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 51; // Data type: Text.
  }
  string content_reference_time = 52; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 54; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 56; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 57; // Data type: Text.
  float32 copyright_year = 58; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 59; // A [[comment]] that corrects [[CreativeWork]].
    string text = 60; // Data type: Text.
    string url = 61; // Data type: URL.
  }
  Country country_of_origin = 62; // A country.
  oneof creative_work_status {
    string text = 63; // Data type: Text.
    DefinedTerm defined_term = 64; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 65; // A person (alive, dead, undead, or fictional).
    Organization organization = 66; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 67; // Data type: Text.
  string date_created = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 69; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 70; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 71; // Data type: URL.
  string edit_eidr = 72; // Data type: Text.
  Person editor = 73; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 74; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 75; // Data type: URL.
    string text = 76; // Data type: Text.
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 78; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 79; // Data type: Text.
  }
  MediaObject encoding = 80; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 81; // Data type: Text.
  MediaObject encodings = 82; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 83; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 84; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 85; // Data type: URL.
  oneof funder {
    Organization organization = 86; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 87; // A person (alive, dead, undead, or fictional).
  }
  string genre = 88; // Data type: URL.
  CreativeWork has_part = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 90; // Data type: Text.
  oneof in_language {
    string text = 91; // Data type: Text.
    Language language = 92; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 93; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 94; // Data type: Text.
  Claim interpreted_as_claim = 95; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 96; // Boolean: True or False.
  oneof is_based_on {
    string url = 97; // Data type: URL.
    Product product = 98; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 100; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 101; // Data type: URL.
    Product product = 102; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 103; // Boolean: True or False.
  oneof is_part_of {
    string url = 104; // Data type: URL.
    CreativeWork creative_work = 105; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 106; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 107; // Data type: URL.
    string text = 108; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 109; // Data type: Text.
    DefinedTerm defined_term = 110; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 111; // Data type: URL.
    CreativeWork creative_work = 112; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 113; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 114; // The most generic type of item.
  oneof maintainer {
    Person person = 115; // A person (alive, dead, undead, or fictional).
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 117; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 118; // Data type: URL.
    string text = 119; // Data type: Text.
  }
  Thing mentions = 120; // The most generic type of item.
  oneof offers {
    Demand demand = 121; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 122; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 123; // Data type: Text.
    DefinedTerm defined_term = 124; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 125; // Data type: Text.
    float32 integer = 126; // Data type: Integer.
  }
  oneof producer {
    Person person = 127; // A person (alive, dead, undead, or fictional).
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 129; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 130; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 131; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 132; // A person (alive, dead, undead, or fictional).
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 134; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 135; // Data type: URL.
    CreativeWork creative_work = 136; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 137; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 138; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 139; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 140; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 141; // Data type: Text.
  string sd_date_published = 142; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 143; // Data type: URL.
    CreativeWork creative_work = 144; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 146; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 147; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 148; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 149; // Data type: Text.
    QuantitativeValue quantitative_value = 150; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 151; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 152; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 153; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 156; // Data type: Text.
    DefinedTerm defined_term = 157; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 158; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 159; // Data type: Text.
  string text = 160; // Data type: Text.
  string thumbnail_url = 161; // Data type: URL.
  Duration time_required = 162; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 164; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 165; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 166; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 167; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 168; // Data type: URL.
  }
  oneof version {
    string text = 169; // Data type: Text.
    float32 number = 170; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 171; // A video file.
    Clip clip = 172; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 174; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 175; // Data type: URL.
  string alternate_name = 176; // Data type: Text.
  string description = 177; // Data type: Text.
  string disambiguating_description = 178; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 179; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 180; // Data type: Text.
    string url = 181; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 182; // An image file.
    string url = 183; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 184; // Data type: URL.
    CreativeWork creative_work = 185; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 186; // Data type: Text.
  Action potential_action = 187; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 188; // Data type: URL.
  oneof subject_of {
    Event event = 189; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 190; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 191; // Data type: URL.
}
message SpeakableSpecification {
  // from SpeakableSpecification
  string css_selector = 1; // Text representing a CSS selector.
  string xpath = 2; // Text representing an XPath (typically but not necessarily version 1.0).
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 3; // Data type: URL.
  string alternate_name = 4; // Data type: Text.
  string description = 5; // Data type: Text.
  string disambiguating_description = 6; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 7; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 8; // Data type: Text.
    string url = 9; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 10; // An image file.
    string url = 11; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 12; // Data type: URL.
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 14; // Data type: Text.
  Action potential_action = 15; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 16; // Data type: URL.
  oneof subject_of {
    Event event = 17; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 19; // Data type: URL.
}
message BreadcrumbList {
  // from BreadcrumbList
  // inherited from ItemList
  oneof item_list_element {
    string text = 1; // Data type: Text.
    Thing thing = 2; // The most generic type of item.
    ListItem list_item = 3; // An list item, e.g. a step in a checklist or how-to description.
  }
  oneof item_list_order {
    ItemListOrderType item_list_order_type = 4; // Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
    string text = 5; // Data type: Text.
  }
  float32 number_of_items = 6; // Data type: Integer.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message WebPageElement {
  // from WebPageElement
  string css_selector = 1; // Text representing a CSS selector.
  string xpath = 2; // Text representing an XPath (typically but not necessarily version 1.0).
  // inherited from CreativeWork
  oneof object_object {
    string text = 3; // Data type: Text.
    QuantitativeValue quantitative_value = 4; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 5; // The most generic type of item.
  string abstract = 6; // Data type: Text.
  string access_mode = 7; // Data type: Text.
  ItemList access_mode_sufficient = 8; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 9; // Data type: Text.
  string accessibility_control = 10; // Data type: Text.
  string accessibility_feature = 11; // Data type: Text.
  string accessibility_hazard = 12; // Data type: Text.
  string accessibility_summary = 13; // Data type: Text.
  Person accountable_person = 14; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 15; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 16; // Data type: URL.
  }
  AggregateRating aggregate_rating = 17; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 18; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 19; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 20; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 21; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 22; // Data type: Text.
  }
  MediaObject associated_media = 23; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 24; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 25; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 26; // An audio file.
    MusicRecording music_recording = 27; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 28; // A person (alive, dead, undead, or fictional).
    Organization organization = 29; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 30; // Data type: Text.
  string awards = 31; // Data type: Text.
  Person character = 32; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 33; // Data type: Text.
    CreativeWork creative_work = 34; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 35; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 36; // Data type: Integer.
  string conditions_of_access = 37; // Data type: Text.
  Place content_location = 38; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 39; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 40; // Data type: Text.
  }
  string content_reference_time = 41; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 46; // Data type: Text.
  float32 copyright_year = 47; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 48; // A [[comment]] that corrects [[CreativeWork]].
    string text = 49; // Data type: Text.
    string url = 50; // Data type: URL.
  }
  Country country_of_origin = 51; // A country.
  oneof creative_work_status {
    string text = 52; // Data type: Text.
    DefinedTerm defined_term = 53; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 54; // A person (alive, dead, undead, or fictional).
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 56; // Data type: Text.
  string date_created = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 59; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 60; // Data type: URL.
  string edit_eidr = 61; // Data type: Text.
  Person editor = 62; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 63; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 64; // Data type: URL.
    string text = 65; // Data type: Text.
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 68; // Data type: Text.
  }
  MediaObject encoding = 69; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 70; // Data type: Text.
  MediaObject encodings = 71; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 72; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 73; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 74; // Data type: URL.
  oneof funder {
    Organization organization = 75; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 76; // A person (alive, dead, undead, or fictional).
  }
  string genre = 77; // Data type: URL.
  CreativeWork has_part = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 79; // Data type: Text.
  oneof in_language {
    string text = 80; // Data type: Text.
    Language language = 81; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 82; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 83; // Data type: Text.
  Claim interpreted_as_claim = 84; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 85; // Boolean: True or False.
  oneof is_based_on {
    string url = 86; // Data type: URL.
    Product product = 87; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 90; // Data type: URL.
    Product product = 91; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 92; // Boolean: True or False.
  oneof is_part_of {
    string url = 93; // Data type: URL.
    CreativeWork creative_work = 94; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 95; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 96; // Data type: URL.
    string text = 97; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 98; // Data type: Text.
    DefinedTerm defined_term = 99; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 100; // Data type: URL.
    CreativeWork creative_work = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 102; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 103; // The most generic type of item.
  oneof maintainer {
    Person person = 104; // A person (alive, dead, undead, or fictional).
    Organization organization = 105; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 106; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 107; // Data type: URL.
    string text = 108; // Data type: Text.
  }
  Thing mentions = 109; // The most generic type of item.
  oneof offers {
    Demand demand = 110; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 111; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 112; // Data type: Text.
    DefinedTerm defined_term = 113; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 114; // Data type: Text.
    float32 integer = 115; // Data type: Integer.
  }
  oneof producer {
    Person person = 116; // A person (alive, dead, undead, or fictional).
    Organization organization = 117; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 119; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 120; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 121; // A person (alive, dead, undead, or fictional).
    Organization organization = 122; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 123; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 124; // Data type: URL.
    CreativeWork creative_work = 125; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 126; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 127; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 128; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 129; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 130; // Data type: Text.
  string sd_date_published = 131; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 132; // Data type: URL.
    CreativeWork creative_work = 133; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 134; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 135; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 136; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 137; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 138; // Data type: Text.
    QuantitativeValue quantitative_value = 139; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 140; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 141; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 142; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 143; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 144; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 145; // Data type: Text.
    DefinedTerm defined_term = 146; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 147; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 148; // Data type: Text.
  string text = 149; // Data type: Text.
  string thumbnail_url = 150; // Data type: URL.
  Duration time_required = 151; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 152; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 155; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 156; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 157; // Data type: URL.
  }
  oneof version {
    string text = 158; // Data type: Text.
    float32 number = 159; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 160; // A video file.
    Clip clip = 161; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 164; // Data type: URL.
  string alternate_name = 165; // Data type: Text.
  string description = 166; // Data type: Text.
  string disambiguating_description = 167; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 168; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 169; // Data type: Text.
    string url = 170; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 171; // An image file.
    string url = 172; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 173; // Data type: URL.
    CreativeWork creative_work = 174; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 175; // Data type: Text.
  Action potential_action = 176; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 177; // Data type: URL.
  oneof subject_of {
    Event event = 178; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 180; // Data type: URL.
}
message Specialty {
  // from Specialty
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message PhysicalActivityCategory {
  // from PhysicalActivityCategory
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message MerchantReturnPolicy {
  // from MerchantReturnPolicy
  PropertyValue additional_property = 1; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
  ReturnFeesEnumeration customer_remorse_return_fees = 2; // Enumerates several kinds of policies for product return fees.
  ReturnLabelSourceEnumeration customer_remorse_return_label_source = 3; // Enumerates several types of return labels for product returns.
  MonetaryAmount customer_remorse_return_shipping_fees_amount = 4; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  bool in_store_returns_offered = 5; // Boolean: True or False.
  OfferItemCondition item_condition = 6; // A list of possible conditions for the item.
  ReturnFeesEnumeration item_defect_return_fees = 7; // Enumerates several kinds of policies for product return fees.
  ReturnLabelSourceEnumeration item_defect_return_label_source = 8; // Enumerates several types of return labels for product returns.
  MonetaryAmount item_defect_return_shipping_fees_amount = 9; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  oneof merchant_return_days {
    string date = 10; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
    string date_time = 11; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
    float32 integer = 12; // Data type: Integer.
  }
  string merchant_return_link = 13; // Data type: URL.
  RefundTypeEnumeration refund_type = 14; // Enumerates several kinds of product return refund types.
  oneof restocking_fee {
    MonetaryAmount monetary_amount = 15; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
    float32 number = 16; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  ReturnFeesEnumeration return_fees = 17; // Enumerates several kinds of policies for product return fees.
  ReturnLabelSourceEnumeration return_label_source = 18; // Enumerates several types of return labels for product returns.
  ReturnMethodEnumeration return_method = 19; // Enumerates several types of product return methods.
  MerchantReturnEnumeration return_policy_category = 20; // Enumerates several kinds of product return policies.
  oneof return_policy_country {
    Country country = 21; // A country.
    string text = 22; // Data type: Text.
  }
  MerchantReturnPolicySeasonalOverride return_policy_seasonal_override = 23; // A seasonal override of a return policy, for example used for holidays.
  MonetaryAmount return_shipping_fees_amount = 24; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 25; // Data type: URL.
  string alternate_name = 26; // Data type: Text.
  string description = 27; // Data type: Text.
  string disambiguating_description = 28; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 29; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 30; // Data type: Text.
    string url = 31; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 32; // An image file.
    string url = 33; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 34; // Data type: URL.
    CreativeWork creative_work = 35; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 36; // Data type: Text.
  Action potential_action = 37; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 38; // Data type: URL.
  oneof subject_of {
    Event event = 39; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 40; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 41; // Data type: URL.
}
message ReturnFeesEnumeration {
  // from ReturnFeesEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message ReturnLabelSourceEnumeration {
  // from ReturnLabelSourceEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message MerchantReturnPolicySeasonalOverride {
  // from MerchantReturnPolicySeasonalOverride
  string end_date = 1; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof merchant_return_days {
    string date = 2; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
    string date_time = 3; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
    float32 integer = 4; // Data type: Integer.
  }
  MerchantReturnEnumeration return_policy_category = 5; // Enumerates several kinds of product return policies.
  string start_date = 6; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message MerchantReturnEnumeration {
  // from MerchantReturnEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message RefundTypeEnumeration {
  // from RefundTypeEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message ReturnMethodEnumeration {
  // from ReturnMethodEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message OfferItemCondition {
  // from OfferItemCondition
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message EnergyConsumptionDetails {
  // from EnergyConsumptionDetails
  EUEnergyEfficiencyEnumeration energy_efficiency_scale_max = 1; // Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
  EUEnergyEfficiencyEnumeration energy_efficiency_scale_min = 2; // Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
  EnergyEfficiencyEnumeration has_energy_efficiency_category = 3; // Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of several international energy efficiency standards.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message EUEnergyEfficiencyEnumeration {
  // from EUEnergyEfficiencyEnumeration
  // inherited from EnergyEfficiencyEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message EnergyEfficiencyEnumeration {
  // from EnergyEfficiencyEnumeration
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message NonprofitType {
  // from NonprofitType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message AboutPage {
  // from AboutPage
  // inherited from WebPage
  oneof breadcrumb {
    string text = 1; // Data type: Text.
    BreadcrumbList breadcrumb_list = 2; // A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.       
  }
  string last_reviewed = 3; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  WebPageElement main_content_of_page = 4; // A web page element, like a table or an image.
  ImageObject primary_image_of_page = 5; // An image file.
  string related_link = 6; // Data type: URL.
  oneof reviewed_by {
    Organization organization = 7; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 8; // A person (alive, dead, undead, or fictional).
  }
  string significant_link = 9; // Data type: URL.
  string significant_links = 10; // Data type: URL.
  oneof speakable {
    string url = 11; // Data type: URL.
    SpeakableSpecification speakable_specification = 12; // A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
  }
  Specialty specialty = 13; // Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
  // inherited from CreativeWork
  oneof object_object {
    string text = 14; // Data type: Text.
    QuantitativeValue quantitative_value = 15; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 16; // The most generic type of item.
  string abstract = 17; // Data type: Text.
  string access_mode = 18; // Data type: Text.
  ItemList access_mode_sufficient = 19; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 20; // Data type: Text.
  string accessibility_control = 21; // Data type: Text.
  string accessibility_feature = 22; // Data type: Text.
  string accessibility_hazard = 23; // Data type: Text.
  string accessibility_summary = 24; // Data type: Text.
  Person accountable_person = 25; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 27; // Data type: URL.
  }
  AggregateRating aggregate_rating = 28; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 29; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 30; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 31; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 32; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 33; // Data type: Text.
  }
  MediaObject associated_media = 34; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 35; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 36; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 37; // An audio file.
    MusicRecording music_recording = 38; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 39; // A person (alive, dead, undead, or fictional).
    Organization organization = 40; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 41; // Data type: Text.
  string awards = 42; // Data type: Text.
  Person character = 43; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 44; // Data type: Text.
    CreativeWork creative_work = 45; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 46; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 47; // Data type: Integer.
  string conditions_of_access = 48; // Data type: Text.
  Place content_location = 49; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 50; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 51; // Data type: Text.
  }
  string content_reference_time = 52; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 53; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 54; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 56; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 57; // Data type: Text.
  float32 copyright_year = 58; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 59; // A [[comment]] that corrects [[CreativeWork]].
    string text = 60; // Data type: Text.
    string url = 61; // Data type: URL.
  }
  Country country_of_origin = 62; // A country.
  oneof creative_work_status {
    string text = 63; // Data type: Text.
    DefinedTerm defined_term = 64; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 65; // A person (alive, dead, undead, or fictional).
    Organization organization = 66; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 67; // Data type: Text.
  string date_created = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 69; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 70; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 71; // Data type: URL.
  string edit_eidr = 72; // Data type: Text.
  Person editor = 73; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 74; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 75; // Data type: URL.
    string text = 76; // Data type: Text.
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 78; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 79; // Data type: Text.
  }
  MediaObject encoding = 80; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 81; // Data type: Text.
  MediaObject encodings = 82; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 83; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 84; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 85; // Data type: URL.
  oneof funder {
    Organization organization = 86; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 87; // A person (alive, dead, undead, or fictional).
  }
  string genre = 88; // Data type: URL.
  CreativeWork has_part = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 90; // Data type: Text.
  oneof in_language {
    string text = 91; // Data type: Text.
    Language language = 92; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 93; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 94; // Data type: Text.
  Claim interpreted_as_claim = 95; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 96; // Boolean: True or False.
  oneof is_based_on {
    string url = 97; // Data type: URL.
    Product product = 98; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 100; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 101; // Data type: URL.
    Product product = 102; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 103; // Boolean: True or False.
  oneof is_part_of {
    string url = 104; // Data type: URL.
    CreativeWork creative_work = 105; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 106; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 107; // Data type: URL.
    string text = 108; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 109; // Data type: Text.
    DefinedTerm defined_term = 110; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 111; // Data type: URL.
    CreativeWork creative_work = 112; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 113; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 114; // The most generic type of item.
  oneof maintainer {
    Person person = 115; // A person (alive, dead, undead, or fictional).
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 117; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 118; // Data type: URL.
    string text = 119; // Data type: Text.
  }
  Thing mentions = 120; // The most generic type of item.
  oneof offers {
    Demand demand = 121; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 122; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 123; // Data type: Text.
    DefinedTerm defined_term = 124; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 125; // Data type: Text.
    float32 integer = 126; // Data type: Integer.
  }
  oneof producer {
    Person person = 127; // A person (alive, dead, undead, or fictional).
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 129; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 130; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 131; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 132; // A person (alive, dead, undead, or fictional).
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 134; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 135; // Data type: URL.
    CreativeWork creative_work = 136; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 137; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 138; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 139; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 140; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 141; // Data type: Text.
  string sd_date_published = 142; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 143; // Data type: URL.
    CreativeWork creative_work = 144; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 145; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 146; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 147; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 148; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 149; // Data type: Text.
    QuantitativeValue quantitative_value = 150; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 151; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 152; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 153; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 154; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 155; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 156; // Data type: Text.
    DefinedTerm defined_term = 157; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 158; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 159; // Data type: Text.
  string text = 160; // Data type: Text.
  string thumbnail_url = 161; // Data type: URL.
  Duration time_required = 162; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 164; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 165; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 166; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 167; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 168; // Data type: URL.
  }
  oneof version {
    string text = 169; // Data type: Text.
    float32 number = 170; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 171; // A video file.
    Clip clip = 172; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 174; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 175; // Data type: URL.
  string alternate_name = 176; // Data type: Text.
  string description = 177; // Data type: Text.
  string disambiguating_description = 178; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 179; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 180; // Data type: Text.
    string url = 181; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 182; // An image file.
    string url = 183; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 184; // Data type: URL.
    CreativeWork creative_work = 185; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 186; // Data type: Text.
  Action potential_action = 187; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 188; // Data type: URL.
  oneof subject_of {
    Event event = 189; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 190; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 191; // Data type: URL.
}
message Article {
  // from Article
  string article_body = 1; // Data type: Text.
  string article_section = 2; // Data type: Text.
  oneof backstory {
    CreativeWork creative_work = 3; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string text = 4; // Data type: Text.
  }
  oneof page_end {
    float32 integer = 5; // Data type: Integer.
    string text = 6; // Data type: Text.
  }
  oneof page_start {
    float32 integer = 7; // Data type: Integer.
    string text = 8; // Data type: Text.
  }
  string pagination = 9; // Data type: Text.
  oneof speakable {
    string url = 10; // Data type: URL.
    SpeakableSpecification speakable_specification = 11; // A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
  }
  float32 word_count = 12; // Data type: Integer.
  // inherited from CreativeWork
  oneof object_object {
    string text = 13; // Data type: Text.
    QuantitativeValue quantitative_value = 14; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 15; // The most generic type of item.
  string abstract = 16; // Data type: Text.
  string access_mode = 17; // Data type: Text.
  ItemList access_mode_sufficient = 18; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 19; // Data type: Text.
  string accessibility_control = 20; // Data type: Text.
  string accessibility_feature = 21; // Data type: Text.
  string accessibility_hazard = 22; // Data type: Text.
  string accessibility_summary = 23; // Data type: Text.
  Person accountable_person = 24; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 26; // Data type: URL.
  }
  AggregateRating aggregate_rating = 27; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 28; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 29; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 30; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 31; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 32; // Data type: Text.
  }
  MediaObject associated_media = 33; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 34; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 35; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 36; // An audio file.
    MusicRecording music_recording = 37; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 38; // A person (alive, dead, undead, or fictional).
    Organization organization = 39; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 40; // Data type: Text.
  string awards = 41; // Data type: Text.
  Person character = 42; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 43; // Data type: Text.
    CreativeWork creative_work = 44; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 45; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 46; // Data type: Integer.
  string conditions_of_access = 47; // Data type: Text.
  Place content_location = 48; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 49; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 50; // Data type: Text.
  }
  string content_reference_time = 51; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 52; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 53; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 55; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 56; // Data type: Text.
  float32 copyright_year = 57; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 58; // A [[comment]] that corrects [[CreativeWork]].
    string text = 59; // Data type: Text.
    string url = 60; // Data type: URL.
  }
  Country country_of_origin = 61; // A country.
  oneof creative_work_status {
    string text = 62; // Data type: Text.
    DefinedTerm defined_term = 63; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 64; // A person (alive, dead, undead, or fictional).
    Organization organization = 65; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 66; // Data type: Text.
  string date_created = 67; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 68; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 69; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 70; // Data type: URL.
  string edit_eidr = 71; // Data type: Text.
  Person editor = 72; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 73; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 74; // Data type: URL.
    string text = 75; // Data type: Text.
    DefinedTerm defined_term = 76; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 77; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 78; // Data type: Text.
  }
  MediaObject encoding = 79; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 80; // Data type: Text.
  MediaObject encodings = 81; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 82; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 83; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 84; // Data type: URL.
  oneof funder {
    Organization organization = 85; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 86; // A person (alive, dead, undead, or fictional).
  }
  string genre = 87; // Data type: URL.
  CreativeWork has_part = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 89; // Data type: Text.
  oneof in_language {
    string text = 90; // Data type: Text.
    Language language = 91; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 92; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 93; // Data type: Text.
  Claim interpreted_as_claim = 94; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 95; // Boolean: True or False.
  oneof is_based_on {
    string url = 96; // Data type: URL.
    Product product = 97; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 98; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 99; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 100; // Data type: URL.
    Product product = 101; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 102; // Boolean: True or False.
  oneof is_part_of {
    string url = 103; // Data type: URL.
    CreativeWork creative_work = 104; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 105; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 108; // Data type: Text.
    DefinedTerm defined_term = 109; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 110; // Data type: URL.
    CreativeWork creative_work = 111; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 112; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 113; // The most generic type of item.
  oneof maintainer {
    Person person = 114; // A person (alive, dead, undead, or fictional).
    Organization organization = 115; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 116; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 117; // Data type: URL.
    string text = 118; // Data type: Text.
  }
  Thing mentions = 119; // The most generic type of item.
  oneof offers {
    Demand demand = 120; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 121; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 122; // Data type: Text.
    DefinedTerm defined_term = 123; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 124; // Data type: Text.
    float32 integer = 125; // Data type: Integer.
  }
  oneof producer {
    Person person = 126; // A person (alive, dead, undead, or fictional).
    Organization organization = 127; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 128; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 129; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 130; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 131; // A person (alive, dead, undead, or fictional).
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 133; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 134; // Data type: URL.
    CreativeWork creative_work = 135; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 136; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 137; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 138; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 139; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 140; // Data type: Text.
  string sd_date_published = 141; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 142; // Data type: URL.
    CreativeWork creative_work = 143; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 144; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 145; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 146; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 147; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 148; // Data type: Text.
    QuantitativeValue quantitative_value = 149; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 150; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 151; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 152; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 155; // Data type: Text.
    DefinedTerm defined_term = 156; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 157; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 158; // Data type: Text.
  string text = 159; // Data type: Text.
  string thumbnail_url = 160; // Data type: URL.
  Duration time_required = 161; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 163; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 164; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 165; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 166; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 167; // Data type: URL.
  }
  oneof version {
    string text = 168; // Data type: Text.
    float32 number = 169; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 170; // A video file.
    Clip clip = 171; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 172; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 174; // Data type: URL.
  string alternate_name = 175; // Data type: Text.
  string description = 176; // Data type: Text.
  string disambiguating_description = 177; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 178; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 179; // Data type: Text.
    string url = 180; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 181; // An image file.
    string url = 182; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 183; // Data type: URL.
    CreativeWork creative_work = 184; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 185; // Data type: Text.
  Action potential_action = 186; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 187; // Data type: URL.
  oneof subject_of {
    Event event = 188; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 189; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 190; // Data type: URL.
}
message MediaSubscription {
  // from MediaSubscription
  Organization authenticator = 1; // An organization such as a school, NGO, corporation, club, etc.
  Offer expects_acceptance_of = 2; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 3; // Data type: URL.
  string alternate_name = 4; // Data type: Text.
  string description = 5; // Data type: Text.
  string disambiguating_description = 6; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 7; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 8; // Data type: Text.
    string url = 9; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 10; // An image file.
    string url = 11; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 12; // Data type: URL.
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 14; // Data type: Text.
  Action potential_action = 15; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 16; // Data type: URL.
  oneof subject_of {
    Event event = 17; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 19; // Data type: URL.
}
message NewsArticle {
  // from NewsArticle
  string dateline = 1; // Data type: Text.
  string print_column = 2; // Data type: Text.
  string print_edition = 3; // Data type: Text.
  string print_page = 4; // Data type: Text.
  string print_section = 5; // Data type: Text.
  // inherited from Article
  string article_body = 6; // Data type: Text.
  string article_section = 7; // Data type: Text.
  oneof backstory {
    CreativeWork creative_work = 8; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string text = 9; // Data type: Text.
  }
  oneof page_end {
    float32 integer = 10; // Data type: Integer.
    string text = 11; // Data type: Text.
  }
  oneof page_start {
    float32 integer = 12; // Data type: Integer.
    string text = 13; // Data type: Text.
  }
  string pagination = 14; // Data type: Text.
  oneof speakable {
    string url = 15; // Data type: URL.
    SpeakableSpecification speakable_specification = 16; // A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
  }
  float32 word_count = 17; // Data type: Integer.
  // inherited from CreativeWork
  oneof object_object {
    string text = 18; // Data type: Text.
    QuantitativeValue quantitative_value = 19; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 20; // The most generic type of item.
  string abstract = 21; // Data type: Text.
  string access_mode = 22; // Data type: Text.
  ItemList access_mode_sufficient = 23; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 24; // Data type: Text.
  string accessibility_control = 25; // Data type: Text.
  string accessibility_feature = 26; // Data type: Text.
  string accessibility_hazard = 27; // Data type: Text.
  string accessibility_summary = 28; // Data type: Text.
  Person accountable_person = 29; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 30; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 31; // Data type: URL.
  }
  AggregateRating aggregate_rating = 32; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 33; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 34; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 35; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 36; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 37; // Data type: Text.
  }
  MediaObject associated_media = 38; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 39; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 40; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 41; // An audio file.
    MusicRecording music_recording = 42; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 43; // A person (alive, dead, undead, or fictional).
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 45; // Data type: Text.
  string awards = 46; // Data type: Text.
  Person character = 47; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 48; // Data type: Text.
    CreativeWork creative_work = 49; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 50; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 51; // Data type: Integer.
  string conditions_of_access = 52; // Data type: Text.
  Place content_location = 53; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 54; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 55; // Data type: Text.
  }
  string content_reference_time = 56; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 57; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 58; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 59; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 60; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 61; // Data type: Text.
  float32 copyright_year = 62; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 63; // A [[comment]] that corrects [[CreativeWork]].
    string text = 64; // Data type: Text.
    string url = 65; // Data type: URL.
  }
  Country country_of_origin = 66; // A country.
  oneof creative_work_status {
    string text = 67; // Data type: Text.
    DefinedTerm defined_term = 68; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 69; // A person (alive, dead, undead, or fictional).
    Organization organization = 70; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 71; // Data type: Text.
  string date_created = 72; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 73; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 74; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 75; // Data type: URL.
  string edit_eidr = 76; // Data type: Text.
  Person editor = 77; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 78; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 79; // Data type: URL.
    string text = 80; // Data type: Text.
    DefinedTerm defined_term = 81; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 82; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 83; // Data type: Text.
  }
  MediaObject encoding = 84; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 85; // Data type: Text.
  MediaObject encodings = 86; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 88; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 89; // Data type: URL.
  oneof funder {
    Organization organization = 90; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 91; // A person (alive, dead, undead, or fictional).
  }
  string genre = 92; // Data type: URL.
  CreativeWork has_part = 93; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 94; // Data type: Text.
  oneof in_language {
    string text = 95; // Data type: Text.
    Language language = 96; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 97; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 98; // Data type: Text.
  Claim interpreted_as_claim = 99; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 100; // Boolean: True or False.
  oneof is_based_on {
    string url = 101; // Data type: URL.
    Product product = 102; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 103; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 104; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 105; // Data type: URL.
    Product product = 106; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 107; // Boolean: True or False.
  oneof is_part_of {
    string url = 108; // Data type: URL.
    CreativeWork creative_work = 109; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 110; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 111; // Data type: URL.
    string text = 112; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 113; // Data type: Text.
    DefinedTerm defined_term = 114; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 115; // Data type: URL.
    CreativeWork creative_work = 116; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 117; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 118; // The most generic type of item.
  oneof maintainer {
    Person person = 119; // A person (alive, dead, undead, or fictional).
    Organization organization = 120; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 121; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 122; // Data type: URL.
    string text = 123; // Data type: Text.
  }
  Thing mentions = 124; // The most generic type of item.
  oneof offers {
    Demand demand = 125; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 126; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 127; // Data type: Text.
    DefinedTerm defined_term = 128; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 129; // Data type: Text.
    float32 integer = 130; // Data type: Integer.
  }
  oneof producer {
    Person person = 131; // A person (alive, dead, undead, or fictional).
    Organization organization = 132; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 134; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 135; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 136; // A person (alive, dead, undead, or fictional).
    Organization organization = 137; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 138; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 139; // Data type: URL.
    CreativeWork creative_work = 140; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 141; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 142; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 143; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 144; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 145; // Data type: Text.
  string sd_date_published = 146; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 147; // Data type: URL.
    CreativeWork creative_work = 148; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 149; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 150; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 151; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 152; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 153; // Data type: Text.
    QuantitativeValue quantitative_value = 154; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 155; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 156; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 157; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 158; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 159; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 160; // Data type: Text.
    DefinedTerm defined_term = 161; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 162; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 163; // Data type: Text.
  string text = 164; // Data type: Text.
  string thumbnail_url = 165; // Data type: URL.
  Duration time_required = 166; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 167; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 168; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 169; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 170; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 171; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 172; // Data type: URL.
  }
  oneof version {
    string text = 173; // Data type: Text.
    float32 number = 174; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 175; // A video file.
    Clip clip = 176; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 177; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 178; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 179; // Data type: URL.
  string alternate_name = 180; // Data type: Text.
  string description = 181; // Data type: Text.
  string disambiguating_description = 182; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 183; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 184; // Data type: Text.
    string url = 185; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 186; // An image file.
    string url = 187; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 188; // Data type: URL.
    CreativeWork creative_work = 189; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 190; // Data type: Text.
  Action potential_action = 191; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 192; // Data type: URL.
  oneof subject_of {
    Event event = 193; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 194; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 195; // Data type: URL.
}
message LocationFeatureSpecification {
  // from LocationFeatureSpecification
  OpeningHoursSpecification hours_available = 1; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  string valid_from = 2; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 3; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  // inherited from PropertyValue
  float32 max_value = 4; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  string measurement_technique = 5; // Data type: Text.
  float32 min_value = 6; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  string property_id = 7; // Data type: URL.
  string unit_code = 8; // Data type: Text.
  string unit_text = 9; // Data type: Text.
  oneof value {
    string text = 10; // Data type: Text.
    float32 number = 11; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    bool boolean = 12; // Boolean: True or False.
    StructuredValue structured_value = 13; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
  }
  oneof value_reference {
    PropertyValue property_value = 14; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    StructuredValue structured_value = 15; // Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
    QualitativeValue qualitative_value = 16; // A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
    MeasurementTypeEnumeration measurement_type_enumeration = 17; // Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
    QuantitativeValue quantitative_value = 18; //  A point value or interval for product characteristics and other purposes.
    string text = 19; // Data type: Text.
    DefinedTerm defined_term = 20; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    Enumeration enumeration = 21; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
  }
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 22; // Data type: URL.
  string alternate_name = 23; // Data type: Text.
  string description = 24; // Data type: Text.
  string disambiguating_description = 25; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 26; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 27; // Data type: Text.
    string url = 28; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 29; // An image file.
    string url = 30; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 31; // Data type: URL.
    CreativeWork creative_work = 32; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 33; // Data type: Text.
  Action potential_action = 34; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 35; // Data type: URL.
  oneof subject_of {
    Event event = 36; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 37; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 38; // Data type: URL.
}
message Map {
  // from Map
  MapCategoryType map_type = 1; // An enumeration of several kinds of Map.
  // inherited from CreativeWork
  oneof object_object {
    string text = 2; // Data type: Text.
    QuantitativeValue quantitative_value = 3; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 4; // The most generic type of item.
  string abstract = 5; // Data type: Text.
  string access_mode = 6; // Data type: Text.
  ItemList access_mode_sufficient = 7; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 8; // Data type: Text.
  string accessibility_control = 9; // Data type: Text.
  string accessibility_feature = 10; // Data type: Text.
  string accessibility_hazard = 11; // Data type: Text.
  string accessibility_summary = 12; // Data type: Text.
  Person accountable_person = 13; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 15; // Data type: URL.
  }
  AggregateRating aggregate_rating = 16; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 17; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 18; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 19; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 20; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 21; // Data type: Text.
  }
  MediaObject associated_media = 22; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 23; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 24; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 25; // An audio file.
    MusicRecording music_recording = 26; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 27; // A person (alive, dead, undead, or fictional).
    Organization organization = 28; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 29; // Data type: Text.
  string awards = 30; // Data type: Text.
  Person character = 31; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 32; // Data type: Text.
    CreativeWork creative_work = 33; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 34; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 35; // Data type: Integer.
  string conditions_of_access = 36; // Data type: Text.
  Place content_location = 37; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 38; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 39; // Data type: Text.
  }
  string content_reference_time = 40; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 41; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 42; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 43; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 44; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 45; // Data type: Text.
  float32 copyright_year = 46; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 47; // A [[comment]] that corrects [[CreativeWork]].
    string text = 48; // Data type: Text.
    string url = 49; // Data type: URL.
  }
  Country country_of_origin = 50; // A country.
  oneof creative_work_status {
    string text = 51; // Data type: Text.
    DefinedTerm defined_term = 52; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 53; // A person (alive, dead, undead, or fictional).
    Organization organization = 54; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 55; // Data type: Text.
  string date_created = 56; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 58; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 59; // Data type: URL.
  string edit_eidr = 60; // Data type: Text.
  Person editor = 61; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 62; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 63; // Data type: URL.
    string text = 64; // Data type: Text.
    DefinedTerm defined_term = 65; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 67; // Data type: Text.
  }
  MediaObject encoding = 68; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 69; // Data type: Text.
  MediaObject encodings = 70; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 71; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 72; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 73; // Data type: URL.
  oneof funder {
    Organization organization = 74; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 75; // A person (alive, dead, undead, or fictional).
  }
  string genre = 76; // Data type: URL.
  CreativeWork has_part = 77; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 78; // Data type: Text.
  oneof in_language {
    string text = 79; // Data type: Text.
    Language language = 80; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 81; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 82; // Data type: Text.
  Claim interpreted_as_claim = 83; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 84; // Boolean: True or False.
  oneof is_based_on {
    string url = 85; // Data type: URL.
    Product product = 86; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 87; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 89; // Data type: URL.
    Product product = 90; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 91; // Boolean: True or False.
  oneof is_part_of {
    string url = 92; // Data type: URL.
    CreativeWork creative_work = 93; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 94; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 95; // Data type: URL.
    string text = 96; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 97; // Data type: Text.
    DefinedTerm defined_term = 98; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 99; // Data type: URL.
    CreativeWork creative_work = 100; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 101; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 102; // The most generic type of item.
  oneof maintainer {
    Person person = 103; // A person (alive, dead, undead, or fictional).
    Organization organization = 104; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 105; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 106; // Data type: URL.
    string text = 107; // Data type: Text.
  }
  Thing mentions = 108; // The most generic type of item.
  oneof offers {
    Demand demand = 109; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 110; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 111; // Data type: Text.
    DefinedTerm defined_term = 112; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 113; // Data type: Text.
    float32 integer = 114; // Data type: Integer.
  }
  oneof producer {
    Person person = 115; // A person (alive, dead, undead, or fictional).
    Organization organization = 116; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 117; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 118; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 119; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 120; // A person (alive, dead, undead, or fictional).
    Organization organization = 121; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 122; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 123; // Data type: URL.
    CreativeWork creative_work = 124; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 125; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 126; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 127; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 128; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 129; // Data type: Text.
  string sd_date_published = 130; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 131; // Data type: URL.
    CreativeWork creative_work = 132; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 133; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 134; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 135; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 136; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 137; // Data type: Text.
    QuantitativeValue quantitative_value = 138; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 139; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 140; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 141; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 142; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 143; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 144; // Data type: Text.
    DefinedTerm defined_term = 145; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 146; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 147; // Data type: Text.
  string text = 148; // Data type: Text.
  string thumbnail_url = 149; // Data type: URL.
  Duration time_required = 150; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 151; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 152; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 153; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 154; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 155; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 156; // Data type: URL.
  }
  oneof version {
    string text = 157; // Data type: Text.
    float32 number = 158; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 159; // A video file.
    Clip clip = 160; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 161; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 163; // Data type: URL.
  string alternate_name = 164; // Data type: Text.
  string description = 165; // Data type: Text.
  string disambiguating_description = 166; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 167; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 168; // Data type: Text.
    string url = 169; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 170; // An image file.
    string url = 171; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 172; // Data type: URL.
    CreativeWork creative_work = 173; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 174; // Data type: Text.
  Action potential_action = 175; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 176; // Data type: URL.
  oneof subject_of {
    Event event = 177; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 178; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 179; // Data type: URL.
}
message MapCategoryType {
  // from MapCategoryType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message DeliveryMethod {
  // from DeliveryMethod
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message BusinessEntityType {
  // from BusinessEntityType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message ItemAvailability {
  // from ItemAvailability
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message LoanOrCredit {
  // from LoanOrCredit
  oneof amount {
    float32 number = 1; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    MonetaryAmount monetary_amount = 2; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  }
  string currency = 3; // Data type: Text.
  Duration grace_period = 4; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  RepaymentSpecification loan_repayment_form = 5; // A structured value representing repayment.
  QuantitativeValue loan_term = 6; //  A point value or interval for product characteristics and other purposes.
  string loan_type = 7; // Data type: URL.
  bool recourse_loan = 8; // Boolean: True or False.
  bool renegotiable_loan = 9; // Boolean: True or False.
  oneof required_collateral {
    string text = 10; // Data type: Text.
    Thing thing = 11; // The most generic type of item.
  }
  // inherited from FinancialProduct
  oneof annual_percentage_rate {
    QuantitativeValue quantitative_value = 12; //  A point value or interval for product characteristics and other purposes.
    float32 number = 13; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  string fees_and_commissions_specification = 14; // Data type: URL.
  oneof interest_rate {
    float32 number = 15; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    QuantitativeValue quantitative_value = 16; //  A point value or interval for product characteristics and other purposes.
  }
  // inherited from Service
  AggregateRating aggregate_rating = 17; // The average rating based on multiple ratings or reviews.
  oneof area_served {
    string text = 18; // Data type: Text.
    GeoShape geo_shape = 19; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 20; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 21; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience audience = 22; // Intended audience for an item, i.e. the group for whom the item was created.
  ServiceChannel available_channel = 23; // A means for accessing a service, e.g. a government office location, web site, or phone number.
  string award = 24; // Data type: Text.
  oneof brand {
    Organization organization = 25; // An organization such as a school, NGO, corporation, club, etc.
    Brand brand = 26; // A brand is a name used by an organization or business person for labeling a product, product group, or similar.
  }
  oneof broker {
    Organization organization = 27; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 28; // A person (alive, dead, undead, or fictional).
  }
  oneof category {
    string text = 29; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 30; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 31; // The most generic type of item.
    string url = 32; // Data type: URL.
  }
  OfferCatalog has_offer_catalog = 33; // An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
  OpeningHoursSpecification hours_available = 34; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  oneof is_related_to {
    Product product = 35; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 36; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof is_similar_to {
    Product product = 37; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    Service service = 38; // A service provided by an organization, e.g. delivery service, print services, etc.
  }
  oneof logo {
    string url = 39; // Data type: URL.
    ImageObject image_object = 40; // An image file.
  }
  oneof offers {
    Demand demand = 41; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 42; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  Thing produces = 43; // The most generic type of item.
  oneof provider {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  string provider_mobility = 46; // Data type: Text.
  Review review = 47; // A review of an item - for example, of a restaurant, movie, or store.
  oneof service_area {
    GeoShape geo_shape = 48; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 49; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 50; // A geographical region, typically under the jurisdiction of a particular government.
  }
  Audience service_audience = 51; // Intended audience for an item, i.e. the group for whom the item was created.
  Thing service_output = 52; // The most generic type of item.
  oneof service_type {
    string text = 53; // Data type: Text.
    GovernmentBenefitsType government_benefits_type = 54; // GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
  }
  string slogan = 55; // Data type: Text.
  string terms_of_service = 56; // Data type: Text.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 57; // Data type: URL.
  string alternate_name = 58; // Data type: Text.
  string description = 59; // Data type: Text.
  string disambiguating_description = 60; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 61; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 62; // Data type: Text.
    string url = 63; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 64; // An image file.
    string url = 65; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 66; // Data type: URL.
    CreativeWork creative_work = 67; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 68; // Data type: Text.
  Action potential_action = 69; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 70; // Data type: URL.
  oneof subject_of {
    Event event = 71; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 72; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 73; // Data type: URL.
}
message RepaymentSpecification {
  // from RepaymentSpecification
  oneof down_payment {
    float32 number = 1; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    MonetaryAmount monetary_amount = 2; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  }
  MonetaryAmount early_prepayment_penalty = 3; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  MonetaryAmount loan_payment_amount = 4; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  float32 loan_payment_frequency = 5; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  float32 number_of_loan_payments = 6; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message PaymentMethod {
  // from PaymentMethod
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message WarrantyPromise {
  // from WarrantyPromise
  QuantitativeValue duration_of_warranty = 1; //  A point value or interval for product characteristics and other purposes.
  WarrantyScope warranty_scope = 2; // A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp       
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 3; // Data type: URL.
  string alternate_name = 4; // Data type: Text.
  string description = 5; // Data type: Text.
  string disambiguating_description = 6; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 7; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 8; // Data type: Text.
    string url = 9; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 10; // An image file.
    string url = 11; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 12; // Data type: URL.
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 14; // Data type: Text.
  Action potential_action = 15; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 16; // Data type: URL.
  oneof subject_of {
    Event event = 17; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 19; // Data type: URL.
}
message WarrantyScope {
  // from WarrantyScope
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message Trip {
  // from Trip
  string arrival_time = 1; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string departure_time = 2; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof itinerary {
    ItemList item_list = 3; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
    Place place = 4; // Entities that have a somewhat fixed, physical extension.
  }
  oneof offers {
    Demand demand = 5; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 6; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  Trip part_of_trip = 7; // A trip or journey. An itinerary of visits to one or more places.
  oneof provider {
    Organization organization = 8; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 9; // A person (alive, dead, undead, or fictional).
  }
  Trip sub_trip = 10; // A trip or journey. An itinerary of visits to one or more places.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 11; // Data type: URL.
  string alternate_name = 12; // Data type: Text.
  string description = 13; // Data type: Text.
  string disambiguating_description = 14; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 15; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 16; // Data type: Text.
    string url = 17; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 18; // An image file.
    string url = 19; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 20; // Data type: URL.
    CreativeWork creative_work = 21; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 22; // Data type: Text.
  Action potential_action = 23; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 24; // Data type: URL.
  oneof subject_of {
    Event event = 25; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 26; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 27; // Data type: URL.
}
message AggregateOffer {
  // from AggregateOffer
  oneof high_price {
    string text = 1; // Data type: Text.
    float32 number = 2; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof low_price {
    string text = 3; // Data type: Text.
    float32 number = 4; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  float32 offer_count = 5; // Data type: Integer.
  oneof offers {
    Demand demand = 6; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 7; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  // inherited from Offer
  oneof accepted_payment_method {
    LoanOrCredit loan_or_credit = 8; // A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
    PaymentMethod payment_method = 9; // A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm         
  }
  Offer add_on = 10; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  QuantitativeValue advance_booking_requirement = 11; //  A point value or interval for product characteristics and other purposes.
  AggregateRating aggregate_rating = 12; // The average rating based on multiple ratings or reviews.
  oneof area_served {
    string text = 13; // Data type: Text.
    GeoShape geo_shape = 14; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 15; // Entities that have a somewhat fixed, physical extension.
    AdministrativeArea administrative_area = 16; // A geographical region, typically under the jurisdiction of a particular government.
  }
  ItemAvailability availability = 17; // A list of possible product availability options.
  string availability_ends = 18; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  string availability_starts = 19; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  Place available_at_or_from = 20; // Entities that have a somewhat fixed, physical extension.
  DeliveryMethod available_delivery_method = 21; // A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS         
  BusinessFunction business_function = 22; // The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy         
  oneof category {
    string text = 23; // Data type: Text.
    PhysicalActivityCategory physical_activity_category = 24; // Categories of physical activity, organized by physiologic classification.
    Thing thing = 25; // The most generic type of item.
    string url = 26; // Data type: URL.
  }
  QuantitativeValue delivery_lead_time = 27; //  A point value or interval for product characteristics and other purposes.
  BusinessEntityType eligible_customer_type = 28; // A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller 	  
  QuantitativeValue eligible_duration = 29; //  A point value or interval for product characteristics and other purposes.
  QuantitativeValue eligible_quantity = 30; //  A point value or interval for product characteristics and other purposes.
  oneof eligible_region {
    GeoShape geo_shape = 31; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    Place place = 32; // Entities that have a somewhat fixed, physical extension.
    string text = 33; // Data type: Text.
  }
  PriceSpecification eligible_transaction_volume = 34; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  string gtin = 35; // Data type: Text.
  string gtin_12 = 36; // Data type: Text.
  string gtin_13 = 37; // Data type: Text.
  string gtin_14 = 38; // Data type: Text.
  string gtin_8 = 39; // Data type: Text.
  QuantitativeValue has_measurement = 40; //  A point value or interval for product characteristics and other purposes.
  MerchantReturnPolicy has_merchant_return_policy = 41; // A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
  TypeAndQuantityNode includes_object = 42; // A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
  oneof ineligible_region {
    Place place = 43; // Entities that have a somewhat fixed, physical extension.
    GeoShape geo_shape = 44; // The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
    string text = 45; // Data type: Text.
  }
  QuantitativeValue inventory_level = 46; //  A point value or interval for product characteristics and other purposes.
  OfferItemCondition item_condition = 47; // A list of possible conditions for the item.
  oneof item_offered {
    Trip trip = 48; // A trip or journey. An itinerary of visits to one or more places.
    Event event = 49; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    AggregateOffer aggregate_offer = 50; // When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
    CreativeWork creative_work = 51; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    Service service = 52; // A service provided by an organization, e.g. delivery service, print services, etc.
    Product product = 53; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    MenuItem menu_item = 54; // A food or drink item listed in a menu or menu section.
  }
  oneof lease_length {
    QuantitativeValue quantitative_value = 55; //  A point value or interval for product characteristics and other purposes.
    Duration duration = 56; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  }
  string mpn = 57; // Data type: Text.
  oneof offered_by {
    Organization organization = 58; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 59; // A person (alive, dead, undead, or fictional).
  }
  oneof price {
    float32 number = 60; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
    string text = 61; // Data type: Text.
  }
  string price_currency = 62; // Data type: Text.
  PriceSpecification price_specification = 63; // A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
  string price_valid_until = 64; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  Review review = 65; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 66; // A review of an item - for example, of a restaurant, movie, or store.
  oneof seller {
    Person person = 67; // A person (alive, dead, undead, or fictional).
    Organization organization = 68; // An organization such as a school, NGO, corporation, club, etc.
  }
  string serial_number = 69; // Data type: Text.
  OfferShippingDetails shipping_details = 70; // OfferShippingDetails represents information about shipping destinations.  Multiple of these entities can be used to represent different shipping rates for different destinations:  One entity for Alaska/Hawaii. A different one for continental US.A different one for all France.  Multiple of these entities can be used to represent different shipping costs and delivery times.  Two entities that are identical but differ in rate and time:  e.g. Cheaper and slower: $5 in 5-7days or Fast and expensive: $15 in 1-2 days.
  string sku = 71; // Data type: Text.
  string valid_from = 72; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string valid_through = 73; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  WarrantyPromise warranty = 74; // A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 75; // Data type: URL.
  string alternate_name = 76; // Data type: Text.
  string description = 77; // Data type: Text.
  string disambiguating_description = 78; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 79; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 80; // Data type: Text.
    string url = 81; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 82; // An image file.
    string url = 83; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 84; // Data type: URL.
    CreativeWork creative_work = 85; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 86; // Data type: Text.
  Action potential_action = 87; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 88; // Data type: URL.
  oneof subject_of {
    Event event = 89; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 90; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 91; // Data type: URL.
}
message MenuItem {
  // from MenuItem
  oneof menu_add_on {
    MenuSection menu_section = 1; // A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
    MenuItem menu_item = 2; // A food or drink item listed in a menu or menu section.
  }
  NutritionInformation nutrition = 3; // Nutritional information about the recipe.
  oneof offers {
    Demand demand = 4; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 5; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  RestrictedDiet suitable_for_diet = 6; // A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons. 
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message MenuSection {
  // from MenuSection
  MenuItem has_menu_item = 1; // A food or drink item listed in a menu or menu section.
  MenuSection has_menu_section = 2; // A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
  // inherited from CreativeWork
  oneof object_object {
    string text = 3; // Data type: Text.
    QuantitativeValue quantitative_value = 4; //  A point value or interval for product characteristics and other purposes.
  }
  Thing about = 5; // The most generic type of item.
  string abstract = 6; // Data type: Text.
  string access_mode = 7; // Data type: Text.
  ItemList access_mode_sufficient = 8; // A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
  string accessibility_api = 9; // Data type: Text.
  string accessibility_control = 10; // Data type: Text.
  string accessibility_feature = 11; // Data type: Text.
  string accessibility_hazard = 12; // Data type: Text.
  string accessibility_summary = 13; // Data type: Text.
  Person accountable_person = 14; // A person (alive, dead, undead, or fictional).
  oneof acquire_license_page {
    CreativeWork creative_work = 15; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 16; // Data type: URL.
  }
  AggregateRating aggregate_rating = 17; // The average rating based on multiple ratings or reviews.
  string alternative_headline = 18; // Data type: Text.
  oneof archived_at {
    WebPage web_page = 19; // A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
    string url = 20; // Data type: URL.
  }
  oneof assesses {
    DefinedTerm defined_term = 21; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 22; // Data type: Text.
  }
  MediaObject associated_media = 23; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  Audience audience = 24; // Intended audience for an item, i.e. the group for whom the item was created.
  oneof audio {
    Clip clip = 25; // A short TV or radio program or a segment/part of a program.
    AudioObject audio_object = 26; // An audio file.
    MusicRecording music_recording = 27; // A music recording (track), usually a single song.
  }
  oneof author {
    Person person = 28; // A person (alive, dead, undead, or fictional).
    Organization organization = 29; // An organization such as a school, NGO, corporation, club, etc.
  }
  string award = 30; // Data type: Text.
  string awards = 31; // Data type: Text.
  Person character = 32; // A person (alive, dead, undead, or fictional).
  oneof citation {
    string text = 33; // Data type: Text.
    CreativeWork creative_work = 34; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Comment comment = 35; // A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
  float32 comment_count = 36; // Data type: Integer.
  string conditions_of_access = 37; // Data type: Text.
  Place content_location = 38; // Entities that have a somewhat fixed, physical extension.
  oneof content_rating {
    Rating rating = 39; // A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
    string text = 40; // Data type: Text.
  }
  string content_reference_time = 41; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  oneof contributor {
    Organization organization = 42; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 43; // A person (alive, dead, undead, or fictional).
  }
  oneof copyright_holder {
    Organization organization = 44; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 45; // A person (alive, dead, undead, or fictional).
  }
  string copyright_notice = 46; // Data type: Text.
  float32 copyright_year = 47; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  oneof correction {
    CorrectionComment correction_comment = 48; // A [[comment]] that corrects [[CreativeWork]].
    string text = 49; // Data type: Text.
    string url = 50; // Data type: URL.
  }
  Country country_of_origin = 51; // A country.
  oneof creative_work_status {
    string text = 52; // Data type: Text.
    DefinedTerm defined_term = 53; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof creator {
    Person person = 54; // A person (alive, dead, undead, or fictional).
    Organization organization = 55; // An organization such as a school, NGO, corporation, club, etc.
  }
  string credit_text = 56; // Data type: Text.
  string date_created = 57; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_modified = 58; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string date_published = 59; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string discussion_url = 60; // Data type: URL.
  string edit_eidr = 61; // Data type: Text.
  Person editor = 62; // A person (alive, dead, undead, or fictional).
  AlignmentObject educational_alignment = 63; // An intangible item that describes an alignment between a learning resource and a node in an educational framework.  Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
  oneof educational_level {
    string url = 64; // Data type: URL.
    string text = 65; // Data type: Text.
    DefinedTerm defined_term = 66; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof educational_use {
    DefinedTerm defined_term = 67; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 68; // Data type: Text.
  }
  MediaObject encoding = 69; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  string encoding_format = 70; // Data type: Text.
  MediaObject encodings = 71; // A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
  CreativeWork example_of_work = 72; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string expires = 73; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  string file_format = 74; // Data type: URL.
  oneof funder {
    Organization organization = 75; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 76; // A person (alive, dead, undead, or fictional).
  }
  string genre = 77; // Data type: URL.
  CreativeWork has_part = 78; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  string headline = 79; // Data type: Text.
  oneof in_language {
    string text = 80; // Data type: Text.
    Language language = 81; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  InteractionCounter interaction_statistic = 82; // A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
  string interactivity_type = 83; // Data type: Text.
  Claim interpreted_as_claim = 84; // A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.    Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].    At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.   
  bool is_accessible_for_free = 85; // Boolean: True or False.
  oneof is_based_on {
    string url = 86; // Data type: URL.
    Product product = 87; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    CreativeWork creative_work = 88; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof is_based_on_url {
    CreativeWork creative_work = 89; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 90; // Data type: URL.
    Product product = 91; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
  }
  bool is_family_friendly = 92; // Boolean: True or False.
  oneof is_part_of {
    string url = 93; // Data type: URL.
    CreativeWork creative_work = 94; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof keywords {
    DefinedTerm defined_term = 95; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string url = 96; // Data type: URL.
    string text = 97; // Data type: Text.
  }
  oneof learning_resource_type {
    string text = 98; // Data type: Text.
    DefinedTerm defined_term = 99; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof license {
    string url = 100; // Data type: URL.
    CreativeWork creative_work = 101; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Place location_created = 102; // Entities that have a somewhat fixed, physical extension.
  Thing main_entity = 103; // The most generic type of item.
  oneof maintainer {
    Person person = 104; // A person (alive, dead, undead, or fictional).
    Organization organization = 105; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof material {
    Product product = 106; // Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
    string url = 107; // Data type: URL.
    string text = 108; // Data type: Text.
  }
  Thing mentions = 109; // The most generic type of item.
  oneof offers {
    Demand demand = 110; // A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
    Offer offer = 111; // An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
  }
  oneof pattern {
    string text = 112; // Data type: Text.
    DefinedTerm defined_term = 113; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  oneof position {
    string text = 114; // Data type: Text.
    float32 integer = 115; // Data type: Integer.
  }
  oneof producer {
    Person person = 116; // A person (alive, dead, undead, or fictional).
    Organization organization = 117; // An organization such as a school, NGO, corporation, club, etc.
  }
  oneof provider {
    Organization organization = 118; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 119; // A person (alive, dead, undead, or fictional).
  }
  PublicationEvent publication = 120; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  oneof publisher {
    Person person = 121; // A person (alive, dead, undead, or fictional).
    Organization organization = 122; // An organization such as a school, NGO, corporation, club, etc.
  }
  Organization publisher_imprint = 123; // An organization such as a school, NGO, corporation, club, etc.
  oneof publishing_principles {
    string url = 124; // Data type: URL.
    CreativeWork creative_work = 125; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  Event recorded_at = 126; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
  PublicationEvent released_event = 127; // A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
  Review review = 128; // A review of an item - for example, of a restaurant, movie, or store.
  Review reviews = 129; // A review of an item - for example, of a restaurant, movie, or store.
  string schema_version = 130; // Data type: Text.
  string sd_date_published = 131; // A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
  oneof sd_license {
    string url = 132; // Data type: URL.
    CreativeWork creative_work = 133; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  oneof sd_publisher {
    Organization organization = 134; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 135; // A person (alive, dead, undead, or fictional).
  }
  oneof size {
    SizeSpecification size_specification = 136; // Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
    DefinedTerm defined_term = 137; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
    string text = 138; // Data type: Text.
    QuantitativeValue quantitative_value = 139; //  A point value or interval for product characteristics and other purposes.
  }
  Organization source_organization = 140; // An organization such as a school, NGO, corporation, club, etc.
  Place spatial = 141; // Entities that have a somewhat fixed, physical extension.
  Place spatial_coverage = 142; // Entities that have a somewhat fixed, physical extension.
  oneof sponsor {
    Organization organization = 143; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 144; // A person (alive, dead, undead, or fictional).
  }
  oneof teaches {
    string text = 145; // Data type: Text.
    DefinedTerm defined_term = 146; // A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
  }
  string temporal = 147; // A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
  string temporal_coverage = 148; // Data type: Text.
  string text = 149; // Data type: Text.
  string thumbnail_url = 150; // Data type: URL.
  Duration time_required = 151; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  CreativeWork translation_of_work = 152; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  oneof translator {
    Organization organization = 153; // An organization such as a school, NGO, corporation, club, etc.
    Person person = 154; // A person (alive, dead, undead, or fictional).
  }
  string typical_age_range = 155; // Data type: Text.
  oneof usage_info {
    CreativeWork creative_work = 156; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
    string url = 157; // Data type: URL.
  }
  oneof version {
    string text = 158; // Data type: Text.
    float32 number = 159; // Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
  }
  oneof video {
    VideoObject video_object = 160; // A video file.
    Clip clip = 161; // A short TV or radio program or a segment/part of a program.
  }
  CreativeWork work_example = 162; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  CreativeWork work_translation = 163; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  // inherited from Thing
  string additional_type = 164; // Data type: URL.
  string alternate_name = 165; // Data type: Text.
  string description = 166; // Data type: Text.
  string disambiguating_description = 167; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 168; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 169; // Data type: Text.
    string url = 170; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 171; // An image file.
    string url = 172; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 173; // Data type: URL.
    CreativeWork creative_work = 174; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 175; // Data type: Text.
  Action potential_action = 176; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 177; // Data type: URL.
  oneof subject_of {
    Event event = 178; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 179; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 180; // Data type: URL.
}
message NutritionInformation {
  // from NutritionInformation
  Energy calories = 1; // Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
  Mass carbohydrate_content = 2; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass cholesterol_content = 3; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass fat_content = 4; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass fiber_content = 5; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass protein_content = 6; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass saturated_fat_content = 7; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  string serving_size = 8; // Data type: Text.
  Mass sodium_content = 9; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass sugar_content = 10; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass trans_fat_content = 11; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  Mass unsaturated_fat_content = 12; // Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 13; // Data type: URL.
  string alternate_name = 14; // Data type: Text.
  string description = 15; // Data type: Text.
  string disambiguating_description = 16; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 17; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 18; // Data type: Text.
    string url = 19; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 20; // An image file.
    string url = 21; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 22; // Data type: URL.
    CreativeWork creative_work = 23; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 24; // Data type: Text.
  Action potential_action = 25; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 26; // Data type: URL.
  oneof subject_of {
    Event event = 27; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 28; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 29; // Data type: URL.
}
message Energy {
  // from Energy
  // inherited from Quantity
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message Mass {
  // from Mass
  // inherited from Quantity
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 1; // Data type: URL.
  string alternate_name = 2; // Data type: Text.
  string description = 3; // Data type: Text.
  string disambiguating_description = 4; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 5; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 6; // Data type: Text.
    string url = 7; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 8; // An image file.
    string url = 9; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 10; // Data type: URL.
    CreativeWork creative_work = 11; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 12; // Data type: Text.
  Action potential_action = 13; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 14; // Data type: URL.
  oneof subject_of {
    Event event = 15; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 16; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 17; // Data type: URL.
}
message RestrictedDiet {
  // from RestrictedDiet
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message OfferShippingDetails {
  // from OfferShippingDetails
  ShippingDeliveryTime delivery_time = 1; // ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
  bool does_not_ship = 2; // Boolean: True or False.
  DefinedRegion shipping_destination = 3; // A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.  Examples: a delivery destination when shopping. Region where regional pricing is configured.  Requirement 1: Country: US States: "NY", "CA"  Requirement 2: Country: US PostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]} { [12345, 12345], [78945, 78945], } Region = state, canton, prefecture, autonomous community... 
  string shipping_label = 4; // Data type: Text.
  MonetaryAmount shipping_rate = 5; // A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
  string shipping_settings_link = 6; // Data type: URL.
  string transit_time_label = 7; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 8; // Data type: URL.
  string alternate_name = 9; // Data type: Text.
  string description = 10; // Data type: Text.
  string disambiguating_description = 11; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 12; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 13; // Data type: Text.
    string url = 14; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 15; // An image file.
    string url = 16; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 17; // Data type: URL.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 19; // Data type: Text.
  Action potential_action = 20; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 21; // Data type: URL.
  oneof subject_of {
    Event event = 22; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 23; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 24; // Data type: URL.
}
message DefinedRegion {
  // from DefinedRegion
  oneof address_country {
    string text = 1; // Data type: Text.
    Country country = 2; // A country.
  }
  string address_region = 3; // Data type: Text.
  string postal_code = 4; // Data type: Text.
  string postal_code_prefix = 5; // Data type: Text.
  PostalCodeRangeSpecification postal_code_range = 6; // Indicates a range of postalcodes, usually defined as the set of valid codes between [[postalCodeBegin]] and [[postalCodeEnd]], inclusively.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 7; // Data type: URL.
  string alternate_name = 8; // Data type: Text.
  string description = 9; // Data type: Text.
  string disambiguating_description = 10; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 11; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 12; // Data type: Text.
    string url = 13; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 14; // An image file.
    string url = 15; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 16; // Data type: URL.
    CreativeWork creative_work = 17; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 18; // Data type: Text.
  Action potential_action = 19; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 20; // Data type: URL.
  oneof subject_of {
    Event event = 21; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 22; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 23; // Data type: URL.
}
message PostalCodeRangeSpecification {
  // from PostalCodeRangeSpecification
  string postal_code_begin = 1; // Data type: Text.
  string postal_code_end = 2; // Data type: Text.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 3; // Data type: URL.
  string alternate_name = 4; // Data type: Text.
  string description = 5; // Data type: Text.
  string disambiguating_description = 6; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 7; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 8; // Data type: Text.
    string url = 9; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 10; // An image file.
    string url = 11; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 12; // Data type: URL.
    CreativeWork creative_work = 13; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 14; // Data type: Text.
  Action potential_action = 15; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 16; // Data type: URL.
  oneof subject_of {
    Event event = 17; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 18; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 19; // Data type: URL.
}
message ShippingDeliveryTime {
  // from ShippingDeliveryTime
  OpeningHoursSpecification business_days = 1; // A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.       
  string cutoff_time = 2; // A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
  QuantitativeValue handling_time = 3; //  A point value or interval for product characteristics and other purposes.
  QuantitativeValue transit_time = 4; //  A point value or interval for product characteristics and other purposes.
  // inherited from StructuredValue
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 5; // Data type: URL.
  string alternate_name = 6; // Data type: Text.
  string description = 7; // Data type: Text.
  string disambiguating_description = 8; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 9; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 10; // Data type: Text.
    string url = 11; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 12; // An image file.
    string url = 13; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 14; // Data type: URL.
    CreativeWork creative_work = 15; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 16; // Data type: Text.
  Action potential_action = 17; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 18; // Data type: URL.
  oneof subject_of {
    Event event = 19; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 21; // Data type: URL.
}
message GovernmentBenefitsType {
  // from GovernmentBenefitsType
  // inherited from Enumeration
  oneof superseded_by {
    Class class = 1; // A class, also often called a 'Type'; equivalent to rdfs:Class.
    Enumeration enumeration = 2; // Lists or enumerations—for example, a list of cuisines or music genres, etc.
    Property property = 3; // A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
  }
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 4; // Data type: URL.
  string alternate_name = 5; // Data type: Text.
  string description = 6; // Data type: Text.
  string disambiguating_description = 7; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 8; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 9; // Data type: Text.
    string url = 10; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 11; // An image file.
    string url = 12; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 13; // Data type: URL.
    CreativeWork creative_work = 14; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 15; // Data type: Text.
  Action potential_action = 16; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 17; // Data type: URL.
  oneof subject_of {
    Event event = 18; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 19; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 20; // Data type: URL.
}
message ServiceChannel {
  // from ServiceChannel
  oneof available_language {
    string text = 1; // Data type: Text.
    Language language = 2; // Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
  }
  Duration processing_time = 3; // Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
  Service provides_service = 4; // A service provided by an organization, e.g. delivery service, print services, etc.
  Place service_location = 5; // Entities that have a somewhat fixed, physical extension.
  ContactPoint service_phone = 6; // A contact point&#x2014;for example, a Customer Complaints department.
  PostalAddress service_postal_address = 7; // The mailing address.
  ContactPoint service_sms_number = 8; // A contact point&#x2014;for example, a Customer Complaints department.
  string service_url = 9; // Data type: URL.
  // inherited from Intangible
  // inherited from Thing
  string additional_type = 10; // Data type: URL.
  string alternate_name = 11; // Data type: Text.
  string description = 12; // Data type: Text.
  string disambiguating_description = 13; // Data type: Text.
  oneof identifier {
    PropertyValue property_value = 14; // A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.     
    string text = 15; // Data type: Text.
    string url = 16; // Data type: URL.
  }
  oneof image {
    ImageObject image_object = 17; // An image file.
    string url = 18; // Data type: URL.
  }
  oneof main_entity_of_page {
    string url = 19; // Data type: URL.
    CreativeWork creative_work = 20; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string name = 21; // Data type: Text.
  Action potential_action = 22; // An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
  string same_as = 23; // Data type: URL.
  oneof subject_of {
    Event event = 24; // An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
    CreativeWork creative_work = 25; // The most generic kind of creative work, including books, movies, photographs, software programs, etc.
  }
  string url = 26; // Data type: URL.
}
